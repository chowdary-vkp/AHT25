
AHT25_FREERTOS_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008bc8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005ac  08008d68  08008d68  00018d68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009314  08009314  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08009314  08009314  00019314  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800931c  0800931c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800931c  0800931c  0001931c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009320  08009320  00019320  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08009324  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000041f0  200001e0  08009504  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200043d0  08009504  000243d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000170a3  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f38  00000000  00000000  000372b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001410  00000000  00000000  0003a1f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001300  00000000  00000000  0003b600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001934f  00000000  00000000  0003c900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001653c  00000000  00000000  00055c4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a72f  00000000  00000000  0006c18b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001068ba  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006688  00000000  00000000  0010690c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008d50 	.word	0x08008d50

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	08008d50 	.word	0x08008d50

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c6c:	f000 b974 	b.w	8000f58 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468e      	mov	lr, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14d      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4694      	mov	ip, r2
 8000c9a:	d969      	bls.n	8000d70 <__udivmoddi4+0xe8>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b152      	cbz	r2, 8000cb8 <__udivmoddi4+0x30>
 8000ca2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ca6:	f1c2 0120 	rsb	r1, r2, #32
 8000caa:	fa20 f101 	lsr.w	r1, r0, r1
 8000cae:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cb6:	4094      	lsls	r4, r2
 8000cb8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cbc:	0c21      	lsrs	r1, r4, #16
 8000cbe:	fbbe f6f8 	udiv	r6, lr, r8
 8000cc2:	fa1f f78c 	uxth.w	r7, ip
 8000cc6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cce:	fb06 f107 	mul.w	r1, r6, r7
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000cde:	f080 811f 	bcs.w	8000f20 <__udivmoddi4+0x298>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 811c 	bls.w	8000f20 <__udivmoddi4+0x298>
 8000ce8:	3e02      	subs	r6, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a5b      	subs	r3, r3, r1
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cfc:	fb00 f707 	mul.w	r7, r0, r7
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x92>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d0c:	f080 810a 	bcs.w	8000f24 <__udivmoddi4+0x29c>
 8000d10:	42a7      	cmp	r7, r4
 8000d12:	f240 8107 	bls.w	8000f24 <__udivmoddi4+0x29c>
 8000d16:	4464      	add	r4, ip
 8000d18:	3802      	subs	r0, #2
 8000d1a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d1e:	1be4      	subs	r4, r4, r7
 8000d20:	2600      	movs	r6, #0
 8000d22:	b11d      	cbz	r5, 8000d2c <__udivmoddi4+0xa4>
 8000d24:	40d4      	lsrs	r4, r2
 8000d26:	2300      	movs	r3, #0
 8000d28:	e9c5 4300 	strd	r4, r3, [r5]
 8000d2c:	4631      	mov	r1, r6
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d909      	bls.n	8000d4a <__udivmoddi4+0xc2>
 8000d36:	2d00      	cmp	r5, #0
 8000d38:	f000 80ef 	beq.w	8000f1a <__udivmoddi4+0x292>
 8000d3c:	2600      	movs	r6, #0
 8000d3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d42:	4630      	mov	r0, r6
 8000d44:	4631      	mov	r1, r6
 8000d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4a:	fab3 f683 	clz	r6, r3
 8000d4e:	2e00      	cmp	r6, #0
 8000d50:	d14a      	bne.n	8000de8 <__udivmoddi4+0x160>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d302      	bcc.n	8000d5c <__udivmoddi4+0xd4>
 8000d56:	4282      	cmp	r2, r0
 8000d58:	f200 80f9 	bhi.w	8000f4e <__udivmoddi4+0x2c6>
 8000d5c:	1a84      	subs	r4, r0, r2
 8000d5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d62:	2001      	movs	r0, #1
 8000d64:	469e      	mov	lr, r3
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	d0e0      	beq.n	8000d2c <__udivmoddi4+0xa4>
 8000d6a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d6e:	e7dd      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000d70:	b902      	cbnz	r2, 8000d74 <__udivmoddi4+0xec>
 8000d72:	deff      	udf	#255	; 0xff
 8000d74:	fab2 f282 	clz	r2, r2
 8000d78:	2a00      	cmp	r2, #0
 8000d7a:	f040 8092 	bne.w	8000ea2 <__udivmoddi4+0x21a>
 8000d7e:	eba1 010c 	sub.w	r1, r1, ip
 8000d82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d86:	fa1f fe8c 	uxth.w	lr, ip
 8000d8a:	2601      	movs	r6, #1
 8000d8c:	0c20      	lsrs	r0, r4, #16
 8000d8e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d92:	fb07 1113 	mls	r1, r7, r3, r1
 8000d96:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9a:	fb0e f003 	mul.w	r0, lr, r3
 8000d9e:	4288      	cmp	r0, r1
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x12c>
 8000da2:	eb1c 0101 	adds.w	r1, ip, r1
 8000da6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x12a>
 8000dac:	4288      	cmp	r0, r1
 8000dae:	f200 80cb 	bhi.w	8000f48 <__udivmoddi4+0x2c0>
 8000db2:	4643      	mov	r3, r8
 8000db4:	1a09      	subs	r1, r1, r0
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dbc:	fb07 1110 	mls	r1, r7, r0, r1
 8000dc0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dc4:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d908      	bls.n	8000dde <__udivmoddi4+0x156>
 8000dcc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000dd4:	d202      	bcs.n	8000ddc <__udivmoddi4+0x154>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f200 80bb 	bhi.w	8000f52 <__udivmoddi4+0x2ca>
 8000ddc:	4608      	mov	r0, r1
 8000dde:	eba4 040e 	sub.w	r4, r4, lr
 8000de2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000de6:	e79c      	b.n	8000d22 <__udivmoddi4+0x9a>
 8000de8:	f1c6 0720 	rsb	r7, r6, #32
 8000dec:	40b3      	lsls	r3, r6
 8000dee:	fa22 fc07 	lsr.w	ip, r2, r7
 8000df2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000df6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dfa:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfe:	431c      	orrs	r4, r3
 8000e00:	40f9      	lsrs	r1, r7
 8000e02:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e06:	fa00 f306 	lsl.w	r3, r0, r6
 8000e0a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e0e:	0c20      	lsrs	r0, r4, #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fb09 1118 	mls	r1, r9, r8, r1
 8000e18:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e1c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e20:	4288      	cmp	r0, r1
 8000e22:	fa02 f206 	lsl.w	r2, r2, r6
 8000e26:	d90b      	bls.n	8000e40 <__udivmoddi4+0x1b8>
 8000e28:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e30:	f080 8088 	bcs.w	8000f44 <__udivmoddi4+0x2bc>
 8000e34:	4288      	cmp	r0, r1
 8000e36:	f240 8085 	bls.w	8000f44 <__udivmoddi4+0x2bc>
 8000e3a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1a09      	subs	r1, r1, r0
 8000e42:	b2a4      	uxth	r4, r4
 8000e44:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e48:	fb09 1110 	mls	r1, r9, r0, r1
 8000e4c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e50:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e54:	458e      	cmp	lr, r1
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x1e2>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000e60:	d26c      	bcs.n	8000f3c <__udivmoddi4+0x2b4>
 8000e62:	458e      	cmp	lr, r1
 8000e64:	d96a      	bls.n	8000f3c <__udivmoddi4+0x2b4>
 8000e66:	3802      	subs	r0, #2
 8000e68:	4461      	add	r1, ip
 8000e6a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e6e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e72:	eba1 010e 	sub.w	r1, r1, lr
 8000e76:	42a1      	cmp	r1, r4
 8000e78:	46c8      	mov	r8, r9
 8000e7a:	46a6      	mov	lr, r4
 8000e7c:	d356      	bcc.n	8000f2c <__udivmoddi4+0x2a4>
 8000e7e:	d053      	beq.n	8000f28 <__udivmoddi4+0x2a0>
 8000e80:	b15d      	cbz	r5, 8000e9a <__udivmoddi4+0x212>
 8000e82:	ebb3 0208 	subs.w	r2, r3, r8
 8000e86:	eb61 010e 	sbc.w	r1, r1, lr
 8000e8a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e8e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e92:	40f1      	lsrs	r1, r6
 8000e94:	431f      	orrs	r7, r3
 8000e96:	e9c5 7100 	strd	r7, r1, [r5]
 8000e9a:	2600      	movs	r6, #0
 8000e9c:	4631      	mov	r1, r6
 8000e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea2:	f1c2 0320 	rsb	r3, r2, #32
 8000ea6:	40d8      	lsrs	r0, r3
 8000ea8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eac:	fa21 f303 	lsr.w	r3, r1, r3
 8000eb0:	4091      	lsls	r1, r2
 8000eb2:	4301      	orrs	r1, r0
 8000eb4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb8:	fa1f fe8c 	uxth.w	lr, ip
 8000ebc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ec0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ec4:	0c0b      	lsrs	r3, r1, #16
 8000ec6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eca:	fb00 f60e 	mul.w	r6, r0, lr
 8000ece:	429e      	cmp	r6, r3
 8000ed0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x260>
 8000ed6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eda:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000ede:	d22f      	bcs.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee0:	429e      	cmp	r6, r3
 8000ee2:	d92d      	bls.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4463      	add	r3, ip
 8000ee8:	1b9b      	subs	r3, r3, r6
 8000eea:	b289      	uxth	r1, r1
 8000eec:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ef0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ef4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef8:	fb06 f30e 	mul.w	r3, r6, lr
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x28a>
 8000f00:	eb1c 0101 	adds.w	r1, ip, r1
 8000f04:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000f08:	d216      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0a:	428b      	cmp	r3, r1
 8000f0c:	d914      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0e:	3e02      	subs	r6, #2
 8000f10:	4461      	add	r1, ip
 8000f12:	1ac9      	subs	r1, r1, r3
 8000f14:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f18:	e738      	b.n	8000d8c <__udivmoddi4+0x104>
 8000f1a:	462e      	mov	r6, r5
 8000f1c:	4628      	mov	r0, r5
 8000f1e:	e705      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000f20:	4606      	mov	r6, r0
 8000f22:	e6e3      	b.n	8000cec <__udivmoddi4+0x64>
 8000f24:	4618      	mov	r0, r3
 8000f26:	e6f8      	b.n	8000d1a <__udivmoddi4+0x92>
 8000f28:	454b      	cmp	r3, r9
 8000f2a:	d2a9      	bcs.n	8000e80 <__udivmoddi4+0x1f8>
 8000f2c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f30:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f34:	3801      	subs	r0, #1
 8000f36:	e7a3      	b.n	8000e80 <__udivmoddi4+0x1f8>
 8000f38:	4646      	mov	r6, r8
 8000f3a:	e7ea      	b.n	8000f12 <__udivmoddi4+0x28a>
 8000f3c:	4620      	mov	r0, r4
 8000f3e:	e794      	b.n	8000e6a <__udivmoddi4+0x1e2>
 8000f40:	4640      	mov	r0, r8
 8000f42:	e7d1      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f44:	46d0      	mov	r8, sl
 8000f46:	e77b      	b.n	8000e40 <__udivmoddi4+0x1b8>
 8000f48:	3b02      	subs	r3, #2
 8000f4a:	4461      	add	r1, ip
 8000f4c:	e732      	b.n	8000db4 <__udivmoddi4+0x12c>
 8000f4e:	4630      	mov	r0, r6
 8000f50:	e709      	b.n	8000d66 <__udivmoddi4+0xde>
 8000f52:	4464      	add	r4, ip
 8000f54:	3802      	subs	r0, #2
 8000f56:	e742      	b.n	8000dde <__udivmoddi4+0x156>

08000f58 <__aeabi_idiv0>:
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop

08000f5c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b085      	sub	sp, #20
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	60f8      	str	r0, [r7, #12]
 8000f64:	60b9      	str	r1, [r7, #8]
 8000f66:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	4a07      	ldr	r2, [pc, #28]	; (8000f88 <vApplicationGetIdleTaskMemory+0x2c>)
 8000f6c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000f6e:	68bb      	ldr	r3, [r7, #8]
 8000f70:	4a06      	ldr	r2, [pc, #24]	; (8000f8c <vApplicationGetIdleTaskMemory+0x30>)
 8000f72:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	2280      	movs	r2, #128	; 0x80
 8000f78:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000f7a:	bf00      	nop
 8000f7c:	3714      	adds	r7, #20
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	200001fc 	.word	0x200001fc
 8000f8c:	200002b0 	.word	0x200002b0

08000f90 <read_sensor_values>:

/* USER CODE BEGIN PFP */
float temperature, humidity;
char buffer[128];

float read_sensor_values() {
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b086      	sub	sp, #24
 8000f94:	af02      	add	r7, sp, #8
    uint8_t data[6];
    uint8_t cmd = AHT25_MEASURE_CMD;
 8000f96:	23ac      	movs	r3, #172	; 0xac
 8000f98:	71fb      	strb	r3, [r7, #7]

    HAL_I2C_Master_Transmit(&hi2c1, AHT25_ADDR, &cmd, 1, HAL_MAX_DELAY);
 8000f9a:	1dfa      	adds	r2, r7, #7
 8000f9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000fa0:	9300      	str	r3, [sp, #0]
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	2170      	movs	r1, #112	; 0x70
 8000fa6:	4837      	ldr	r0, [pc, #220]	; (8001084 <read_sensor_values+0xf4>)
 8000fa8:	f001 fb14 	bl	80025d4 <HAL_I2C_Master_Transmit>
    //HAL_Delay(100);
    HAL_I2C_Master_Receive(&hi2c1, 0x71, data, 6, HAL_MAX_DELAY);
 8000fac:	f107 0208 	add.w	r2, r7, #8
 8000fb0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000fb4:	9300      	str	r3, [sp, #0]
 8000fb6:	2306      	movs	r3, #6
 8000fb8:	2171      	movs	r1, #113	; 0x71
 8000fba:	4832      	ldr	r0, [pc, #200]	; (8001084 <read_sensor_values+0xf4>)
 8000fbc:	f001 fc08 	bl	80027d0 <HAL_I2C_Master_Receive>

    humidity = ((float)((data[1] << 12) | (data[2] << 4) | (data[3] >> 4))) / 1048576.0 * 100.0;
 8000fc0:	7a7b      	ldrb	r3, [r7, #9]
 8000fc2:	031a      	lsls	r2, r3, #12
 8000fc4:	7abb      	ldrb	r3, [r7, #10]
 8000fc6:	011b      	lsls	r3, r3, #4
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	7afa      	ldrb	r2, [r7, #11]
 8000fcc:	0912      	lsrs	r2, r2, #4
 8000fce:	b2d2      	uxtb	r2, r2
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	ee07 3a90 	vmov	s15, r3
 8000fd6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fda:	ee17 0a90 	vmov	r0, s15
 8000fde:	f7ff fabb 	bl	8000558 <__aeabi_f2d>
 8000fe2:	f04f 0200 	mov.w	r2, #0
 8000fe6:	4b28      	ldr	r3, [pc, #160]	; (8001088 <read_sensor_values+0xf8>)
 8000fe8:	f7ff fc38 	bl	800085c <__aeabi_ddiv>
 8000fec:	4602      	mov	r2, r0
 8000fee:	460b      	mov	r3, r1
 8000ff0:	4610      	mov	r0, r2
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	f04f 0200 	mov.w	r2, #0
 8000ff8:	4b24      	ldr	r3, [pc, #144]	; (800108c <read_sensor_values+0xfc>)
 8000ffa:	f7ff fb05 	bl	8000608 <__aeabi_dmul>
 8000ffe:	4602      	mov	r2, r0
 8001000:	460b      	mov	r3, r1
 8001002:	4610      	mov	r0, r2
 8001004:	4619      	mov	r1, r3
 8001006:	f7ff fdd7 	bl	8000bb8 <__aeabi_d2f>
 800100a:	4603      	mov	r3, r0
 800100c:	4a20      	ldr	r2, [pc, #128]	; (8001090 <read_sensor_values+0x100>)
 800100e:	6013      	str	r3, [r2, #0]
    temperature = ((float)(((data[3] & 0x0F) << 16) | (data[4] << 8) | data[5])) / 1048576.0 * 200.0 - 50.0;
 8001010:	7afb      	ldrb	r3, [r7, #11]
 8001012:	041b      	lsls	r3, r3, #16
 8001014:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8001018:	7b3b      	ldrb	r3, [r7, #12]
 800101a:	021b      	lsls	r3, r3, #8
 800101c:	4313      	orrs	r3, r2
 800101e:	7b7a      	ldrb	r2, [r7, #13]
 8001020:	4313      	orrs	r3, r2
 8001022:	ee07 3a90 	vmov	s15, r3
 8001026:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800102a:	ee17 0a90 	vmov	r0, s15
 800102e:	f7ff fa93 	bl	8000558 <__aeabi_f2d>
 8001032:	f04f 0200 	mov.w	r2, #0
 8001036:	4b14      	ldr	r3, [pc, #80]	; (8001088 <read_sensor_values+0xf8>)
 8001038:	f7ff fc10 	bl	800085c <__aeabi_ddiv>
 800103c:	4602      	mov	r2, r0
 800103e:	460b      	mov	r3, r1
 8001040:	4610      	mov	r0, r2
 8001042:	4619      	mov	r1, r3
 8001044:	f04f 0200 	mov.w	r2, #0
 8001048:	4b12      	ldr	r3, [pc, #72]	; (8001094 <read_sensor_values+0x104>)
 800104a:	f7ff fadd 	bl	8000608 <__aeabi_dmul>
 800104e:	4602      	mov	r2, r0
 8001050:	460b      	mov	r3, r1
 8001052:	4610      	mov	r0, r2
 8001054:	4619      	mov	r1, r3
 8001056:	f04f 0200 	mov.w	r2, #0
 800105a:	4b0f      	ldr	r3, [pc, #60]	; (8001098 <read_sensor_values+0x108>)
 800105c:	f7ff f91c 	bl	8000298 <__aeabi_dsub>
 8001060:	4602      	mov	r2, r0
 8001062:	460b      	mov	r3, r1
 8001064:	4610      	mov	r0, r2
 8001066:	4619      	mov	r1, r3
 8001068:	f7ff fda6 	bl	8000bb8 <__aeabi_d2f>
 800106c:	4603      	mov	r3, r0
 800106e:	4a0b      	ldr	r2, [pc, #44]	; (800109c <read_sensor_values+0x10c>)
 8001070:	6013      	str	r3, [r2, #0]
//    HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 1000);
//    sprintf(buffer, "%.2f\r\n", temperature);  // Dereference the pointer
//    HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 1000);
//    HAL_Delay(1000);

	    return humidity;
 8001072:	4b07      	ldr	r3, [pc, #28]	; (8001090 <read_sensor_values+0x100>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	ee07 3a90 	vmov	s15, r3
	}
 800107a:	eeb0 0a67 	vmov.f32	s0, s15
 800107e:	3710      	adds	r7, #16
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	200004b0 	.word	0x200004b0
 8001088:	41300000 	.word	0x41300000
 800108c:	40590000 	.word	0x40590000
 8001090:	20000598 	.word	0x20000598
 8001094:	40690000 	.word	0x40690000
 8001098:	40490000 	.word	0x40490000
 800109c:	20000594 	.word	0x20000594

080010a0 <send_task2>:
	HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 1000);

}

void send_task2(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0

	sprintf(buffer, ".....TASK_2.....\n\r");
 80010a4:	4908      	ldr	r1, [pc, #32]	; (80010c8 <send_task2+0x28>)
 80010a6:	4809      	ldr	r0, [pc, #36]	; (80010cc <send_task2+0x2c>)
 80010a8:	f005 fd82 	bl	8006bb0 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 1000);
 80010ac:	4807      	ldr	r0, [pc, #28]	; (80010cc <send_task2+0x2c>)
 80010ae:	f7ff f897 	bl	80001e0 <strlen>
 80010b2:	4603      	mov	r3, r0
 80010b4:	b29a      	uxth	r2, r3
 80010b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010ba:	4904      	ldr	r1, [pc, #16]	; (80010cc <send_task2+0x2c>)
 80010bc:	4804      	ldr	r0, [pc, #16]	; (80010d0 <send_task2+0x30>)
 80010be:	f003 f832 	bl	8004126 <HAL_UART_Transmit>

}
 80010c2:	bf00      	nop
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	08008d98 	.word	0x08008d98
 80010cc:	2000059c 	.word	0x2000059c
 80010d0:	20000548 	.word	0x20000548

080010d4 <send_task_1>:
//		mqtt_data_send();
//		HAL_Delay(100);
//
//}
void send_task_1(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0

	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80010d8:	2120      	movs	r1, #32
 80010da:	4802      	ldr	r0, [pc, #8]	; (80010e4 <send_task_1+0x10>)
 80010dc:	f001 f91b 	bl	8002316 <HAL_GPIO_TogglePin>

}
 80010e0:	bf00      	nop
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	40020000 	.word	0x40020000

080010e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010e8:	b5b0      	push	{r4, r5, r7, lr}
 80010ea:	b08e      	sub	sp, #56	; 0x38
 80010ec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010ee:	f000 fe2d 	bl	8001d4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010f2:	f000 f841 	bl	8001178 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010f6:	f000 f91f 	bl	8001338 <MX_GPIO_Init>
  MX_I2C1_Init();
 80010fa:	f000 f89b 	bl	8001234 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80010fe:	f000 f8c7 	bl	8001290 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001102:	f000 f8ef 	bl	80012e4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  WE10_Init("Dinu","12345678");
 8001106:	4916      	ldr	r1, [pc, #88]	; (8001160 <main+0x78>)
 8001108:	4816      	ldr	r0, [pc, #88]	; (8001164 <main+0x7c>)
 800110a:	f000 f965 	bl	80013d8 <WE10_Init>
  MQTT_Init();
 800110e:	f000 fa7d 	bl	800160c <MQTT_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Task1 */
  osThreadDef(Task1, StartTask1, osPriorityAboveNormal, 0, 128);
 8001112:	4b15      	ldr	r3, [pc, #84]	; (8001168 <main+0x80>)
 8001114:	f107 041c 	add.w	r4, r7, #28
 8001118:	461d      	mov	r5, r3
 800111a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800111c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800111e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001122:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task1Handle = osThreadCreate(osThread(Task1), NULL);
 8001126:	f107 031c 	add.w	r3, r7, #28
 800112a:	2100      	movs	r1, #0
 800112c:	4618      	mov	r0, r3
 800112e:	f003 fc30 	bl	8004992 <osThreadCreate>
 8001132:	4603      	mov	r3, r0
 8001134:	4a0d      	ldr	r2, [pc, #52]	; (800116c <main+0x84>)
 8001136:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task2 */
  osThreadDef(Task2, StartTask2, osPriorityNormal, 0, 128);
 8001138:	4b0d      	ldr	r3, [pc, #52]	; (8001170 <main+0x88>)
 800113a:	463c      	mov	r4, r7
 800113c:	461d      	mov	r5, r3
 800113e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001140:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001142:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001146:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task2Handle = osThreadCreate(osThread(Task2), NULL);
 800114a:	463b      	mov	r3, r7
 800114c:	2100      	movs	r1, #0
 800114e:	4618      	mov	r0, r3
 8001150:	f003 fc1f 	bl	8004992 <osThreadCreate>
 8001154:	4603      	mov	r3, r0
 8001156:	4a07      	ldr	r2, [pc, #28]	; (8001174 <main+0x8c>)
 8001158:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800115a:	f003 fc13 	bl	8004984 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800115e:	e7fe      	b.n	800115e <main+0x76>
 8001160:	08008dc0 	.word	0x08008dc0
 8001164:	08008dcc 	.word	0x08008dcc
 8001168:	08008dd4 	.word	0x08008dd4
 800116c:	2000058c 	.word	0x2000058c
 8001170:	08008df0 	.word	0x08008df0
 8001174:	20000590 	.word	0x20000590

08001178 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b094      	sub	sp, #80	; 0x50
 800117c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800117e:	f107 0320 	add.w	r3, r7, #32
 8001182:	2230      	movs	r2, #48	; 0x30
 8001184:	2100      	movs	r1, #0
 8001186:	4618      	mov	r0, r3
 8001188:	f004 ff91 	bl	80060ae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800118c:	f107 030c 	add.w	r3, r7, #12
 8001190:	2200      	movs	r2, #0
 8001192:	601a      	str	r2, [r3, #0]
 8001194:	605a      	str	r2, [r3, #4]
 8001196:	609a      	str	r2, [r3, #8]
 8001198:	60da      	str	r2, [r3, #12]
 800119a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800119c:	2300      	movs	r3, #0
 800119e:	60bb      	str	r3, [r7, #8]
 80011a0:	4b22      	ldr	r3, [pc, #136]	; (800122c <SystemClock_Config+0xb4>)
 80011a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a4:	4a21      	ldr	r2, [pc, #132]	; (800122c <SystemClock_Config+0xb4>)
 80011a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011aa:	6413      	str	r3, [r2, #64]	; 0x40
 80011ac:	4b1f      	ldr	r3, [pc, #124]	; (800122c <SystemClock_Config+0xb4>)
 80011ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011b4:	60bb      	str	r3, [r7, #8]
 80011b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011b8:	2300      	movs	r3, #0
 80011ba:	607b      	str	r3, [r7, #4]
 80011bc:	4b1c      	ldr	r3, [pc, #112]	; (8001230 <SystemClock_Config+0xb8>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a1b      	ldr	r2, [pc, #108]	; (8001230 <SystemClock_Config+0xb8>)
 80011c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80011c6:	6013      	str	r3, [r2, #0]
 80011c8:	4b19      	ldr	r3, [pc, #100]	; (8001230 <SystemClock_Config+0xb8>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80011d0:	607b      	str	r3, [r7, #4]
 80011d2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011d4:	2302      	movs	r3, #2
 80011d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011d8:	2301      	movs	r3, #1
 80011da:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011dc:	2310      	movs	r3, #16
 80011de:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80011e0:	2300      	movs	r3, #0
 80011e2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011e4:	f107 0320 	add.w	r3, r7, #32
 80011e8:	4618      	mov	r0, r3
 80011ea:	f002 f845 	bl	8003278 <HAL_RCC_OscConfig>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80011f4:	f000 fb20 	bl	8001838 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011f8:	230f      	movs	r3, #15
 80011fa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80011fc:	2300      	movs	r3, #0
 80011fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001200:	2300      	movs	r3, #0
 8001202:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001204:	2300      	movs	r3, #0
 8001206:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001208:	2300      	movs	r3, #0
 800120a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800120c:	f107 030c 	add.w	r3, r7, #12
 8001210:	2100      	movs	r1, #0
 8001212:	4618      	mov	r0, r3
 8001214:	f002 faa8 	bl	8003768 <HAL_RCC_ClockConfig>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800121e:	f000 fb0b 	bl	8001838 <Error_Handler>
  }
}
 8001222:	bf00      	nop
 8001224:	3750      	adds	r7, #80	; 0x50
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	40023800 	.word	0x40023800
 8001230:	40007000 	.word	0x40007000

08001234 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001238:	4b12      	ldr	r3, [pc, #72]	; (8001284 <MX_I2C1_Init+0x50>)
 800123a:	4a13      	ldr	r2, [pc, #76]	; (8001288 <MX_I2C1_Init+0x54>)
 800123c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800123e:	4b11      	ldr	r3, [pc, #68]	; (8001284 <MX_I2C1_Init+0x50>)
 8001240:	4a12      	ldr	r2, [pc, #72]	; (800128c <MX_I2C1_Init+0x58>)
 8001242:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001244:	4b0f      	ldr	r3, [pc, #60]	; (8001284 <MX_I2C1_Init+0x50>)
 8001246:	2200      	movs	r2, #0
 8001248:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800124a:	4b0e      	ldr	r3, [pc, #56]	; (8001284 <MX_I2C1_Init+0x50>)
 800124c:	2200      	movs	r2, #0
 800124e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001250:	4b0c      	ldr	r3, [pc, #48]	; (8001284 <MX_I2C1_Init+0x50>)
 8001252:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001256:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001258:	4b0a      	ldr	r3, [pc, #40]	; (8001284 <MX_I2C1_Init+0x50>)
 800125a:	2200      	movs	r2, #0
 800125c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800125e:	4b09      	ldr	r3, [pc, #36]	; (8001284 <MX_I2C1_Init+0x50>)
 8001260:	2200      	movs	r2, #0
 8001262:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001264:	4b07      	ldr	r3, [pc, #28]	; (8001284 <MX_I2C1_Init+0x50>)
 8001266:	2200      	movs	r2, #0
 8001268:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800126a:	4b06      	ldr	r3, [pc, #24]	; (8001284 <MX_I2C1_Init+0x50>)
 800126c:	2200      	movs	r2, #0
 800126e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001270:	4804      	ldr	r0, [pc, #16]	; (8001284 <MX_I2C1_Init+0x50>)
 8001272:	f001 f86b 	bl	800234c <HAL_I2C_Init>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800127c:	f000 fadc 	bl	8001838 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001280:	bf00      	nop
 8001282:	bd80      	pop	{r7, pc}
 8001284:	200004b0 	.word	0x200004b0
 8001288:	40005400 	.word	0x40005400
 800128c:	000186a0 	.word	0x000186a0

08001290 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001294:	4b11      	ldr	r3, [pc, #68]	; (80012dc <MX_USART1_UART_Init+0x4c>)
 8001296:	4a12      	ldr	r2, [pc, #72]	; (80012e0 <MX_USART1_UART_Init+0x50>)
 8001298:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 800129a:	4b10      	ldr	r3, [pc, #64]	; (80012dc <MX_USART1_UART_Init+0x4c>)
 800129c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80012a0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80012a2:	4b0e      	ldr	r3, [pc, #56]	; (80012dc <MX_USART1_UART_Init+0x4c>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80012a8:	4b0c      	ldr	r3, [pc, #48]	; (80012dc <MX_USART1_UART_Init+0x4c>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80012ae:	4b0b      	ldr	r3, [pc, #44]	; (80012dc <MX_USART1_UART_Init+0x4c>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80012b4:	4b09      	ldr	r3, [pc, #36]	; (80012dc <MX_USART1_UART_Init+0x4c>)
 80012b6:	220c      	movs	r2, #12
 80012b8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012ba:	4b08      	ldr	r3, [pc, #32]	; (80012dc <MX_USART1_UART_Init+0x4c>)
 80012bc:	2200      	movs	r2, #0
 80012be:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80012c0:	4b06      	ldr	r3, [pc, #24]	; (80012dc <MX_USART1_UART_Init+0x4c>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80012c6:	4805      	ldr	r0, [pc, #20]	; (80012dc <MX_USART1_UART_Init+0x4c>)
 80012c8:	f002 fee0 	bl	800408c <HAL_UART_Init>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80012d2:	f000 fab1 	bl	8001838 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80012d6:	bf00      	nop
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	20000504 	.word	0x20000504
 80012e0:	40011000 	.word	0x40011000

080012e4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012e8:	4b11      	ldr	r3, [pc, #68]	; (8001330 <MX_USART2_UART_Init+0x4c>)
 80012ea:	4a12      	ldr	r2, [pc, #72]	; (8001334 <MX_USART2_UART_Init+0x50>)
 80012ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80012ee:	4b10      	ldr	r3, [pc, #64]	; (8001330 <MX_USART2_UART_Init+0x4c>)
 80012f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012f6:	4b0e      	ldr	r3, [pc, #56]	; (8001330 <MX_USART2_UART_Init+0x4c>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012fc:	4b0c      	ldr	r3, [pc, #48]	; (8001330 <MX_USART2_UART_Init+0x4c>)
 80012fe:	2200      	movs	r2, #0
 8001300:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001302:	4b0b      	ldr	r3, [pc, #44]	; (8001330 <MX_USART2_UART_Init+0x4c>)
 8001304:	2200      	movs	r2, #0
 8001306:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001308:	4b09      	ldr	r3, [pc, #36]	; (8001330 <MX_USART2_UART_Init+0x4c>)
 800130a:	220c      	movs	r2, #12
 800130c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800130e:	4b08      	ldr	r3, [pc, #32]	; (8001330 <MX_USART2_UART_Init+0x4c>)
 8001310:	2200      	movs	r2, #0
 8001312:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001314:	4b06      	ldr	r3, [pc, #24]	; (8001330 <MX_USART2_UART_Init+0x4c>)
 8001316:	2200      	movs	r2, #0
 8001318:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800131a:	4805      	ldr	r0, [pc, #20]	; (8001330 <MX_USART2_UART_Init+0x4c>)
 800131c:	f002 feb6 	bl	800408c <HAL_UART_Init>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001326:	f000 fa87 	bl	8001838 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800132a:	bf00      	nop
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	20000548 	.word	0x20000548
 8001334:	40004400 	.word	0x40004400

08001338 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b088      	sub	sp, #32
 800133c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800133e:	f107 030c 	add.w	r3, r7, #12
 8001342:	2200      	movs	r2, #0
 8001344:	601a      	str	r2, [r3, #0]
 8001346:	605a      	str	r2, [r3, #4]
 8001348:	609a      	str	r2, [r3, #8]
 800134a:	60da      	str	r2, [r3, #12]
 800134c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800134e:	2300      	movs	r3, #0
 8001350:	60bb      	str	r3, [r7, #8]
 8001352:	4b1f      	ldr	r3, [pc, #124]	; (80013d0 <MX_GPIO_Init+0x98>)
 8001354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001356:	4a1e      	ldr	r2, [pc, #120]	; (80013d0 <MX_GPIO_Init+0x98>)
 8001358:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800135c:	6313      	str	r3, [r2, #48]	; 0x30
 800135e:	4b1c      	ldr	r3, [pc, #112]	; (80013d0 <MX_GPIO_Init+0x98>)
 8001360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001362:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001366:	60bb      	str	r3, [r7, #8]
 8001368:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800136a:	2300      	movs	r3, #0
 800136c:	607b      	str	r3, [r7, #4]
 800136e:	4b18      	ldr	r3, [pc, #96]	; (80013d0 <MX_GPIO_Init+0x98>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001372:	4a17      	ldr	r2, [pc, #92]	; (80013d0 <MX_GPIO_Init+0x98>)
 8001374:	f043 0301 	orr.w	r3, r3, #1
 8001378:	6313      	str	r3, [r2, #48]	; 0x30
 800137a:	4b15      	ldr	r3, [pc, #84]	; (80013d0 <MX_GPIO_Init+0x98>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137e:	f003 0301 	and.w	r3, r3, #1
 8001382:	607b      	str	r3, [r7, #4]
 8001384:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001386:	2300      	movs	r3, #0
 8001388:	603b      	str	r3, [r7, #0]
 800138a:	4b11      	ldr	r3, [pc, #68]	; (80013d0 <MX_GPIO_Init+0x98>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138e:	4a10      	ldr	r2, [pc, #64]	; (80013d0 <MX_GPIO_Init+0x98>)
 8001390:	f043 0302 	orr.w	r3, r3, #2
 8001394:	6313      	str	r3, [r2, #48]	; 0x30
 8001396:	4b0e      	ldr	r3, [pc, #56]	; (80013d0 <MX_GPIO_Init+0x98>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139a:	f003 0302 	and.w	r3, r3, #2
 800139e:	603b      	str	r3, [r7, #0]
 80013a0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80013a2:	2200      	movs	r2, #0
 80013a4:	2120      	movs	r1, #32
 80013a6:	480b      	ldr	r0, [pc, #44]	; (80013d4 <MX_GPIO_Init+0x9c>)
 80013a8:	f000 ff9c 	bl	80022e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80013ac:	2320      	movs	r3, #32
 80013ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013b0:	2301      	movs	r3, #1
 80013b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b4:	2300      	movs	r3, #0
 80013b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b8:	2300      	movs	r3, #0
 80013ba:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013bc:	f107 030c 	add.w	r3, r7, #12
 80013c0:	4619      	mov	r1, r3
 80013c2:	4804      	ldr	r0, [pc, #16]	; (80013d4 <MX_GPIO_Init+0x9c>)
 80013c4:	f000 fe0a 	bl	8001fdc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80013c8:	bf00      	nop
 80013ca:	3720      	adds	r7, #32
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	40023800 	.word	0x40023800
 80013d4:	40020000 	.word	0x40020000

080013d8 <WE10_Init>:
void WE10_Init (char *SSID, char *PASSWD)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b0a2      	sub	sp, #136	; 0x88
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
 80013e0:	6039      	str	r1, [r7, #0]
	char buffer[128];
	/********* CMD+RESET **********/
	//memset(&buffer[0],0x00,strlen(buffer));
	sprintf (&buffer[0], "CMD+RESET\r\n");
 80013e2:	f107 0308 	add.w	r3, r7, #8
 80013e6:	4983      	ldr	r1, [pc, #524]	; (80015f4 <WE10_Init+0x21c>)
 80013e8:	4618      	mov	r0, r3
 80013ea:	f005 fbe1 	bl	8006bb0 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 1000);
 80013ee:	f107 0308 	add.w	r3, r7, #8
 80013f2:	4618      	mov	r0, r3
 80013f4:	f7fe fef4 	bl	80001e0 <strlen>
 80013f8:	4603      	mov	r3, r0
 80013fa:	b29a      	uxth	r2, r3
 80013fc:	f107 0108 	add.w	r1, r7, #8
 8001400:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001404:	487c      	ldr	r0, [pc, #496]	; (80015f8 <WE10_Init+0x220>)
 8001406:	f002 fe8e 	bl	8004126 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 1000);
 800140a:	f107 0308 	add.w	r3, r7, #8
 800140e:	4618      	mov	r0, r3
 8001410:	f7fe fee6 	bl	80001e0 <strlen>
 8001414:	4603      	mov	r3, r0
 8001416:	b29a      	uxth	r2, r3
 8001418:	f107 0108 	add.w	r1, r7, #8
 800141c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001420:	4876      	ldr	r0, [pc, #472]	; (80015fc <WE10_Init+0x224>)
 8001422:	f002 fe80 	bl	8004126 <HAL_UART_Transmit>

	HAL_UART_Receive(&huart1, (uint8_t*)buffer, strlen(buffer), 1000);
 8001426:	f107 0308 	add.w	r3, r7, #8
 800142a:	4618      	mov	r0, r3
 800142c:	f7fe fed8 	bl	80001e0 <strlen>
 8001430:	4603      	mov	r3, r0
 8001432:	b29a      	uxth	r2, r3
 8001434:	f107 0108 	add.w	r1, r7, #8
 8001438:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800143c:	486e      	ldr	r0, [pc, #440]	; (80015f8 <WE10_Init+0x220>)
 800143e:	f002 ff04 	bl	800424a <HAL_UART_Receive>
	HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 1000);
 8001442:	f107 0308 	add.w	r3, r7, #8
 8001446:	4618      	mov	r0, r3
 8001448:	f7fe feca 	bl	80001e0 <strlen>
 800144c:	4603      	mov	r3, r0
 800144e:	b29a      	uxth	r2, r3
 8001450:	f107 0108 	add.w	r1, r7, #8
 8001454:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001458:	4868      	ldr	r0, [pc, #416]	; (80015fc <WE10_Init+0x224>)
 800145a:	f002 fe64 	bl	8004126 <HAL_UART_Transmit>


	/*********  CMD+WIFIMODE=1  **********/
	//memset(&buffer[0],0x00,strlen(buffer));
	sprintf (&buffer[0], "CMD+WIFIMODE=1\r\n");
 800145e:	f107 0308 	add.w	r3, r7, #8
 8001462:	4967      	ldr	r1, [pc, #412]	; (8001600 <WE10_Init+0x228>)
 8001464:	4618      	mov	r0, r3
 8001466:	f005 fba3 	bl	8006bb0 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 1000);
 800146a:	f107 0308 	add.w	r3, r7, #8
 800146e:	4618      	mov	r0, r3
 8001470:	f7fe feb6 	bl	80001e0 <strlen>
 8001474:	4603      	mov	r3, r0
 8001476:	b29a      	uxth	r2, r3
 8001478:	f107 0108 	add.w	r1, r7, #8
 800147c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001480:	485d      	ldr	r0, [pc, #372]	; (80015f8 <WE10_Init+0x220>)
 8001482:	f002 fe50 	bl	8004126 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 1000);
 8001486:	f107 0308 	add.w	r3, r7, #8
 800148a:	4618      	mov	r0, r3
 800148c:	f7fe fea8 	bl	80001e0 <strlen>
 8001490:	4603      	mov	r3, r0
 8001492:	b29a      	uxth	r2, r3
 8001494:	f107 0108 	add.w	r1, r7, #8
 8001498:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800149c:	4857      	ldr	r0, [pc, #348]	; (80015fc <WE10_Init+0x224>)
 800149e:	f002 fe42 	bl	8004126 <HAL_UART_Transmit>

	HAL_UART_Receive(&huart1, (uint8_t*)buffer, strlen(buffer), 1000);
 80014a2:	f107 0308 	add.w	r3, r7, #8
 80014a6:	4618      	mov	r0, r3
 80014a8:	f7fe fe9a 	bl	80001e0 <strlen>
 80014ac:	4603      	mov	r3, r0
 80014ae:	b29a      	uxth	r2, r3
 80014b0:	f107 0108 	add.w	r1, r7, #8
 80014b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014b8:	484f      	ldr	r0, [pc, #316]	; (80015f8 <WE10_Init+0x220>)
 80014ba:	f002 fec6 	bl	800424a <HAL_UART_Receive>
	HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 1000);
 80014be:	f107 0308 	add.w	r3, r7, #8
 80014c2:	4618      	mov	r0, r3
 80014c4:	f7fe fe8c 	bl	80001e0 <strlen>
 80014c8:	4603      	mov	r3, r0
 80014ca:	b29a      	uxth	r2, r3
 80014cc:	f107 0108 	add.w	r1, r7, #8
 80014d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014d4:	4849      	ldr	r0, [pc, #292]	; (80015fc <WE10_Init+0x224>)
 80014d6:	f002 fe26 	bl	8004126 <HAL_UART_Transmit>


	/********* CMD+CONTOAP=SSID,PASSWD **********/
	//memset(&buffer[0],0x00,strlen(buffer));
	sprintf(&buffer[0], "CMD+CONTOAP=%s,%s\r\n", SSID, PASSWD);
 80014da:	f107 0008 	add.w	r0, r7, #8
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	687a      	ldr	r2, [r7, #4]
 80014e2:	4948      	ldr	r1, [pc, #288]	; (8001604 <WE10_Init+0x22c>)
 80014e4:	f005 fb64 	bl	8006bb0 <siprintf>

	HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 10000);
 80014e8:	f107 0308 	add.w	r3, r7, #8
 80014ec:	4618      	mov	r0, r3
 80014ee:	f7fe fe77 	bl	80001e0 <strlen>
 80014f2:	4603      	mov	r3, r0
 80014f4:	b29a      	uxth	r2, r3
 80014f6:	f107 0108 	add.w	r1, r7, #8
 80014fa:	f242 7310 	movw	r3, #10000	; 0x2710
 80014fe:	483e      	ldr	r0, [pc, #248]	; (80015f8 <WE10_Init+0x220>)
 8001500:	f002 fe11 	bl	8004126 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 10000);
 8001504:	f107 0308 	add.w	r3, r7, #8
 8001508:	4618      	mov	r0, r3
 800150a:	f7fe fe69 	bl	80001e0 <strlen>
 800150e:	4603      	mov	r3, r0
 8001510:	b29a      	uxth	r2, r3
 8001512:	f107 0108 	add.w	r1, r7, #8
 8001516:	f242 7310 	movw	r3, #10000	; 0x2710
 800151a:	4838      	ldr	r0, [pc, #224]	; (80015fc <WE10_Init+0x224>)
 800151c:	f002 fe03 	bl	8004126 <HAL_UART_Transmit>
	//memset(&buffer[0],0x00,strlen(buffer));
	HAL_Delay(2000);
 8001520:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001524:	f000 fc54 	bl	8001dd0 <HAL_Delay>
	HAL_UART_Receive(&huart1, (uint8_t*)buffer, strlen(buffer), 10000);
 8001528:	f107 0308 	add.w	r3, r7, #8
 800152c:	4618      	mov	r0, r3
 800152e:	f7fe fe57 	bl	80001e0 <strlen>
 8001532:	4603      	mov	r3, r0
 8001534:	b29a      	uxth	r2, r3
 8001536:	f107 0108 	add.w	r1, r7, #8
 800153a:	f242 7310 	movw	r3, #10000	; 0x2710
 800153e:	482e      	ldr	r0, [pc, #184]	; (80015f8 <WE10_Init+0x220>)
 8001540:	f002 fe83 	bl	800424a <HAL_UART_Receive>
	HAL_Delay(500);
 8001544:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001548:	f000 fc42 	bl	8001dd0 <HAL_Delay>
	HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 10000);
 800154c:	f107 0308 	add.w	r3, r7, #8
 8001550:	4618      	mov	r0, r3
 8001552:	f7fe fe45 	bl	80001e0 <strlen>
 8001556:	4603      	mov	r3, r0
 8001558:	b29a      	uxth	r2, r3
 800155a:	f107 0108 	add.w	r1, r7, #8
 800155e:	f242 7310 	movw	r3, #10000	; 0x2710
 8001562:	4826      	ldr	r0, [pc, #152]	; (80015fc <WE10_Init+0x224>)
 8001564:	f002 fddf 	bl	8004126 <HAL_UART_Transmit>

	/********* CMD?WIFI**********/
	//memset(&buffer[0],0x00,strlen(buffer));
	sprintf (&buffer[0], "CMD?WIFI\r\n");
 8001568:	f107 0308 	add.w	r3, r7, #8
 800156c:	4926      	ldr	r1, [pc, #152]	; (8001608 <WE10_Init+0x230>)
 800156e:	4618      	mov	r0, r3
 8001570:	f005 fb1e 	bl	8006bb0 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 10000);
 8001574:	f107 0308 	add.w	r3, r7, #8
 8001578:	4618      	mov	r0, r3
 800157a:	f7fe fe31 	bl	80001e0 <strlen>
 800157e:	4603      	mov	r3, r0
 8001580:	b29a      	uxth	r2, r3
 8001582:	f107 0108 	add.w	r1, r7, #8
 8001586:	f242 7310 	movw	r3, #10000	; 0x2710
 800158a:	481b      	ldr	r0, [pc, #108]	; (80015f8 <WE10_Init+0x220>)
 800158c:	f002 fdcb 	bl	8004126 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 10000);
 8001590:	f107 0308 	add.w	r3, r7, #8
 8001594:	4618      	mov	r0, r3
 8001596:	f7fe fe23 	bl	80001e0 <strlen>
 800159a:	4603      	mov	r3, r0
 800159c:	b29a      	uxth	r2, r3
 800159e:	f107 0108 	add.w	r1, r7, #8
 80015a2:	f242 7310 	movw	r3, #10000	; 0x2710
 80015a6:	4815      	ldr	r0, [pc, #84]	; (80015fc <WE10_Init+0x224>)
 80015a8:	f002 fdbd 	bl	8004126 <HAL_UART_Transmit>
//	memset(&buffer[0],0x00,strlen(buffer));
//	HAL_Delay(500);
	HAL_UART_Receive(&huart1, (uint8_t*)buffer, strlen(buffer), 10000);
 80015ac:	f107 0308 	add.w	r3, r7, #8
 80015b0:	4618      	mov	r0, r3
 80015b2:	f7fe fe15 	bl	80001e0 <strlen>
 80015b6:	4603      	mov	r3, r0
 80015b8:	b29a      	uxth	r2, r3
 80015ba:	f107 0108 	add.w	r1, r7, #8
 80015be:	f242 7310 	movw	r3, #10000	; 0x2710
 80015c2:	480d      	ldr	r0, [pc, #52]	; (80015f8 <WE10_Init+0x220>)
 80015c4:	f002 fe41 	bl	800424a <HAL_UART_Receive>
	HAL_Delay(500);
 80015c8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80015cc:	f000 fc00 	bl	8001dd0 <HAL_Delay>
	HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 10000);
 80015d0:	f107 0308 	add.w	r3, r7, #8
 80015d4:	4618      	mov	r0, r3
 80015d6:	f7fe fe03 	bl	80001e0 <strlen>
 80015da:	4603      	mov	r3, r0
 80015dc:	b29a      	uxth	r2, r3
 80015de:	f107 0108 	add.w	r1, r7, #8
 80015e2:	f242 7310 	movw	r3, #10000	; 0x2710
 80015e6:	4805      	ldr	r0, [pc, #20]	; (80015fc <WE10_Init+0x224>)
 80015e8:	f002 fd9d 	bl	8004126 <HAL_UART_Transmit>


}
 80015ec:	bf00      	nop
 80015ee:	3788      	adds	r7, #136	; 0x88
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	08008e0c 	.word	0x08008e0c
 80015f8:	20000504 	.word	0x20000504
 80015fc:	20000548 	.word	0x20000548
 8001600:	08008e18 	.word	0x08008e18
 8001604:	08008e2c 	.word	0x08008e2c
 8001608:	08008e40 	.word	0x08008e40

0800160c <MQTT_Init>:

void MQTT_Init()
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b0a0      	sub	sp, #128	; 0x80
 8001610:	af00      	add	r7, sp, #0

	char buffer[128];

	/*********CMD+MQTTNETCFG **********/
	//memset(&buffer[0],0x00,strlen(buffer));
	sprintf (&buffer[0], "CMD+MQTTNETCFG=dev.rightech.io,1883\r\n");
 8001612:	463b      	mov	r3, r7
 8001614:	496d      	ldr	r1, [pc, #436]	; (80017cc <MQTT_Init+0x1c0>)
 8001616:	4618      	mov	r0, r3
 8001618:	f005 faca 	bl	8006bb0 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 10000);
 800161c:	463b      	mov	r3, r7
 800161e:	4618      	mov	r0, r3
 8001620:	f7fe fdde 	bl	80001e0 <strlen>
 8001624:	4603      	mov	r3, r0
 8001626:	b29a      	uxth	r2, r3
 8001628:	4639      	mov	r1, r7
 800162a:	f242 7310 	movw	r3, #10000	; 0x2710
 800162e:	4868      	ldr	r0, [pc, #416]	; (80017d0 <MQTT_Init+0x1c4>)
 8001630:	f002 fd79 	bl	8004126 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 10000);
 8001634:	463b      	mov	r3, r7
 8001636:	4618      	mov	r0, r3
 8001638:	f7fe fdd2 	bl	80001e0 <strlen>
 800163c:	4603      	mov	r3, r0
 800163e:	b29a      	uxth	r2, r3
 8001640:	4639      	mov	r1, r7
 8001642:	f242 7310 	movw	r3, #10000	; 0x2710
 8001646:	4863      	ldr	r0, [pc, #396]	; (80017d4 <MQTT_Init+0x1c8>)
 8001648:	f002 fd6d 	bl	8004126 <HAL_UART_Transmit>
	//memset(&buffer[0],0x00,strlen(buffer));
	//HAL_Delay(500);
	HAL_UART_Receive(&huart1, (uint8_t*)buffer, strlen(buffer), 10000);
 800164c:	463b      	mov	r3, r7
 800164e:	4618      	mov	r0, r3
 8001650:	f7fe fdc6 	bl	80001e0 <strlen>
 8001654:	4603      	mov	r3, r0
 8001656:	b29a      	uxth	r2, r3
 8001658:	4639      	mov	r1, r7
 800165a:	f242 7310 	movw	r3, #10000	; 0x2710
 800165e:	485c      	ldr	r0, [pc, #368]	; (80017d0 <MQTT_Init+0x1c4>)
 8001660:	f002 fdf3 	bl	800424a <HAL_UART_Receive>
	//HAL_Delay(500);
	HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 10000);
 8001664:	463b      	mov	r3, r7
 8001666:	4618      	mov	r0, r3
 8001668:	f7fe fdba 	bl	80001e0 <strlen>
 800166c:	4603      	mov	r3, r0
 800166e:	b29a      	uxth	r2, r3
 8001670:	4639      	mov	r1, r7
 8001672:	f242 7310 	movw	r3, #10000	; 0x2710
 8001676:	4857      	ldr	r0, [pc, #348]	; (80017d4 <MQTT_Init+0x1c8>)
 8001678:	f002 fd55 	bl	8004126 <HAL_UART_Transmit>


	/*********CMD+MQTTCONCFG **********/
	//memset(&buffer[0],0x00,strlen(buffer));
	sprintf (&buffer[0], "CMD+MQTTCONCFG=3,mqtt-velikapatidinesh2000-uyz9a3,,,,,,,,,\r\n");
 800167c:	463b      	mov	r3, r7
 800167e:	4956      	ldr	r1, [pc, #344]	; (80017d8 <MQTT_Init+0x1cc>)
 8001680:	4618      	mov	r0, r3
 8001682:	f005 fa95 	bl	8006bb0 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 1000);
 8001686:	463b      	mov	r3, r7
 8001688:	4618      	mov	r0, r3
 800168a:	f7fe fda9 	bl	80001e0 <strlen>
 800168e:	4603      	mov	r3, r0
 8001690:	b29a      	uxth	r2, r3
 8001692:	4639      	mov	r1, r7
 8001694:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001698:	484d      	ldr	r0, [pc, #308]	; (80017d0 <MQTT_Init+0x1c4>)
 800169a:	f002 fd44 	bl	8004126 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 1000);
 800169e:	463b      	mov	r3, r7
 80016a0:	4618      	mov	r0, r3
 80016a2:	f7fe fd9d 	bl	80001e0 <strlen>
 80016a6:	4603      	mov	r3, r0
 80016a8:	b29a      	uxth	r2, r3
 80016aa:	4639      	mov	r1, r7
 80016ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016b0:	4848      	ldr	r0, [pc, #288]	; (80017d4 <MQTT_Init+0x1c8>)
 80016b2:	f002 fd38 	bl	8004126 <HAL_UART_Transmit>
	//memset(&buffer[0],0x00,strlen(buffer));
	//HAL_Delay(500);
	HAL_UART_Receive(&huart1, (uint8_t*)buffer, strlen(buffer), 1000);
 80016b6:	463b      	mov	r3, r7
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7fe fd91 	bl	80001e0 <strlen>
 80016be:	4603      	mov	r3, r0
 80016c0:	b29a      	uxth	r2, r3
 80016c2:	4639      	mov	r1, r7
 80016c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016c8:	4841      	ldr	r0, [pc, #260]	; (80017d0 <MQTT_Init+0x1c4>)
 80016ca:	f002 fdbe 	bl	800424a <HAL_UART_Receive>
	HAL_Delay(500);
 80016ce:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80016d2:	f000 fb7d 	bl	8001dd0 <HAL_Delay>
	HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 1000);
 80016d6:	463b      	mov	r3, r7
 80016d8:	4618      	mov	r0, r3
 80016da:	f7fe fd81 	bl	80001e0 <strlen>
 80016de:	4603      	mov	r3, r0
 80016e0:	b29a      	uxth	r2, r3
 80016e2:	4639      	mov	r1, r7
 80016e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016e8:	483a      	ldr	r0, [pc, #232]	; (80017d4 <MQTT_Init+0x1c8>)
 80016ea:	f002 fd1c 	bl	8004126 <HAL_UART_Transmit>


	/*********CMD+MQTTSTART **********/
	//memset(&buffer[0],0x00,strlen(buffer));
	sprintf (&buffer[0], "CMD+MQTTSTART=1\r\n");
 80016ee:	463b      	mov	r3, r7
 80016f0:	493a      	ldr	r1, [pc, #232]	; (80017dc <MQTT_Init+0x1d0>)
 80016f2:	4618      	mov	r0, r3
 80016f4:	f005 fa5c 	bl	8006bb0 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 1000);
 80016f8:	463b      	mov	r3, r7
 80016fa:	4618      	mov	r0, r3
 80016fc:	f7fe fd70 	bl	80001e0 <strlen>
 8001700:	4603      	mov	r3, r0
 8001702:	b29a      	uxth	r2, r3
 8001704:	4639      	mov	r1, r7
 8001706:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800170a:	4831      	ldr	r0, [pc, #196]	; (80017d0 <MQTT_Init+0x1c4>)
 800170c:	f002 fd0b 	bl	8004126 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 1000);
 8001710:	463b      	mov	r3, r7
 8001712:	4618      	mov	r0, r3
 8001714:	f7fe fd64 	bl	80001e0 <strlen>
 8001718:	4603      	mov	r3, r0
 800171a:	b29a      	uxth	r2, r3
 800171c:	4639      	mov	r1, r7
 800171e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001722:	482c      	ldr	r0, [pc, #176]	; (80017d4 <MQTT_Init+0x1c8>)
 8001724:	f002 fcff 	bl	8004126 <HAL_UART_Transmit>
//	memset(&buffer[0],0x00,strlen(buffer));
	//HAL_Delay(5000);
	HAL_UART_Receive(&huart1, (uint8_t*)buffer, strlen(buffer), 1000);
 8001728:	463b      	mov	r3, r7
 800172a:	4618      	mov	r0, r3
 800172c:	f7fe fd58 	bl	80001e0 <strlen>
 8001730:	4603      	mov	r3, r0
 8001732:	b29a      	uxth	r2, r3
 8001734:	4639      	mov	r1, r7
 8001736:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800173a:	4825      	ldr	r0, [pc, #148]	; (80017d0 <MQTT_Init+0x1c4>)
 800173c:	f002 fd85 	bl	800424a <HAL_UART_Receive>
	//HAL_Delay(500);
	HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 1000);
 8001740:	463b      	mov	r3, r7
 8001742:	4618      	mov	r0, r3
 8001744:	f7fe fd4c 	bl	80001e0 <strlen>
 8001748:	4603      	mov	r3, r0
 800174a:	b29a      	uxth	r2, r3
 800174c:	4639      	mov	r1, r7
 800174e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001752:	4820      	ldr	r0, [pc, #128]	; (80017d4 <MQTT_Init+0x1c8>)
 8001754:	f002 fce7 	bl	8004126 <HAL_UART_Transmit>

	/*********CMD+MQTTSUB *********/
	//memset(&buffer[0],0x00,strlen(buffer));
	sprintf (&buffer[0], "CMD+MQTTSUB=base/relay/led1\r\n");
 8001758:	463b      	mov	r3, r7
 800175a:	4921      	ldr	r1, [pc, #132]	; (80017e0 <MQTT_Init+0x1d4>)
 800175c:	4618      	mov	r0, r3
 800175e:	f005 fa27 	bl	8006bb0 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 1000);
 8001762:	463b      	mov	r3, r7
 8001764:	4618      	mov	r0, r3
 8001766:	f7fe fd3b 	bl	80001e0 <strlen>
 800176a:	4603      	mov	r3, r0
 800176c:	b29a      	uxth	r2, r3
 800176e:	4639      	mov	r1, r7
 8001770:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001774:	4816      	ldr	r0, [pc, #88]	; (80017d0 <MQTT_Init+0x1c4>)
 8001776:	f002 fcd6 	bl	8004126 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 1000);
 800177a:	463b      	mov	r3, r7
 800177c:	4618      	mov	r0, r3
 800177e:	f7fe fd2f 	bl	80001e0 <strlen>
 8001782:	4603      	mov	r3, r0
 8001784:	b29a      	uxth	r2, r3
 8001786:	4639      	mov	r1, r7
 8001788:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800178c:	4811      	ldr	r0, [pc, #68]	; (80017d4 <MQTT_Init+0x1c8>)
 800178e:	f002 fcca 	bl	8004126 <HAL_UART_Transmit>
	//HAL_Delay(500);
	HAL_UART_Receive(&huart1, (uint8_t*)buffer, strlen(buffer), 1000);
 8001792:	463b      	mov	r3, r7
 8001794:	4618      	mov	r0, r3
 8001796:	f7fe fd23 	bl	80001e0 <strlen>
 800179a:	4603      	mov	r3, r0
 800179c:	b29a      	uxth	r2, r3
 800179e:	4639      	mov	r1, r7
 80017a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017a4:	480a      	ldr	r0, [pc, #40]	; (80017d0 <MQTT_Init+0x1c4>)
 80017a6:	f002 fd50 	bl	800424a <HAL_UART_Receive>
	HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 1000);
 80017aa:	463b      	mov	r3, r7
 80017ac:	4618      	mov	r0, r3
 80017ae:	f7fe fd17 	bl	80001e0 <strlen>
 80017b2:	4603      	mov	r3, r0
 80017b4:	b29a      	uxth	r2, r3
 80017b6:	4639      	mov	r1, r7
 80017b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017bc:	4805      	ldr	r0, [pc, #20]	; (80017d4 <MQTT_Init+0x1c8>)
 80017be:	f002 fcb2 	bl	8004126 <HAL_UART_Transmit>

}
 80017c2:	bf00      	nop
 80017c4:	3780      	adds	r7, #128	; 0x80
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	08008e4c 	.word	0x08008e4c
 80017d0:	20000504 	.word	0x20000504
 80017d4:	20000548 	.word	0x20000548
 80017d8:	08008e74 	.word	0x08008e74
 80017dc:	08008eb4 	.word	0x08008eb4
 80017e0:	08008ec8 	.word	0x08008ec8

080017e4 <StartTask1>:
////	}
///* USER CODE END Header_StartTask1 */


void StartTask1(void const * argument)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	    //send_task_1();
	  send_task_1();
 80017ec:	f7ff fc72 	bl	80010d4 <send_task_1>
	    osDelay(1000);
 80017f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80017f4:	f003 f919 	bl	8004a2a <osDelay>
	  send_task_1();
 80017f8:	e7f8      	b.n	80017ec <StartTask1+0x8>

080017fa <StartTask2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask2 */
void StartTask2(void const * argument)
{
 80017fa:	b580      	push	{r7, lr}
 80017fc:	b082      	sub	sp, #8
 80017fe:	af00      	add	r7, sp, #0
 8001800:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask2 */
  /* Infinite loop */
  for(;;)
  {
	  send_task2();
 8001802:	f7ff fc4d 	bl	80010a0 <send_task2>
	  read_sensor_values();
 8001806:	f7ff fbc3 	bl	8000f90 <read_sensor_values>
	  osDelay(1000);
 800180a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800180e:	f003 f90c 	bl	8004a2a <osDelay>
	  send_task2();
 8001812:	e7f6      	b.n	8001802 <StartTask2+0x8>

08001814 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a04      	ldr	r2, [pc, #16]	; (8001834 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d101      	bne.n	800182a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001826:	f000 fab3 	bl	8001d90 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800182a:	bf00      	nop
 800182c:	3708      	adds	r7, #8
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	40010000 	.word	0x40010000

08001838 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800183c:	b672      	cpsid	i
}
 800183e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001840:	e7fe      	b.n	8001840 <Error_Handler+0x8>
	...

08001844 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800184a:	2300      	movs	r3, #0
 800184c:	607b      	str	r3, [r7, #4]
 800184e:	4b12      	ldr	r3, [pc, #72]	; (8001898 <HAL_MspInit+0x54>)
 8001850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001852:	4a11      	ldr	r2, [pc, #68]	; (8001898 <HAL_MspInit+0x54>)
 8001854:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001858:	6453      	str	r3, [r2, #68]	; 0x44
 800185a:	4b0f      	ldr	r3, [pc, #60]	; (8001898 <HAL_MspInit+0x54>)
 800185c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800185e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001862:	607b      	str	r3, [r7, #4]
 8001864:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001866:	2300      	movs	r3, #0
 8001868:	603b      	str	r3, [r7, #0]
 800186a:	4b0b      	ldr	r3, [pc, #44]	; (8001898 <HAL_MspInit+0x54>)
 800186c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186e:	4a0a      	ldr	r2, [pc, #40]	; (8001898 <HAL_MspInit+0x54>)
 8001870:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001874:	6413      	str	r3, [r2, #64]	; 0x40
 8001876:	4b08      	ldr	r3, [pc, #32]	; (8001898 <HAL_MspInit+0x54>)
 8001878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800187e:	603b      	str	r3, [r7, #0]
 8001880:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001882:	2200      	movs	r2, #0
 8001884:	210f      	movs	r1, #15
 8001886:	f06f 0001 	mvn.w	r0, #1
 800188a:	f000 fb7d 	bl	8001f88 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800188e:	bf00      	nop
 8001890:	3708      	adds	r7, #8
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	40023800 	.word	0x40023800

0800189c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b08a      	sub	sp, #40	; 0x28
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a4:	f107 0314 	add.w	r3, r7, #20
 80018a8:	2200      	movs	r2, #0
 80018aa:	601a      	str	r2, [r3, #0]
 80018ac:	605a      	str	r2, [r3, #4]
 80018ae:	609a      	str	r2, [r3, #8]
 80018b0:	60da      	str	r2, [r3, #12]
 80018b2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a19      	ldr	r2, [pc, #100]	; (8001920 <HAL_I2C_MspInit+0x84>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d12c      	bne.n	8001918 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018be:	2300      	movs	r3, #0
 80018c0:	613b      	str	r3, [r7, #16]
 80018c2:	4b18      	ldr	r3, [pc, #96]	; (8001924 <HAL_I2C_MspInit+0x88>)
 80018c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c6:	4a17      	ldr	r2, [pc, #92]	; (8001924 <HAL_I2C_MspInit+0x88>)
 80018c8:	f043 0302 	orr.w	r3, r3, #2
 80018cc:	6313      	str	r3, [r2, #48]	; 0x30
 80018ce:	4b15      	ldr	r3, [pc, #84]	; (8001924 <HAL_I2C_MspInit+0x88>)
 80018d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d2:	f003 0302 	and.w	r3, r3, #2
 80018d6:	613b      	str	r3, [r7, #16]
 80018d8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80018da:	f44f 7340 	mov.w	r3, #768	; 0x300
 80018de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018e0:	2312      	movs	r3, #18
 80018e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018e4:	2301      	movs	r3, #1
 80018e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018e8:	2303      	movs	r3, #3
 80018ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80018ec:	2304      	movs	r3, #4
 80018ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018f0:	f107 0314 	add.w	r3, r7, #20
 80018f4:	4619      	mov	r1, r3
 80018f6:	480c      	ldr	r0, [pc, #48]	; (8001928 <HAL_I2C_MspInit+0x8c>)
 80018f8:	f000 fb70 	bl	8001fdc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80018fc:	2300      	movs	r3, #0
 80018fe:	60fb      	str	r3, [r7, #12]
 8001900:	4b08      	ldr	r3, [pc, #32]	; (8001924 <HAL_I2C_MspInit+0x88>)
 8001902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001904:	4a07      	ldr	r2, [pc, #28]	; (8001924 <HAL_I2C_MspInit+0x88>)
 8001906:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800190a:	6413      	str	r3, [r2, #64]	; 0x40
 800190c:	4b05      	ldr	r3, [pc, #20]	; (8001924 <HAL_I2C_MspInit+0x88>)
 800190e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001910:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001914:	60fb      	str	r3, [r7, #12]
 8001916:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001918:	bf00      	nop
 800191a:	3728      	adds	r7, #40	; 0x28
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	40005400 	.word	0x40005400
 8001924:	40023800 	.word	0x40023800
 8001928:	40020400 	.word	0x40020400

0800192c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b08c      	sub	sp, #48	; 0x30
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001934:	f107 031c 	add.w	r3, r7, #28
 8001938:	2200      	movs	r2, #0
 800193a:	601a      	str	r2, [r3, #0]
 800193c:	605a      	str	r2, [r3, #4]
 800193e:	609a      	str	r2, [r3, #8]
 8001940:	60da      	str	r2, [r3, #12]
 8001942:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a32      	ldr	r2, [pc, #200]	; (8001a14 <HAL_UART_MspInit+0xe8>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d12d      	bne.n	80019aa <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800194e:	2300      	movs	r3, #0
 8001950:	61bb      	str	r3, [r7, #24]
 8001952:	4b31      	ldr	r3, [pc, #196]	; (8001a18 <HAL_UART_MspInit+0xec>)
 8001954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001956:	4a30      	ldr	r2, [pc, #192]	; (8001a18 <HAL_UART_MspInit+0xec>)
 8001958:	f043 0310 	orr.w	r3, r3, #16
 800195c:	6453      	str	r3, [r2, #68]	; 0x44
 800195e:	4b2e      	ldr	r3, [pc, #184]	; (8001a18 <HAL_UART_MspInit+0xec>)
 8001960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001962:	f003 0310 	and.w	r3, r3, #16
 8001966:	61bb      	str	r3, [r7, #24]
 8001968:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800196a:	2300      	movs	r3, #0
 800196c:	617b      	str	r3, [r7, #20]
 800196e:	4b2a      	ldr	r3, [pc, #168]	; (8001a18 <HAL_UART_MspInit+0xec>)
 8001970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001972:	4a29      	ldr	r2, [pc, #164]	; (8001a18 <HAL_UART_MspInit+0xec>)
 8001974:	f043 0301 	orr.w	r3, r3, #1
 8001978:	6313      	str	r3, [r2, #48]	; 0x30
 800197a:	4b27      	ldr	r3, [pc, #156]	; (8001a18 <HAL_UART_MspInit+0xec>)
 800197c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197e:	f003 0301 	and.w	r3, r3, #1
 8001982:	617b      	str	r3, [r7, #20]
 8001984:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001986:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800198a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800198c:	2302      	movs	r3, #2
 800198e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001990:	2300      	movs	r3, #0
 8001992:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001994:	2303      	movs	r3, #3
 8001996:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001998:	2307      	movs	r3, #7
 800199a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800199c:	f107 031c 	add.w	r3, r7, #28
 80019a0:	4619      	mov	r1, r3
 80019a2:	481e      	ldr	r0, [pc, #120]	; (8001a1c <HAL_UART_MspInit+0xf0>)
 80019a4:	f000 fb1a 	bl	8001fdc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80019a8:	e030      	b.n	8001a0c <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a1c      	ldr	r2, [pc, #112]	; (8001a20 <HAL_UART_MspInit+0xf4>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d12b      	bne.n	8001a0c <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80019b4:	2300      	movs	r3, #0
 80019b6:	613b      	str	r3, [r7, #16]
 80019b8:	4b17      	ldr	r3, [pc, #92]	; (8001a18 <HAL_UART_MspInit+0xec>)
 80019ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019bc:	4a16      	ldr	r2, [pc, #88]	; (8001a18 <HAL_UART_MspInit+0xec>)
 80019be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019c2:	6413      	str	r3, [r2, #64]	; 0x40
 80019c4:	4b14      	ldr	r3, [pc, #80]	; (8001a18 <HAL_UART_MspInit+0xec>)
 80019c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019cc:	613b      	str	r3, [r7, #16]
 80019ce:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019d0:	2300      	movs	r3, #0
 80019d2:	60fb      	str	r3, [r7, #12]
 80019d4:	4b10      	ldr	r3, [pc, #64]	; (8001a18 <HAL_UART_MspInit+0xec>)
 80019d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d8:	4a0f      	ldr	r2, [pc, #60]	; (8001a18 <HAL_UART_MspInit+0xec>)
 80019da:	f043 0301 	orr.w	r3, r3, #1
 80019de:	6313      	str	r3, [r2, #48]	; 0x30
 80019e0:	4b0d      	ldr	r3, [pc, #52]	; (8001a18 <HAL_UART_MspInit+0xec>)
 80019e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e4:	f003 0301 	and.w	r3, r3, #1
 80019e8:	60fb      	str	r3, [r7, #12]
 80019ea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80019ec:	230c      	movs	r3, #12
 80019ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f0:	2302      	movs	r3, #2
 80019f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f4:	2300      	movs	r3, #0
 80019f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019f8:	2303      	movs	r3, #3
 80019fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80019fc:	2307      	movs	r3, #7
 80019fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a00:	f107 031c 	add.w	r3, r7, #28
 8001a04:	4619      	mov	r1, r3
 8001a06:	4805      	ldr	r0, [pc, #20]	; (8001a1c <HAL_UART_MspInit+0xf0>)
 8001a08:	f000 fae8 	bl	8001fdc <HAL_GPIO_Init>
}
 8001a0c:	bf00      	nop
 8001a0e:	3730      	adds	r7, #48	; 0x30
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	40011000 	.word	0x40011000
 8001a18:	40023800 	.word	0x40023800
 8001a1c:	40020000 	.word	0x40020000
 8001a20:	40004400 	.word	0x40004400

08001a24 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b08c      	sub	sp, #48	; 0x30
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001a30:	2300      	movs	r3, #0
 8001a32:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001a34:	2300      	movs	r3, #0
 8001a36:	60bb      	str	r3, [r7, #8]
 8001a38:	4b2e      	ldr	r3, [pc, #184]	; (8001af4 <HAL_InitTick+0xd0>)
 8001a3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a3c:	4a2d      	ldr	r2, [pc, #180]	; (8001af4 <HAL_InitTick+0xd0>)
 8001a3e:	f043 0301 	orr.w	r3, r3, #1
 8001a42:	6453      	str	r3, [r2, #68]	; 0x44
 8001a44:	4b2b      	ldr	r3, [pc, #172]	; (8001af4 <HAL_InitTick+0xd0>)
 8001a46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a48:	f003 0301 	and.w	r3, r3, #1
 8001a4c:	60bb      	str	r3, [r7, #8]
 8001a4e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001a50:	f107 020c 	add.w	r2, r7, #12
 8001a54:	f107 0310 	add.w	r3, r7, #16
 8001a58:	4611      	mov	r1, r2
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f002 f864 	bl	8003b28 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001a60:	f002 f84e 	bl	8003b00 <HAL_RCC_GetPCLK2Freq>
 8001a64:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a68:	4a23      	ldr	r2, [pc, #140]	; (8001af8 <HAL_InitTick+0xd4>)
 8001a6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a6e:	0c9b      	lsrs	r3, r3, #18
 8001a70:	3b01      	subs	r3, #1
 8001a72:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001a74:	4b21      	ldr	r3, [pc, #132]	; (8001afc <HAL_InitTick+0xd8>)
 8001a76:	4a22      	ldr	r2, [pc, #136]	; (8001b00 <HAL_InitTick+0xdc>)
 8001a78:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001a7a:	4b20      	ldr	r3, [pc, #128]	; (8001afc <HAL_InitTick+0xd8>)
 8001a7c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001a80:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001a82:	4a1e      	ldr	r2, [pc, #120]	; (8001afc <HAL_InitTick+0xd8>)
 8001a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a86:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001a88:	4b1c      	ldr	r3, [pc, #112]	; (8001afc <HAL_InitTick+0xd8>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a8e:	4b1b      	ldr	r3, [pc, #108]	; (8001afc <HAL_InitTick+0xd8>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a94:	4b19      	ldr	r3, [pc, #100]	; (8001afc <HAL_InitTick+0xd8>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001a9a:	4818      	ldr	r0, [pc, #96]	; (8001afc <HAL_InitTick+0xd8>)
 8001a9c:	f002 f876 	bl	8003b8c <HAL_TIM_Base_Init>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001aa6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d11b      	bne.n	8001ae6 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001aae:	4813      	ldr	r0, [pc, #76]	; (8001afc <HAL_InitTick+0xd8>)
 8001ab0:	f002 f8c6 	bl	8003c40 <HAL_TIM_Base_Start_IT>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001aba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d111      	bne.n	8001ae6 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001ac2:	2019      	movs	r0, #25
 8001ac4:	f000 fa7c 	bl	8001fc0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2b0f      	cmp	r3, #15
 8001acc:	d808      	bhi.n	8001ae0 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001ace:	2200      	movs	r2, #0
 8001ad0:	6879      	ldr	r1, [r7, #4]
 8001ad2:	2019      	movs	r0, #25
 8001ad4:	f000 fa58 	bl	8001f88 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ad8:	4a0a      	ldr	r2, [pc, #40]	; (8001b04 <HAL_InitTick+0xe0>)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6013      	str	r3, [r2, #0]
 8001ade:	e002      	b.n	8001ae6 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001ae6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3730      	adds	r7, #48	; 0x30
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	40023800 	.word	0x40023800
 8001af8:	431bde83 	.word	0x431bde83
 8001afc:	2000061c 	.word	0x2000061c
 8001b00:	40010000 	.word	0x40010000
 8001b04:	20000004 	.word	0x20000004

08001b08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b0c:	e7fe      	b.n	8001b0c <NMI_Handler+0x4>

08001b0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b0e:	b480      	push	{r7}
 8001b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b12:	e7fe      	b.n	8001b12 <HardFault_Handler+0x4>

08001b14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b18:	e7fe      	b.n	8001b18 <MemManage_Handler+0x4>

08001b1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b1a:	b480      	push	{r7}
 8001b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b1e:	e7fe      	b.n	8001b1e <BusFault_Handler+0x4>

08001b20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b24:	e7fe      	b.n	8001b24 <UsageFault_Handler+0x4>

08001b26 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b26:	b480      	push	{r7}
 8001b28:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b2a:	bf00      	nop
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr

08001b34 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001b38:	4802      	ldr	r0, [pc, #8]	; (8001b44 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001b3a:	f002 f8e3 	bl	8003d04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001b3e:	bf00      	nop
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	2000061c 	.word	0x2000061c

08001b48 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
  return 1;
 8001b4c:	2301      	movs	r3, #1
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr

08001b58 <_kill>:

int _kill(int pid, int sig)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b62:	f004 f973 	bl	8005e4c <__errno>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2216      	movs	r2, #22
 8001b6a:	601a      	str	r2, [r3, #0]
  return -1;
 8001b6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	3708      	adds	r7, #8
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}

08001b78 <_exit>:

void _exit (int status)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b80:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001b84:	6878      	ldr	r0, [r7, #4]
 8001b86:	f7ff ffe7 	bl	8001b58 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b8a:	e7fe      	b.n	8001b8a <_exit+0x12>

08001b8c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b086      	sub	sp, #24
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	60f8      	str	r0, [r7, #12]
 8001b94:	60b9      	str	r1, [r7, #8]
 8001b96:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b98:	2300      	movs	r3, #0
 8001b9a:	617b      	str	r3, [r7, #20]
 8001b9c:	e00a      	b.n	8001bb4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b9e:	f3af 8000 	nop.w
 8001ba2:	4601      	mov	r1, r0
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	1c5a      	adds	r2, r3, #1
 8001ba8:	60ba      	str	r2, [r7, #8]
 8001baa:	b2ca      	uxtb	r2, r1
 8001bac:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	3301      	adds	r3, #1
 8001bb2:	617b      	str	r3, [r7, #20]
 8001bb4:	697a      	ldr	r2, [r7, #20]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	dbf0      	blt.n	8001b9e <_read+0x12>
  }

  return len;
 8001bbc:	687b      	ldr	r3, [r7, #4]
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3718      	adds	r7, #24
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}

08001bc6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001bc6:	b580      	push	{r7, lr}
 8001bc8:	b086      	sub	sp, #24
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	60f8      	str	r0, [r7, #12]
 8001bce:	60b9      	str	r1, [r7, #8]
 8001bd0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	617b      	str	r3, [r7, #20]
 8001bd6:	e009      	b.n	8001bec <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	1c5a      	adds	r2, r3, #1
 8001bdc:	60ba      	str	r2, [r7, #8]
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	4618      	mov	r0, r3
 8001be2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	3301      	adds	r3, #1
 8001bea:	617b      	str	r3, [r7, #20]
 8001bec:	697a      	ldr	r2, [r7, #20]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	dbf1      	blt.n	8001bd8 <_write+0x12>
  }
  return len;
 8001bf4:	687b      	ldr	r3, [r7, #4]
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3718      	adds	r7, #24
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}

08001bfe <_close>:

int _close(int file)
{
 8001bfe:	b480      	push	{r7}
 8001c00:	b083      	sub	sp, #12
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	370c      	adds	r7, #12
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr

08001c16 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c16:	b480      	push	{r7}
 8001c18:	b083      	sub	sp, #12
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	6078      	str	r0, [r7, #4]
 8001c1e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c26:	605a      	str	r2, [r3, #4]
  return 0;
 8001c28:	2300      	movs	r3, #0
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	370c      	adds	r7, #12
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr

08001c36 <_isatty>:

int _isatty(int file)
{
 8001c36:	b480      	push	{r7}
 8001c38:	b083      	sub	sp, #12
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c3e:	2301      	movs	r3, #1
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	370c      	adds	r7, #12
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr

08001c4c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b085      	sub	sp, #20
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	60f8      	str	r0, [r7, #12]
 8001c54:	60b9      	str	r1, [r7, #8]
 8001c56:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c58:	2300      	movs	r3, #0
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3714      	adds	r7, #20
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
	...

08001c68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b086      	sub	sp, #24
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c70:	4a14      	ldr	r2, [pc, #80]	; (8001cc4 <_sbrk+0x5c>)
 8001c72:	4b15      	ldr	r3, [pc, #84]	; (8001cc8 <_sbrk+0x60>)
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c7c:	4b13      	ldr	r3, [pc, #76]	; (8001ccc <_sbrk+0x64>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d102      	bne.n	8001c8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c84:	4b11      	ldr	r3, [pc, #68]	; (8001ccc <_sbrk+0x64>)
 8001c86:	4a12      	ldr	r2, [pc, #72]	; (8001cd0 <_sbrk+0x68>)
 8001c88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c8a:	4b10      	ldr	r3, [pc, #64]	; (8001ccc <_sbrk+0x64>)
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	4413      	add	r3, r2
 8001c92:	693a      	ldr	r2, [r7, #16]
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d207      	bcs.n	8001ca8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c98:	f004 f8d8 	bl	8005e4c <__errno>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	220c      	movs	r2, #12
 8001ca0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ca2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ca6:	e009      	b.n	8001cbc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ca8:	4b08      	ldr	r3, [pc, #32]	; (8001ccc <_sbrk+0x64>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cae:	4b07      	ldr	r3, [pc, #28]	; (8001ccc <_sbrk+0x64>)
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	4413      	add	r3, r2
 8001cb6:	4a05      	ldr	r2, [pc, #20]	; (8001ccc <_sbrk+0x64>)
 8001cb8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cba:	68fb      	ldr	r3, [r7, #12]
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	3718      	adds	r7, #24
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	20020000 	.word	0x20020000
 8001cc8:	00000400 	.word	0x00000400
 8001ccc:	20000664 	.word	0x20000664
 8001cd0:	200043d0 	.word	0x200043d0

08001cd4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001cd8:	4b06      	ldr	r3, [pc, #24]	; (8001cf4 <SystemInit+0x20>)
 8001cda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cde:	4a05      	ldr	r2, [pc, #20]	; (8001cf4 <SystemInit+0x20>)
 8001ce0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ce4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ce8:	bf00      	nop
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	e000ed00 	.word	0xe000ed00

08001cf8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001cf8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d30 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001cfc:	480d      	ldr	r0, [pc, #52]	; (8001d34 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001cfe:	490e      	ldr	r1, [pc, #56]	; (8001d38 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001d00:	4a0e      	ldr	r2, [pc, #56]	; (8001d3c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d04:	e002      	b.n	8001d0c <LoopCopyDataInit>

08001d06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d0a:	3304      	adds	r3, #4

08001d0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d10:	d3f9      	bcc.n	8001d06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d12:	4a0b      	ldr	r2, [pc, #44]	; (8001d40 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001d14:	4c0b      	ldr	r4, [pc, #44]	; (8001d44 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001d16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d18:	e001      	b.n	8001d1e <LoopFillZerobss>

08001d1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d1c:	3204      	adds	r2, #4

08001d1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d20:	d3fb      	bcc.n	8001d1a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001d22:	f7ff ffd7 	bl	8001cd4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d26:	f004 f98d 	bl	8006044 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d2a:	f7ff f9dd 	bl	80010e8 <main>
  bx  lr    
 8001d2e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d30:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d38:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001d3c:	08009324 	.word	0x08009324
  ldr r2, =_sbss
 8001d40:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001d44:	200043d0 	.word	0x200043d0

08001d48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d48:	e7fe      	b.n	8001d48 <ADC_IRQHandler>
	...

08001d4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d50:	4b0e      	ldr	r3, [pc, #56]	; (8001d8c <HAL_Init+0x40>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a0d      	ldr	r2, [pc, #52]	; (8001d8c <HAL_Init+0x40>)
 8001d56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d5a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d5c:	4b0b      	ldr	r3, [pc, #44]	; (8001d8c <HAL_Init+0x40>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a0a      	ldr	r2, [pc, #40]	; (8001d8c <HAL_Init+0x40>)
 8001d62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d66:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d68:	4b08      	ldr	r3, [pc, #32]	; (8001d8c <HAL_Init+0x40>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a07      	ldr	r2, [pc, #28]	; (8001d8c <HAL_Init+0x40>)
 8001d6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d72:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d74:	2003      	movs	r0, #3
 8001d76:	f000 f8fc 	bl	8001f72 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d7a:	200f      	movs	r0, #15
 8001d7c:	f7ff fe52 	bl	8001a24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d80:	f7ff fd60 	bl	8001844 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d84:	2300      	movs	r3, #0
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	40023c00 	.word	0x40023c00

08001d90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d94:	4b06      	ldr	r3, [pc, #24]	; (8001db0 <HAL_IncTick+0x20>)
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	461a      	mov	r2, r3
 8001d9a:	4b06      	ldr	r3, [pc, #24]	; (8001db4 <HAL_IncTick+0x24>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4413      	add	r3, r2
 8001da0:	4a04      	ldr	r2, [pc, #16]	; (8001db4 <HAL_IncTick+0x24>)
 8001da2:	6013      	str	r3, [r2, #0]
}
 8001da4:	bf00      	nop
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop
 8001db0:	20000008 	.word	0x20000008
 8001db4:	20000668 	.word	0x20000668

08001db8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
  return uwTick;
 8001dbc:	4b03      	ldr	r3, [pc, #12]	; (8001dcc <HAL_GetTick+0x14>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr
 8001dca:	bf00      	nop
 8001dcc:	20000668 	.word	0x20000668

08001dd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b084      	sub	sp, #16
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001dd8:	f7ff ffee 	bl	8001db8 <HAL_GetTick>
 8001ddc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001de8:	d005      	beq.n	8001df6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001dea:	4b0a      	ldr	r3, [pc, #40]	; (8001e14 <HAL_Delay+0x44>)
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	461a      	mov	r2, r3
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	4413      	add	r3, r2
 8001df4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001df6:	bf00      	nop
 8001df8:	f7ff ffde 	bl	8001db8 <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	68fa      	ldr	r2, [r7, #12]
 8001e04:	429a      	cmp	r2, r3
 8001e06:	d8f7      	bhi.n	8001df8 <HAL_Delay+0x28>
  {
  }
}
 8001e08:	bf00      	nop
 8001e0a:	bf00      	nop
 8001e0c:	3710      	adds	r7, #16
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	20000008 	.word	0x20000008

08001e18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b085      	sub	sp, #20
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	f003 0307 	and.w	r3, r3, #7
 8001e26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e28:	4b0c      	ldr	r3, [pc, #48]	; (8001e5c <__NVIC_SetPriorityGrouping+0x44>)
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e2e:	68ba      	ldr	r2, [r7, #8]
 8001e30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e34:	4013      	ands	r3, r2
 8001e36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e4a:	4a04      	ldr	r2, [pc, #16]	; (8001e5c <__NVIC_SetPriorityGrouping+0x44>)
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	60d3      	str	r3, [r2, #12]
}
 8001e50:	bf00      	nop
 8001e52:	3714      	adds	r7, #20
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr
 8001e5c:	e000ed00 	.word	0xe000ed00

08001e60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e64:	4b04      	ldr	r3, [pc, #16]	; (8001e78 <__NVIC_GetPriorityGrouping+0x18>)
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	0a1b      	lsrs	r3, r3, #8
 8001e6a:	f003 0307 	and.w	r3, r3, #7
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr
 8001e78:	e000ed00 	.word	0xe000ed00

08001e7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	4603      	mov	r3, r0
 8001e84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	db0b      	blt.n	8001ea6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e8e:	79fb      	ldrb	r3, [r7, #7]
 8001e90:	f003 021f 	and.w	r2, r3, #31
 8001e94:	4907      	ldr	r1, [pc, #28]	; (8001eb4 <__NVIC_EnableIRQ+0x38>)
 8001e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e9a:	095b      	lsrs	r3, r3, #5
 8001e9c:	2001      	movs	r0, #1
 8001e9e:	fa00 f202 	lsl.w	r2, r0, r2
 8001ea2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ea6:	bf00      	nop
 8001ea8:	370c      	adds	r7, #12
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr
 8001eb2:	bf00      	nop
 8001eb4:	e000e100 	.word	0xe000e100

08001eb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	6039      	str	r1, [r7, #0]
 8001ec2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ec4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	db0a      	blt.n	8001ee2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	b2da      	uxtb	r2, r3
 8001ed0:	490c      	ldr	r1, [pc, #48]	; (8001f04 <__NVIC_SetPriority+0x4c>)
 8001ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed6:	0112      	lsls	r2, r2, #4
 8001ed8:	b2d2      	uxtb	r2, r2
 8001eda:	440b      	add	r3, r1
 8001edc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ee0:	e00a      	b.n	8001ef8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	b2da      	uxtb	r2, r3
 8001ee6:	4908      	ldr	r1, [pc, #32]	; (8001f08 <__NVIC_SetPriority+0x50>)
 8001ee8:	79fb      	ldrb	r3, [r7, #7]
 8001eea:	f003 030f 	and.w	r3, r3, #15
 8001eee:	3b04      	subs	r3, #4
 8001ef0:	0112      	lsls	r2, r2, #4
 8001ef2:	b2d2      	uxtb	r2, r2
 8001ef4:	440b      	add	r3, r1
 8001ef6:	761a      	strb	r2, [r3, #24]
}
 8001ef8:	bf00      	nop
 8001efa:	370c      	adds	r7, #12
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr
 8001f04:	e000e100 	.word	0xe000e100
 8001f08:	e000ed00 	.word	0xe000ed00

08001f0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b089      	sub	sp, #36	; 0x24
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	60f8      	str	r0, [r7, #12]
 8001f14:	60b9      	str	r1, [r7, #8]
 8001f16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	f003 0307 	and.w	r3, r3, #7
 8001f1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f20:	69fb      	ldr	r3, [r7, #28]
 8001f22:	f1c3 0307 	rsb	r3, r3, #7
 8001f26:	2b04      	cmp	r3, #4
 8001f28:	bf28      	it	cs
 8001f2a:	2304      	movcs	r3, #4
 8001f2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	3304      	adds	r3, #4
 8001f32:	2b06      	cmp	r3, #6
 8001f34:	d902      	bls.n	8001f3c <NVIC_EncodePriority+0x30>
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	3b03      	subs	r3, #3
 8001f3a:	e000      	b.n	8001f3e <NVIC_EncodePriority+0x32>
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f40:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001f44:	69bb      	ldr	r3, [r7, #24]
 8001f46:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4a:	43da      	mvns	r2, r3
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	401a      	ands	r2, r3
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f54:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f5e:	43d9      	mvns	r1, r3
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f64:	4313      	orrs	r3, r2
         );
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3724      	adds	r7, #36	; 0x24
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr

08001f72 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f72:	b580      	push	{r7, lr}
 8001f74:	b082      	sub	sp, #8
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f7ff ff4c 	bl	8001e18 <__NVIC_SetPriorityGrouping>
}
 8001f80:	bf00      	nop
 8001f82:	3708      	adds	r7, #8
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}

08001f88 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b086      	sub	sp, #24
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	4603      	mov	r3, r0
 8001f90:	60b9      	str	r1, [r7, #8]
 8001f92:	607a      	str	r2, [r7, #4]
 8001f94:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f96:	2300      	movs	r3, #0
 8001f98:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f9a:	f7ff ff61 	bl	8001e60 <__NVIC_GetPriorityGrouping>
 8001f9e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fa0:	687a      	ldr	r2, [r7, #4]
 8001fa2:	68b9      	ldr	r1, [r7, #8]
 8001fa4:	6978      	ldr	r0, [r7, #20]
 8001fa6:	f7ff ffb1 	bl	8001f0c <NVIC_EncodePriority>
 8001faa:	4602      	mov	r2, r0
 8001fac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fb0:	4611      	mov	r1, r2
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f7ff ff80 	bl	8001eb8 <__NVIC_SetPriority>
}
 8001fb8:	bf00      	nop
 8001fba:	3718      	adds	r7, #24
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}

08001fc0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f7ff ff54 	bl	8001e7c <__NVIC_EnableIRQ>
}
 8001fd4:	bf00      	nop
 8001fd6:	3708      	adds	r7, #8
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}

08001fdc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b089      	sub	sp, #36	; 0x24
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
 8001fe4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001fea:	2300      	movs	r3, #0
 8001fec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	61fb      	str	r3, [r7, #28]
 8001ff6:	e159      	b.n	80022ac <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8002000:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	697a      	ldr	r2, [r7, #20]
 8002008:	4013      	ands	r3, r2
 800200a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800200c:	693a      	ldr	r2, [r7, #16]
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	429a      	cmp	r2, r3
 8002012:	f040 8148 	bne.w	80022a6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	f003 0303 	and.w	r3, r3, #3
 800201e:	2b01      	cmp	r3, #1
 8002020:	d005      	beq.n	800202e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800202a:	2b02      	cmp	r3, #2
 800202c:	d130      	bne.n	8002090 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002034:	69fb      	ldr	r3, [r7, #28]
 8002036:	005b      	lsls	r3, r3, #1
 8002038:	2203      	movs	r2, #3
 800203a:	fa02 f303 	lsl.w	r3, r2, r3
 800203e:	43db      	mvns	r3, r3
 8002040:	69ba      	ldr	r2, [r7, #24]
 8002042:	4013      	ands	r3, r2
 8002044:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	68da      	ldr	r2, [r3, #12]
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	005b      	lsls	r3, r3, #1
 800204e:	fa02 f303 	lsl.w	r3, r2, r3
 8002052:	69ba      	ldr	r2, [r7, #24]
 8002054:	4313      	orrs	r3, r2
 8002056:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	69ba      	ldr	r2, [r7, #24]
 800205c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002064:	2201      	movs	r2, #1
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	fa02 f303 	lsl.w	r3, r2, r3
 800206c:	43db      	mvns	r3, r3
 800206e:	69ba      	ldr	r2, [r7, #24]
 8002070:	4013      	ands	r3, r2
 8002072:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	091b      	lsrs	r3, r3, #4
 800207a:	f003 0201 	and.w	r2, r3, #1
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	fa02 f303 	lsl.w	r3, r2, r3
 8002084:	69ba      	ldr	r2, [r7, #24]
 8002086:	4313      	orrs	r3, r2
 8002088:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	69ba      	ldr	r2, [r7, #24]
 800208e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f003 0303 	and.w	r3, r3, #3
 8002098:	2b03      	cmp	r3, #3
 800209a:	d017      	beq.n	80020cc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	005b      	lsls	r3, r3, #1
 80020a6:	2203      	movs	r2, #3
 80020a8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ac:	43db      	mvns	r3, r3
 80020ae:	69ba      	ldr	r2, [r7, #24]
 80020b0:	4013      	ands	r3, r2
 80020b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	689a      	ldr	r2, [r3, #8]
 80020b8:	69fb      	ldr	r3, [r7, #28]
 80020ba:	005b      	lsls	r3, r3, #1
 80020bc:	fa02 f303 	lsl.w	r3, r2, r3
 80020c0:	69ba      	ldr	r2, [r7, #24]
 80020c2:	4313      	orrs	r3, r2
 80020c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	69ba      	ldr	r2, [r7, #24]
 80020ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	f003 0303 	and.w	r3, r3, #3
 80020d4:	2b02      	cmp	r3, #2
 80020d6:	d123      	bne.n	8002120 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020d8:	69fb      	ldr	r3, [r7, #28]
 80020da:	08da      	lsrs	r2, r3, #3
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	3208      	adds	r2, #8
 80020e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	f003 0307 	and.w	r3, r3, #7
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	220f      	movs	r2, #15
 80020f0:	fa02 f303 	lsl.w	r3, r2, r3
 80020f4:	43db      	mvns	r3, r3
 80020f6:	69ba      	ldr	r2, [r7, #24]
 80020f8:	4013      	ands	r3, r2
 80020fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	691a      	ldr	r2, [r3, #16]
 8002100:	69fb      	ldr	r3, [r7, #28]
 8002102:	f003 0307 	and.w	r3, r3, #7
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	fa02 f303 	lsl.w	r3, r2, r3
 800210c:	69ba      	ldr	r2, [r7, #24]
 800210e:	4313      	orrs	r3, r2
 8002110:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	08da      	lsrs	r2, r3, #3
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	3208      	adds	r2, #8
 800211a:	69b9      	ldr	r1, [r7, #24]
 800211c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	005b      	lsls	r3, r3, #1
 800212a:	2203      	movs	r2, #3
 800212c:	fa02 f303 	lsl.w	r3, r2, r3
 8002130:	43db      	mvns	r3, r3
 8002132:	69ba      	ldr	r2, [r7, #24]
 8002134:	4013      	ands	r3, r2
 8002136:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f003 0203 	and.w	r2, r3, #3
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	005b      	lsls	r3, r3, #1
 8002144:	fa02 f303 	lsl.w	r3, r2, r3
 8002148:	69ba      	ldr	r2, [r7, #24]
 800214a:	4313      	orrs	r3, r2
 800214c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	69ba      	ldr	r2, [r7, #24]
 8002152:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800215c:	2b00      	cmp	r3, #0
 800215e:	f000 80a2 	beq.w	80022a6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002162:	2300      	movs	r3, #0
 8002164:	60fb      	str	r3, [r7, #12]
 8002166:	4b57      	ldr	r3, [pc, #348]	; (80022c4 <HAL_GPIO_Init+0x2e8>)
 8002168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800216a:	4a56      	ldr	r2, [pc, #344]	; (80022c4 <HAL_GPIO_Init+0x2e8>)
 800216c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002170:	6453      	str	r3, [r2, #68]	; 0x44
 8002172:	4b54      	ldr	r3, [pc, #336]	; (80022c4 <HAL_GPIO_Init+0x2e8>)
 8002174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002176:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800217a:	60fb      	str	r3, [r7, #12]
 800217c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800217e:	4a52      	ldr	r2, [pc, #328]	; (80022c8 <HAL_GPIO_Init+0x2ec>)
 8002180:	69fb      	ldr	r3, [r7, #28]
 8002182:	089b      	lsrs	r3, r3, #2
 8002184:	3302      	adds	r3, #2
 8002186:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800218a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800218c:	69fb      	ldr	r3, [r7, #28]
 800218e:	f003 0303 	and.w	r3, r3, #3
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	220f      	movs	r2, #15
 8002196:	fa02 f303 	lsl.w	r3, r2, r3
 800219a:	43db      	mvns	r3, r3
 800219c:	69ba      	ldr	r2, [r7, #24]
 800219e:	4013      	ands	r3, r2
 80021a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4a49      	ldr	r2, [pc, #292]	; (80022cc <HAL_GPIO_Init+0x2f0>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d019      	beq.n	80021de <HAL_GPIO_Init+0x202>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4a48      	ldr	r2, [pc, #288]	; (80022d0 <HAL_GPIO_Init+0x2f4>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d013      	beq.n	80021da <HAL_GPIO_Init+0x1fe>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4a47      	ldr	r2, [pc, #284]	; (80022d4 <HAL_GPIO_Init+0x2f8>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d00d      	beq.n	80021d6 <HAL_GPIO_Init+0x1fa>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4a46      	ldr	r2, [pc, #280]	; (80022d8 <HAL_GPIO_Init+0x2fc>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d007      	beq.n	80021d2 <HAL_GPIO_Init+0x1f6>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4a45      	ldr	r2, [pc, #276]	; (80022dc <HAL_GPIO_Init+0x300>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d101      	bne.n	80021ce <HAL_GPIO_Init+0x1f2>
 80021ca:	2304      	movs	r3, #4
 80021cc:	e008      	b.n	80021e0 <HAL_GPIO_Init+0x204>
 80021ce:	2307      	movs	r3, #7
 80021d0:	e006      	b.n	80021e0 <HAL_GPIO_Init+0x204>
 80021d2:	2303      	movs	r3, #3
 80021d4:	e004      	b.n	80021e0 <HAL_GPIO_Init+0x204>
 80021d6:	2302      	movs	r3, #2
 80021d8:	e002      	b.n	80021e0 <HAL_GPIO_Init+0x204>
 80021da:	2301      	movs	r3, #1
 80021dc:	e000      	b.n	80021e0 <HAL_GPIO_Init+0x204>
 80021de:	2300      	movs	r3, #0
 80021e0:	69fa      	ldr	r2, [r7, #28]
 80021e2:	f002 0203 	and.w	r2, r2, #3
 80021e6:	0092      	lsls	r2, r2, #2
 80021e8:	4093      	lsls	r3, r2
 80021ea:	69ba      	ldr	r2, [r7, #24]
 80021ec:	4313      	orrs	r3, r2
 80021ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021f0:	4935      	ldr	r1, [pc, #212]	; (80022c8 <HAL_GPIO_Init+0x2ec>)
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	089b      	lsrs	r3, r3, #2
 80021f6:	3302      	adds	r3, #2
 80021f8:	69ba      	ldr	r2, [r7, #24]
 80021fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021fe:	4b38      	ldr	r3, [pc, #224]	; (80022e0 <HAL_GPIO_Init+0x304>)
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	43db      	mvns	r3, r3
 8002208:	69ba      	ldr	r2, [r7, #24]
 800220a:	4013      	ands	r3, r2
 800220c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d003      	beq.n	8002222 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800221a:	69ba      	ldr	r2, [r7, #24]
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	4313      	orrs	r3, r2
 8002220:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002222:	4a2f      	ldr	r2, [pc, #188]	; (80022e0 <HAL_GPIO_Init+0x304>)
 8002224:	69bb      	ldr	r3, [r7, #24]
 8002226:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002228:	4b2d      	ldr	r3, [pc, #180]	; (80022e0 <HAL_GPIO_Init+0x304>)
 800222a:	68db      	ldr	r3, [r3, #12]
 800222c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	43db      	mvns	r3, r3
 8002232:	69ba      	ldr	r2, [r7, #24]
 8002234:	4013      	ands	r3, r2
 8002236:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002240:	2b00      	cmp	r3, #0
 8002242:	d003      	beq.n	800224c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002244:	69ba      	ldr	r2, [r7, #24]
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	4313      	orrs	r3, r2
 800224a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800224c:	4a24      	ldr	r2, [pc, #144]	; (80022e0 <HAL_GPIO_Init+0x304>)
 800224e:	69bb      	ldr	r3, [r7, #24]
 8002250:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002252:	4b23      	ldr	r3, [pc, #140]	; (80022e0 <HAL_GPIO_Init+0x304>)
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	43db      	mvns	r3, r3
 800225c:	69ba      	ldr	r2, [r7, #24]
 800225e:	4013      	ands	r3, r2
 8002260:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800226a:	2b00      	cmp	r3, #0
 800226c:	d003      	beq.n	8002276 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800226e:	69ba      	ldr	r2, [r7, #24]
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	4313      	orrs	r3, r2
 8002274:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002276:	4a1a      	ldr	r2, [pc, #104]	; (80022e0 <HAL_GPIO_Init+0x304>)
 8002278:	69bb      	ldr	r3, [r7, #24]
 800227a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800227c:	4b18      	ldr	r3, [pc, #96]	; (80022e0 <HAL_GPIO_Init+0x304>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	43db      	mvns	r3, r3
 8002286:	69ba      	ldr	r2, [r7, #24]
 8002288:	4013      	ands	r3, r2
 800228a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002294:	2b00      	cmp	r3, #0
 8002296:	d003      	beq.n	80022a0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002298:	69ba      	ldr	r2, [r7, #24]
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	4313      	orrs	r3, r2
 800229e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80022a0:	4a0f      	ldr	r2, [pc, #60]	; (80022e0 <HAL_GPIO_Init+0x304>)
 80022a2:	69bb      	ldr	r3, [r7, #24]
 80022a4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	3301      	adds	r3, #1
 80022aa:	61fb      	str	r3, [r7, #28]
 80022ac:	69fb      	ldr	r3, [r7, #28]
 80022ae:	2b0f      	cmp	r3, #15
 80022b0:	f67f aea2 	bls.w	8001ff8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80022b4:	bf00      	nop
 80022b6:	bf00      	nop
 80022b8:	3724      	adds	r7, #36	; 0x24
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr
 80022c2:	bf00      	nop
 80022c4:	40023800 	.word	0x40023800
 80022c8:	40013800 	.word	0x40013800
 80022cc:	40020000 	.word	0x40020000
 80022d0:	40020400 	.word	0x40020400
 80022d4:	40020800 	.word	0x40020800
 80022d8:	40020c00 	.word	0x40020c00
 80022dc:	40021000 	.word	0x40021000
 80022e0:	40013c00 	.word	0x40013c00

080022e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	460b      	mov	r3, r1
 80022ee:	807b      	strh	r3, [r7, #2]
 80022f0:	4613      	mov	r3, r2
 80022f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022f4:	787b      	ldrb	r3, [r7, #1]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d003      	beq.n	8002302 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022fa:	887a      	ldrh	r2, [r7, #2]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002300:	e003      	b.n	800230a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002302:	887b      	ldrh	r3, [r7, #2]
 8002304:	041a      	lsls	r2, r3, #16
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	619a      	str	r2, [r3, #24]
}
 800230a:	bf00      	nop
 800230c:	370c      	adds	r7, #12
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr

08002316 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002316:	b480      	push	{r7}
 8002318:	b085      	sub	sp, #20
 800231a:	af00      	add	r7, sp, #0
 800231c:	6078      	str	r0, [r7, #4]
 800231e:	460b      	mov	r3, r1
 8002320:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	695b      	ldr	r3, [r3, #20]
 8002326:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002328:	887a      	ldrh	r2, [r7, #2]
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	4013      	ands	r3, r2
 800232e:	041a      	lsls	r2, r3, #16
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	43d9      	mvns	r1, r3
 8002334:	887b      	ldrh	r3, [r7, #2]
 8002336:	400b      	ands	r3, r1
 8002338:	431a      	orrs	r2, r3
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	619a      	str	r2, [r3, #24]
}
 800233e:	bf00      	nop
 8002340:	3714      	adds	r7, #20
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr
	...

0800234c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b084      	sub	sp, #16
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d101      	bne.n	800235e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e12b      	b.n	80025b6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002364:	b2db      	uxtb	r3, r3
 8002366:	2b00      	cmp	r3, #0
 8002368:	d106      	bne.n	8002378 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2200      	movs	r2, #0
 800236e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f7ff fa92 	bl	800189c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2224      	movs	r2, #36	; 0x24
 800237c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f022 0201 	bic.w	r2, r2, #1
 800238e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800239e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80023ae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80023b0:	f001 fb92 	bl	8003ad8 <HAL_RCC_GetPCLK1Freq>
 80023b4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	4a81      	ldr	r2, [pc, #516]	; (80025c0 <HAL_I2C_Init+0x274>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d807      	bhi.n	80023d0 <HAL_I2C_Init+0x84>
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	4a80      	ldr	r2, [pc, #512]	; (80025c4 <HAL_I2C_Init+0x278>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	bf94      	ite	ls
 80023c8:	2301      	movls	r3, #1
 80023ca:	2300      	movhi	r3, #0
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	e006      	b.n	80023de <HAL_I2C_Init+0x92>
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	4a7d      	ldr	r2, [pc, #500]	; (80025c8 <HAL_I2C_Init+0x27c>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	bf94      	ite	ls
 80023d8:	2301      	movls	r3, #1
 80023da:	2300      	movhi	r3, #0
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d001      	beq.n	80023e6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e0e7      	b.n	80025b6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	4a78      	ldr	r2, [pc, #480]	; (80025cc <HAL_I2C_Init+0x280>)
 80023ea:	fba2 2303 	umull	r2, r3, r2, r3
 80023ee:	0c9b      	lsrs	r3, r3, #18
 80023f0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	68ba      	ldr	r2, [r7, #8]
 8002402:	430a      	orrs	r2, r1
 8002404:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	6a1b      	ldr	r3, [r3, #32]
 800240c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	4a6a      	ldr	r2, [pc, #424]	; (80025c0 <HAL_I2C_Init+0x274>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d802      	bhi.n	8002420 <HAL_I2C_Init+0xd4>
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	3301      	adds	r3, #1
 800241e:	e009      	b.n	8002434 <HAL_I2C_Init+0xe8>
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002426:	fb02 f303 	mul.w	r3, r2, r3
 800242a:	4a69      	ldr	r2, [pc, #420]	; (80025d0 <HAL_I2C_Init+0x284>)
 800242c:	fba2 2303 	umull	r2, r3, r2, r3
 8002430:	099b      	lsrs	r3, r3, #6
 8002432:	3301      	adds	r3, #1
 8002434:	687a      	ldr	r2, [r7, #4]
 8002436:	6812      	ldr	r2, [r2, #0]
 8002438:	430b      	orrs	r3, r1
 800243a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	69db      	ldr	r3, [r3, #28]
 8002442:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002446:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	495c      	ldr	r1, [pc, #368]	; (80025c0 <HAL_I2C_Init+0x274>)
 8002450:	428b      	cmp	r3, r1
 8002452:	d819      	bhi.n	8002488 <HAL_I2C_Init+0x13c>
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	1e59      	subs	r1, r3, #1
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	005b      	lsls	r3, r3, #1
 800245e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002462:	1c59      	adds	r1, r3, #1
 8002464:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002468:	400b      	ands	r3, r1
 800246a:	2b00      	cmp	r3, #0
 800246c:	d00a      	beq.n	8002484 <HAL_I2C_Init+0x138>
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	1e59      	subs	r1, r3, #1
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	005b      	lsls	r3, r3, #1
 8002478:	fbb1 f3f3 	udiv	r3, r1, r3
 800247c:	3301      	adds	r3, #1
 800247e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002482:	e051      	b.n	8002528 <HAL_I2C_Init+0x1dc>
 8002484:	2304      	movs	r3, #4
 8002486:	e04f      	b.n	8002528 <HAL_I2C_Init+0x1dc>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d111      	bne.n	80024b4 <HAL_I2C_Init+0x168>
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	1e58      	subs	r0, r3, #1
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6859      	ldr	r1, [r3, #4]
 8002498:	460b      	mov	r3, r1
 800249a:	005b      	lsls	r3, r3, #1
 800249c:	440b      	add	r3, r1
 800249e:	fbb0 f3f3 	udiv	r3, r0, r3
 80024a2:	3301      	adds	r3, #1
 80024a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	bf0c      	ite	eq
 80024ac:	2301      	moveq	r3, #1
 80024ae:	2300      	movne	r3, #0
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	e012      	b.n	80024da <HAL_I2C_Init+0x18e>
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	1e58      	subs	r0, r3, #1
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6859      	ldr	r1, [r3, #4]
 80024bc:	460b      	mov	r3, r1
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	440b      	add	r3, r1
 80024c2:	0099      	lsls	r1, r3, #2
 80024c4:	440b      	add	r3, r1
 80024c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80024ca:	3301      	adds	r3, #1
 80024cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	bf0c      	ite	eq
 80024d4:	2301      	moveq	r3, #1
 80024d6:	2300      	movne	r3, #0
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d001      	beq.n	80024e2 <HAL_I2C_Init+0x196>
 80024de:	2301      	movs	r3, #1
 80024e0:	e022      	b.n	8002528 <HAL_I2C_Init+0x1dc>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d10e      	bne.n	8002508 <HAL_I2C_Init+0x1bc>
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	1e58      	subs	r0, r3, #1
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6859      	ldr	r1, [r3, #4]
 80024f2:	460b      	mov	r3, r1
 80024f4:	005b      	lsls	r3, r3, #1
 80024f6:	440b      	add	r3, r1
 80024f8:	fbb0 f3f3 	udiv	r3, r0, r3
 80024fc:	3301      	adds	r3, #1
 80024fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002502:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002506:	e00f      	b.n	8002528 <HAL_I2C_Init+0x1dc>
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	1e58      	subs	r0, r3, #1
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6859      	ldr	r1, [r3, #4]
 8002510:	460b      	mov	r3, r1
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	440b      	add	r3, r1
 8002516:	0099      	lsls	r1, r3, #2
 8002518:	440b      	add	r3, r1
 800251a:	fbb0 f3f3 	udiv	r3, r0, r3
 800251e:	3301      	adds	r3, #1
 8002520:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002524:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002528:	6879      	ldr	r1, [r7, #4]
 800252a:	6809      	ldr	r1, [r1, #0]
 800252c:	4313      	orrs	r3, r2
 800252e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	69da      	ldr	r2, [r3, #28]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6a1b      	ldr	r3, [r3, #32]
 8002542:	431a      	orrs	r2, r3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	430a      	orrs	r2, r1
 800254a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002556:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800255a:	687a      	ldr	r2, [r7, #4]
 800255c:	6911      	ldr	r1, [r2, #16]
 800255e:	687a      	ldr	r2, [r7, #4]
 8002560:	68d2      	ldr	r2, [r2, #12]
 8002562:	4311      	orrs	r1, r2
 8002564:	687a      	ldr	r2, [r7, #4]
 8002566:	6812      	ldr	r2, [r2, #0]
 8002568:	430b      	orrs	r3, r1
 800256a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	68db      	ldr	r3, [r3, #12]
 8002572:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	695a      	ldr	r2, [r3, #20]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	699b      	ldr	r3, [r3, #24]
 800257e:	431a      	orrs	r2, r3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	430a      	orrs	r2, r1
 8002586:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f042 0201 	orr.w	r2, r2, #1
 8002596:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2200      	movs	r2, #0
 800259c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2220      	movs	r2, #32
 80025a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2200      	movs	r2, #0
 80025aa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2200      	movs	r2, #0
 80025b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80025b4:	2300      	movs	r3, #0
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3710      	adds	r7, #16
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	000186a0 	.word	0x000186a0
 80025c4:	001e847f 	.word	0x001e847f
 80025c8:	003d08ff 	.word	0x003d08ff
 80025cc:	431bde83 	.word	0x431bde83
 80025d0:	10624dd3 	.word	0x10624dd3

080025d4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b088      	sub	sp, #32
 80025d8:	af02      	add	r7, sp, #8
 80025da:	60f8      	str	r0, [r7, #12]
 80025dc:	607a      	str	r2, [r7, #4]
 80025de:	461a      	mov	r2, r3
 80025e0:	460b      	mov	r3, r1
 80025e2:	817b      	strh	r3, [r7, #10]
 80025e4:	4613      	mov	r3, r2
 80025e6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80025e8:	f7ff fbe6 	bl	8001db8 <HAL_GetTick>
 80025ec:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	2b20      	cmp	r3, #32
 80025f8:	f040 80e0 	bne.w	80027bc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	9300      	str	r3, [sp, #0]
 8002600:	2319      	movs	r3, #25
 8002602:	2201      	movs	r2, #1
 8002604:	4970      	ldr	r1, [pc, #448]	; (80027c8 <HAL_I2C_Master_Transmit+0x1f4>)
 8002606:	68f8      	ldr	r0, [r7, #12]
 8002608:	f000 fc58 	bl	8002ebc <I2C_WaitOnFlagUntilTimeout>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d001      	beq.n	8002616 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002612:	2302      	movs	r3, #2
 8002614:	e0d3      	b.n	80027be <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800261c:	2b01      	cmp	r3, #1
 800261e:	d101      	bne.n	8002624 <HAL_I2C_Master_Transmit+0x50>
 8002620:	2302      	movs	r3, #2
 8002622:	e0cc      	b.n	80027be <HAL_I2C_Master_Transmit+0x1ea>
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2201      	movs	r2, #1
 8002628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 0301 	and.w	r3, r3, #1
 8002636:	2b01      	cmp	r3, #1
 8002638:	d007      	beq.n	800264a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f042 0201 	orr.w	r2, r2, #1
 8002648:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002658:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	2221      	movs	r2, #33	; 0x21
 800265e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	2210      	movs	r2, #16
 8002666:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2200      	movs	r2, #0
 800266e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	687a      	ldr	r2, [r7, #4]
 8002674:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	893a      	ldrh	r2, [r7, #8]
 800267a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002680:	b29a      	uxth	r2, r3
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	4a50      	ldr	r2, [pc, #320]	; (80027cc <HAL_I2C_Master_Transmit+0x1f8>)
 800268a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800268c:	8979      	ldrh	r1, [r7, #10]
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	6a3a      	ldr	r2, [r7, #32]
 8002692:	68f8      	ldr	r0, [r7, #12]
 8002694:	f000 fac2 	bl	8002c1c <I2C_MasterRequestWrite>
 8002698:	4603      	mov	r3, r0
 800269a:	2b00      	cmp	r3, #0
 800269c:	d001      	beq.n	80026a2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e08d      	b.n	80027be <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026a2:	2300      	movs	r3, #0
 80026a4:	613b      	str	r3, [r7, #16]
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	695b      	ldr	r3, [r3, #20]
 80026ac:	613b      	str	r3, [r7, #16]
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	699b      	ldr	r3, [r3, #24]
 80026b4:	613b      	str	r3, [r7, #16]
 80026b6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80026b8:	e066      	b.n	8002788 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026ba:	697a      	ldr	r2, [r7, #20]
 80026bc:	6a39      	ldr	r1, [r7, #32]
 80026be:	68f8      	ldr	r0, [r7, #12]
 80026c0:	f000 fcd2 	bl	8003068 <I2C_WaitOnTXEFlagUntilTimeout>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d00d      	beq.n	80026e6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ce:	2b04      	cmp	r3, #4
 80026d0:	d107      	bne.n	80026e2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026e0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e06b      	b.n	80027be <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ea:	781a      	ldrb	r2, [r3, #0]
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f6:	1c5a      	adds	r2, r3, #1
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002700:	b29b      	uxth	r3, r3
 8002702:	3b01      	subs	r3, #1
 8002704:	b29a      	uxth	r2, r3
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800270e:	3b01      	subs	r3, #1
 8002710:	b29a      	uxth	r2, r3
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	695b      	ldr	r3, [r3, #20]
 800271c:	f003 0304 	and.w	r3, r3, #4
 8002720:	2b04      	cmp	r3, #4
 8002722:	d11b      	bne.n	800275c <HAL_I2C_Master_Transmit+0x188>
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002728:	2b00      	cmp	r3, #0
 800272a:	d017      	beq.n	800275c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002730:	781a      	ldrb	r2, [r3, #0]
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800273c:	1c5a      	adds	r2, r3, #1
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002746:	b29b      	uxth	r3, r3
 8002748:	3b01      	subs	r3, #1
 800274a:	b29a      	uxth	r2, r3
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002754:	3b01      	subs	r3, #1
 8002756:	b29a      	uxth	r2, r3
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800275c:	697a      	ldr	r2, [r7, #20]
 800275e:	6a39      	ldr	r1, [r7, #32]
 8002760:	68f8      	ldr	r0, [r7, #12]
 8002762:	f000 fcc2 	bl	80030ea <I2C_WaitOnBTFFlagUntilTimeout>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d00d      	beq.n	8002788 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002770:	2b04      	cmp	r3, #4
 8002772:	d107      	bne.n	8002784 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002782:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	e01a      	b.n	80027be <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800278c:	2b00      	cmp	r3, #0
 800278e:	d194      	bne.n	80026ba <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800279e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	2220      	movs	r2, #32
 80027a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2200      	movs	r2, #0
 80027ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2200      	movs	r2, #0
 80027b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80027b8:	2300      	movs	r3, #0
 80027ba:	e000      	b.n	80027be <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80027bc:	2302      	movs	r3, #2
  }
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3718      	adds	r7, #24
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	00100002 	.word	0x00100002
 80027cc:	ffff0000 	.word	0xffff0000

080027d0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b08c      	sub	sp, #48	; 0x30
 80027d4:	af02      	add	r7, sp, #8
 80027d6:	60f8      	str	r0, [r7, #12]
 80027d8:	607a      	str	r2, [r7, #4]
 80027da:	461a      	mov	r2, r3
 80027dc:	460b      	mov	r3, r1
 80027de:	817b      	strh	r3, [r7, #10]
 80027e0:	4613      	mov	r3, r2
 80027e2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80027e4:	f7ff fae8 	bl	8001db8 <HAL_GetTick>
 80027e8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	2b20      	cmp	r3, #32
 80027f4:	f040 820b 	bne.w	8002c0e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80027f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027fa:	9300      	str	r3, [sp, #0]
 80027fc:	2319      	movs	r3, #25
 80027fe:	2201      	movs	r2, #1
 8002800:	497c      	ldr	r1, [pc, #496]	; (80029f4 <HAL_I2C_Master_Receive+0x224>)
 8002802:	68f8      	ldr	r0, [r7, #12]
 8002804:	f000 fb5a 	bl	8002ebc <I2C_WaitOnFlagUntilTimeout>
 8002808:	4603      	mov	r3, r0
 800280a:	2b00      	cmp	r3, #0
 800280c:	d001      	beq.n	8002812 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800280e:	2302      	movs	r3, #2
 8002810:	e1fe      	b.n	8002c10 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002818:	2b01      	cmp	r3, #1
 800281a:	d101      	bne.n	8002820 <HAL_I2C_Master_Receive+0x50>
 800281c:	2302      	movs	r3, #2
 800281e:	e1f7      	b.n	8002c10 <HAL_I2C_Master_Receive+0x440>
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	2201      	movs	r2, #1
 8002824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 0301 	and.w	r3, r3, #1
 8002832:	2b01      	cmp	r3, #1
 8002834:	d007      	beq.n	8002846 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f042 0201 	orr.w	r2, r2, #1
 8002844:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002854:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2222      	movs	r2, #34	; 0x22
 800285a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2210      	movs	r2, #16
 8002862:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2200      	movs	r2, #0
 800286a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	687a      	ldr	r2, [r7, #4]
 8002870:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	893a      	ldrh	r2, [r7, #8]
 8002876:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800287c:	b29a      	uxth	r2, r3
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	4a5c      	ldr	r2, [pc, #368]	; (80029f8 <HAL_I2C_Master_Receive+0x228>)
 8002886:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002888:	8979      	ldrh	r1, [r7, #10]
 800288a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800288e:	68f8      	ldr	r0, [r7, #12]
 8002890:	f000 fa46 	bl	8002d20 <I2C_MasterRequestRead>
 8002894:	4603      	mov	r3, r0
 8002896:	2b00      	cmp	r3, #0
 8002898:	d001      	beq.n	800289e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e1b8      	b.n	8002c10 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d113      	bne.n	80028ce <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028a6:	2300      	movs	r3, #0
 80028a8:	623b      	str	r3, [r7, #32]
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	695b      	ldr	r3, [r3, #20]
 80028b0:	623b      	str	r3, [r7, #32]
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	699b      	ldr	r3, [r3, #24]
 80028b8:	623b      	str	r3, [r7, #32]
 80028ba:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028ca:	601a      	str	r2, [r3, #0]
 80028cc:	e18c      	b.n	8002be8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d11b      	bne.n	800290e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028e4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028e6:	2300      	movs	r3, #0
 80028e8:	61fb      	str	r3, [r7, #28]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	695b      	ldr	r3, [r3, #20]
 80028f0:	61fb      	str	r3, [r7, #28]
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	699b      	ldr	r3, [r3, #24]
 80028f8:	61fb      	str	r3, [r7, #28]
 80028fa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800290a:	601a      	str	r2, [r3, #0]
 800290c:	e16c      	b.n	8002be8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002912:	2b02      	cmp	r3, #2
 8002914:	d11b      	bne.n	800294e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002924:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002934:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002936:	2300      	movs	r3, #0
 8002938:	61bb      	str	r3, [r7, #24]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	695b      	ldr	r3, [r3, #20]
 8002940:	61bb      	str	r3, [r7, #24]
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	699b      	ldr	r3, [r3, #24]
 8002948:	61bb      	str	r3, [r7, #24]
 800294a:	69bb      	ldr	r3, [r7, #24]
 800294c:	e14c      	b.n	8002be8 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800295c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800295e:	2300      	movs	r3, #0
 8002960:	617b      	str	r3, [r7, #20]
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	695b      	ldr	r3, [r3, #20]
 8002968:	617b      	str	r3, [r7, #20]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	699b      	ldr	r3, [r3, #24]
 8002970:	617b      	str	r3, [r7, #20]
 8002972:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002974:	e138      	b.n	8002be8 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800297a:	2b03      	cmp	r3, #3
 800297c:	f200 80f1 	bhi.w	8002b62 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002984:	2b01      	cmp	r3, #1
 8002986:	d123      	bne.n	80029d0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002988:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800298a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800298c:	68f8      	ldr	r0, [r7, #12]
 800298e:	f000 fbed 	bl	800316c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002992:	4603      	mov	r3, r0
 8002994:	2b00      	cmp	r3, #0
 8002996:	d001      	beq.n	800299c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	e139      	b.n	8002c10 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	691a      	ldr	r2, [r3, #16]
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a6:	b2d2      	uxtb	r2, r2
 80029a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ae:	1c5a      	adds	r2, r3, #1
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029b8:	3b01      	subs	r3, #1
 80029ba:	b29a      	uxth	r2, r3
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029c4:	b29b      	uxth	r3, r3
 80029c6:	3b01      	subs	r3, #1
 80029c8:	b29a      	uxth	r2, r3
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80029ce:	e10b      	b.n	8002be8 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029d4:	2b02      	cmp	r3, #2
 80029d6:	d14e      	bne.n	8002a76 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80029d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029da:	9300      	str	r3, [sp, #0]
 80029dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029de:	2200      	movs	r2, #0
 80029e0:	4906      	ldr	r1, [pc, #24]	; (80029fc <HAL_I2C_Master_Receive+0x22c>)
 80029e2:	68f8      	ldr	r0, [r7, #12]
 80029e4:	f000 fa6a 	bl	8002ebc <I2C_WaitOnFlagUntilTimeout>
 80029e8:	4603      	mov	r3, r0
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d008      	beq.n	8002a00 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e10e      	b.n	8002c10 <HAL_I2C_Master_Receive+0x440>
 80029f2:	bf00      	nop
 80029f4:	00100002 	.word	0x00100002
 80029f8:	ffff0000 	.word	0xffff0000
 80029fc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a0e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	691a      	ldr	r2, [r3, #16]
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1a:	b2d2      	uxtb	r2, r2
 8002a1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a22:	1c5a      	adds	r2, r3, #1
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a2c:	3b01      	subs	r3, #1
 8002a2e:	b29a      	uxth	r2, r3
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a38:	b29b      	uxth	r3, r3
 8002a3a:	3b01      	subs	r3, #1
 8002a3c:	b29a      	uxth	r2, r3
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	691a      	ldr	r2, [r3, #16]
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a4c:	b2d2      	uxtb	r2, r2
 8002a4e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a54:	1c5a      	adds	r2, r3, #1
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a5e:	3b01      	subs	r3, #1
 8002a60:	b29a      	uxth	r2, r3
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a6a:	b29b      	uxth	r3, r3
 8002a6c:	3b01      	subs	r3, #1
 8002a6e:	b29a      	uxth	r2, r3
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002a74:	e0b8      	b.n	8002be8 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a78:	9300      	str	r3, [sp, #0]
 8002a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	4966      	ldr	r1, [pc, #408]	; (8002c18 <HAL_I2C_Master_Receive+0x448>)
 8002a80:	68f8      	ldr	r0, [r7, #12]
 8002a82:	f000 fa1b 	bl	8002ebc <I2C_WaitOnFlagUntilTimeout>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d001      	beq.n	8002a90 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e0bf      	b.n	8002c10 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a9e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	691a      	ldr	r2, [r3, #16]
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aaa:	b2d2      	uxtb	r2, r2
 8002aac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab2:	1c5a      	adds	r2, r3, #1
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002abc:	3b01      	subs	r3, #1
 8002abe:	b29a      	uxth	r2, r3
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ac8:	b29b      	uxth	r3, r3
 8002aca:	3b01      	subs	r3, #1
 8002acc:	b29a      	uxth	r2, r3
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad4:	9300      	str	r3, [sp, #0]
 8002ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ad8:	2200      	movs	r2, #0
 8002ada:	494f      	ldr	r1, [pc, #316]	; (8002c18 <HAL_I2C_Master_Receive+0x448>)
 8002adc:	68f8      	ldr	r0, [r7, #12]
 8002ade:	f000 f9ed 	bl	8002ebc <I2C_WaitOnFlagUntilTimeout>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d001      	beq.n	8002aec <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e091      	b.n	8002c10 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002afa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	691a      	ldr	r2, [r3, #16]
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b06:	b2d2      	uxtb	r2, r2
 8002b08:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b0e:	1c5a      	adds	r2, r3, #1
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b18:	3b01      	subs	r3, #1
 8002b1a:	b29a      	uxth	r2, r3
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b24:	b29b      	uxth	r3, r3
 8002b26:	3b01      	subs	r3, #1
 8002b28:	b29a      	uxth	r2, r3
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	691a      	ldr	r2, [r3, #16]
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b38:	b2d2      	uxtb	r2, r2
 8002b3a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b40:	1c5a      	adds	r2, r3, #1
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b4a:	3b01      	subs	r3, #1
 8002b4c:	b29a      	uxth	r2, r3
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b56:	b29b      	uxth	r3, r3
 8002b58:	3b01      	subs	r3, #1
 8002b5a:	b29a      	uxth	r2, r3
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002b60:	e042      	b.n	8002be8 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b64:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002b66:	68f8      	ldr	r0, [r7, #12]
 8002b68:	f000 fb00 	bl	800316c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d001      	beq.n	8002b76 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e04c      	b.n	8002c10 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	691a      	ldr	r2, [r3, #16]
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b80:	b2d2      	uxtb	r2, r2
 8002b82:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b88:	1c5a      	adds	r2, r3, #1
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b92:	3b01      	subs	r3, #1
 8002b94:	b29a      	uxth	r2, r3
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b9e:	b29b      	uxth	r3, r3
 8002ba0:	3b01      	subs	r3, #1
 8002ba2:	b29a      	uxth	r2, r3
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	695b      	ldr	r3, [r3, #20]
 8002bae:	f003 0304 	and.w	r3, r3, #4
 8002bb2:	2b04      	cmp	r3, #4
 8002bb4:	d118      	bne.n	8002be8 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	691a      	ldr	r2, [r3, #16]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc0:	b2d2      	uxtb	r2, r2
 8002bc2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc8:	1c5a      	adds	r2, r3, #1
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bd2:	3b01      	subs	r3, #1
 8002bd4:	b29a      	uxth	r2, r3
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bde:	b29b      	uxth	r3, r3
 8002be0:	3b01      	subs	r3, #1
 8002be2:	b29a      	uxth	r2, r3
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	f47f aec2 	bne.w	8002976 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2220      	movs	r2, #32
 8002bf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2200      	movs	r2, #0
 8002c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	e000      	b.n	8002c10 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002c0e:	2302      	movs	r3, #2
  }
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	3728      	adds	r7, #40	; 0x28
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	00010004 	.word	0x00010004

08002c1c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b088      	sub	sp, #32
 8002c20:	af02      	add	r7, sp, #8
 8002c22:	60f8      	str	r0, [r7, #12]
 8002c24:	607a      	str	r2, [r7, #4]
 8002c26:	603b      	str	r3, [r7, #0]
 8002c28:	460b      	mov	r3, r1
 8002c2a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c30:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	2b08      	cmp	r3, #8
 8002c36:	d006      	beq.n	8002c46 <I2C_MasterRequestWrite+0x2a>
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d003      	beq.n	8002c46 <I2C_MasterRequestWrite+0x2a>
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002c44:	d108      	bne.n	8002c58 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c54:	601a      	str	r2, [r3, #0]
 8002c56:	e00b      	b.n	8002c70 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c5c:	2b12      	cmp	r3, #18
 8002c5e:	d107      	bne.n	8002c70 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c6e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	9300      	str	r3, [sp, #0]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2200      	movs	r2, #0
 8002c78:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002c7c:	68f8      	ldr	r0, [r7, #12]
 8002c7e:	f000 f91d 	bl	8002ebc <I2C_WaitOnFlagUntilTimeout>
 8002c82:	4603      	mov	r3, r0
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d00d      	beq.n	8002ca4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c96:	d103      	bne.n	8002ca0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c9e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002ca0:	2303      	movs	r3, #3
 8002ca2:	e035      	b.n	8002d10 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	691b      	ldr	r3, [r3, #16]
 8002ca8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002cac:	d108      	bne.n	8002cc0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002cae:	897b      	ldrh	r3, [r7, #10]
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	461a      	mov	r2, r3
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002cbc:	611a      	str	r2, [r3, #16]
 8002cbe:	e01b      	b.n	8002cf8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002cc0:	897b      	ldrh	r3, [r7, #10]
 8002cc2:	11db      	asrs	r3, r3, #7
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	f003 0306 	and.w	r3, r3, #6
 8002cca:	b2db      	uxtb	r3, r3
 8002ccc:	f063 030f 	orn	r3, r3, #15
 8002cd0:	b2da      	uxtb	r2, r3
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	490e      	ldr	r1, [pc, #56]	; (8002d18 <I2C_MasterRequestWrite+0xfc>)
 8002cde:	68f8      	ldr	r0, [r7, #12]
 8002ce0:	f000 f943 	bl	8002f6a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d001      	beq.n	8002cee <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e010      	b.n	8002d10 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002cee:	897b      	ldrh	r3, [r7, #10]
 8002cf0:	b2da      	uxtb	r2, r3
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	687a      	ldr	r2, [r7, #4]
 8002cfc:	4907      	ldr	r1, [pc, #28]	; (8002d1c <I2C_MasterRequestWrite+0x100>)
 8002cfe:	68f8      	ldr	r0, [r7, #12]
 8002d00:	f000 f933 	bl	8002f6a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d04:	4603      	mov	r3, r0
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d001      	beq.n	8002d0e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e000      	b.n	8002d10 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002d0e:	2300      	movs	r3, #0
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	3718      	adds	r7, #24
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}
 8002d18:	00010008 	.word	0x00010008
 8002d1c:	00010002 	.word	0x00010002

08002d20 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b088      	sub	sp, #32
 8002d24:	af02      	add	r7, sp, #8
 8002d26:	60f8      	str	r0, [r7, #12]
 8002d28:	607a      	str	r2, [r7, #4]
 8002d2a:	603b      	str	r3, [r7, #0]
 8002d2c:	460b      	mov	r3, r1
 8002d2e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d34:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002d44:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	2b08      	cmp	r3, #8
 8002d4a:	d006      	beq.n	8002d5a <I2C_MasterRequestRead+0x3a>
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d003      	beq.n	8002d5a <I2C_MasterRequestRead+0x3a>
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002d58:	d108      	bne.n	8002d6c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d68:	601a      	str	r2, [r3, #0]
 8002d6a:	e00b      	b.n	8002d84 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d70:	2b11      	cmp	r3, #17
 8002d72:	d107      	bne.n	8002d84 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d82:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	9300      	str	r3, [sp, #0]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002d90:	68f8      	ldr	r0, [r7, #12]
 8002d92:	f000 f893 	bl	8002ebc <I2C_WaitOnFlagUntilTimeout>
 8002d96:	4603      	mov	r3, r0
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d00d      	beq.n	8002db8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002da6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002daa:	d103      	bne.n	8002db4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002db2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002db4:	2303      	movs	r3, #3
 8002db6:	e079      	b.n	8002eac <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	691b      	ldr	r3, [r3, #16]
 8002dbc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002dc0:	d108      	bne.n	8002dd4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002dc2:	897b      	ldrh	r3, [r7, #10]
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	f043 0301 	orr.w	r3, r3, #1
 8002dca:	b2da      	uxtb	r2, r3
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	611a      	str	r2, [r3, #16]
 8002dd2:	e05f      	b.n	8002e94 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002dd4:	897b      	ldrh	r3, [r7, #10]
 8002dd6:	11db      	asrs	r3, r3, #7
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	f003 0306 	and.w	r3, r3, #6
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	f063 030f 	orn	r3, r3, #15
 8002de4:	b2da      	uxtb	r2, r3
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	687a      	ldr	r2, [r7, #4]
 8002df0:	4930      	ldr	r1, [pc, #192]	; (8002eb4 <I2C_MasterRequestRead+0x194>)
 8002df2:	68f8      	ldr	r0, [r7, #12]
 8002df4:	f000 f8b9 	bl	8002f6a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d001      	beq.n	8002e02 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e054      	b.n	8002eac <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002e02:	897b      	ldrh	r3, [r7, #10]
 8002e04:	b2da      	uxtb	r2, r3
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	4929      	ldr	r1, [pc, #164]	; (8002eb8 <I2C_MasterRequestRead+0x198>)
 8002e12:	68f8      	ldr	r0, [r7, #12]
 8002e14:	f000 f8a9 	bl	8002f6a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d001      	beq.n	8002e22 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e044      	b.n	8002eac <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e22:	2300      	movs	r3, #0
 8002e24:	613b      	str	r3, [r7, #16]
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	695b      	ldr	r3, [r3, #20]
 8002e2c:	613b      	str	r3, [r7, #16]
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	699b      	ldr	r3, [r3, #24]
 8002e34:	613b      	str	r3, [r7, #16]
 8002e36:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e46:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	9300      	str	r3, [sp, #0]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002e54:	68f8      	ldr	r0, [r7, #12]
 8002e56:	f000 f831 	bl	8002ebc <I2C_WaitOnFlagUntilTimeout>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d00d      	beq.n	8002e7c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e6e:	d103      	bne.n	8002e78 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e76:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002e78:	2303      	movs	r3, #3
 8002e7a:	e017      	b.n	8002eac <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002e7c:	897b      	ldrh	r3, [r7, #10]
 8002e7e:	11db      	asrs	r3, r3, #7
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	f003 0306 	and.w	r3, r3, #6
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	f063 030e 	orn	r3, r3, #14
 8002e8c:	b2da      	uxtb	r2, r3
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	687a      	ldr	r2, [r7, #4]
 8002e98:	4907      	ldr	r1, [pc, #28]	; (8002eb8 <I2C_MasterRequestRead+0x198>)
 8002e9a:	68f8      	ldr	r0, [r7, #12]
 8002e9c:	f000 f865 	bl	8002f6a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d001      	beq.n	8002eaa <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e000      	b.n	8002eac <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002eaa:	2300      	movs	r3, #0
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	3718      	adds	r7, #24
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}
 8002eb4:	00010008 	.word	0x00010008
 8002eb8:	00010002 	.word	0x00010002

08002ebc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b084      	sub	sp, #16
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	60f8      	str	r0, [r7, #12]
 8002ec4:	60b9      	str	r1, [r7, #8]
 8002ec6:	603b      	str	r3, [r7, #0]
 8002ec8:	4613      	mov	r3, r2
 8002eca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ecc:	e025      	b.n	8002f1a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ed4:	d021      	beq.n	8002f1a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ed6:	f7fe ff6f 	bl	8001db8 <HAL_GetTick>
 8002eda:	4602      	mov	r2, r0
 8002edc:	69bb      	ldr	r3, [r7, #24]
 8002ede:	1ad3      	subs	r3, r2, r3
 8002ee0:	683a      	ldr	r2, [r7, #0]
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	d302      	bcc.n	8002eec <I2C_WaitOnFlagUntilTimeout+0x30>
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d116      	bne.n	8002f1a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2220      	movs	r2, #32
 8002ef6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2200      	movs	r2, #0
 8002efe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f06:	f043 0220 	orr.w	r2, r3, #32
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2200      	movs	r2, #0
 8002f12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e023      	b.n	8002f62 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	0c1b      	lsrs	r3, r3, #16
 8002f1e:	b2db      	uxtb	r3, r3
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d10d      	bne.n	8002f40 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	695b      	ldr	r3, [r3, #20]
 8002f2a:	43da      	mvns	r2, r3
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	4013      	ands	r3, r2
 8002f30:	b29b      	uxth	r3, r3
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	bf0c      	ite	eq
 8002f36:	2301      	moveq	r3, #1
 8002f38:	2300      	movne	r3, #0
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	461a      	mov	r2, r3
 8002f3e:	e00c      	b.n	8002f5a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	699b      	ldr	r3, [r3, #24]
 8002f46:	43da      	mvns	r2, r3
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	4013      	ands	r3, r2
 8002f4c:	b29b      	uxth	r3, r3
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	bf0c      	ite	eq
 8002f52:	2301      	moveq	r3, #1
 8002f54:	2300      	movne	r3, #0
 8002f56:	b2db      	uxtb	r3, r3
 8002f58:	461a      	mov	r2, r3
 8002f5a:	79fb      	ldrb	r3, [r7, #7]
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	d0b6      	beq.n	8002ece <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002f60:	2300      	movs	r3, #0
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3710      	adds	r7, #16
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}

08002f6a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002f6a:	b580      	push	{r7, lr}
 8002f6c:	b084      	sub	sp, #16
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	60f8      	str	r0, [r7, #12]
 8002f72:	60b9      	str	r1, [r7, #8]
 8002f74:	607a      	str	r2, [r7, #4]
 8002f76:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f78:	e051      	b.n	800301e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	695b      	ldr	r3, [r3, #20]
 8002f80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f88:	d123      	bne.n	8002fd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f98:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002fa2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2220      	movs	r2, #32
 8002fae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fbe:	f043 0204 	orr.w	r2, r3, #4
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e046      	b.n	8003060 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002fd8:	d021      	beq.n	800301e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fda:	f7fe feed 	bl	8001db8 <HAL_GetTick>
 8002fde:	4602      	mov	r2, r0
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	1ad3      	subs	r3, r2, r3
 8002fe4:	687a      	ldr	r2, [r7, #4]
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	d302      	bcc.n	8002ff0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d116      	bne.n	800301e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2220      	movs	r2, #32
 8002ffa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2200      	movs	r2, #0
 8003002:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300a:	f043 0220 	orr.w	r2, r3, #32
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2200      	movs	r2, #0
 8003016:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e020      	b.n	8003060 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	0c1b      	lsrs	r3, r3, #16
 8003022:	b2db      	uxtb	r3, r3
 8003024:	2b01      	cmp	r3, #1
 8003026:	d10c      	bne.n	8003042 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	695b      	ldr	r3, [r3, #20]
 800302e:	43da      	mvns	r2, r3
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	4013      	ands	r3, r2
 8003034:	b29b      	uxth	r3, r3
 8003036:	2b00      	cmp	r3, #0
 8003038:	bf14      	ite	ne
 800303a:	2301      	movne	r3, #1
 800303c:	2300      	moveq	r3, #0
 800303e:	b2db      	uxtb	r3, r3
 8003040:	e00b      	b.n	800305a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	699b      	ldr	r3, [r3, #24]
 8003048:	43da      	mvns	r2, r3
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	4013      	ands	r3, r2
 800304e:	b29b      	uxth	r3, r3
 8003050:	2b00      	cmp	r3, #0
 8003052:	bf14      	ite	ne
 8003054:	2301      	movne	r3, #1
 8003056:	2300      	moveq	r3, #0
 8003058:	b2db      	uxtb	r3, r3
 800305a:	2b00      	cmp	r3, #0
 800305c:	d18d      	bne.n	8002f7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800305e:	2300      	movs	r3, #0
}
 8003060:	4618      	mov	r0, r3
 8003062:	3710      	adds	r7, #16
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}

08003068 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b084      	sub	sp, #16
 800306c:	af00      	add	r7, sp, #0
 800306e:	60f8      	str	r0, [r7, #12]
 8003070:	60b9      	str	r1, [r7, #8]
 8003072:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003074:	e02d      	b.n	80030d2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003076:	68f8      	ldr	r0, [r7, #12]
 8003078:	f000 f8ce 	bl	8003218 <I2C_IsAcknowledgeFailed>
 800307c:	4603      	mov	r3, r0
 800307e:	2b00      	cmp	r3, #0
 8003080:	d001      	beq.n	8003086 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e02d      	b.n	80030e2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800308c:	d021      	beq.n	80030d2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800308e:	f7fe fe93 	bl	8001db8 <HAL_GetTick>
 8003092:	4602      	mov	r2, r0
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	1ad3      	subs	r3, r2, r3
 8003098:	68ba      	ldr	r2, [r7, #8]
 800309a:	429a      	cmp	r2, r3
 800309c:	d302      	bcc.n	80030a4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d116      	bne.n	80030d2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2200      	movs	r2, #0
 80030a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2220      	movs	r2, #32
 80030ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2200      	movs	r2, #0
 80030b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030be:	f043 0220 	orr.w	r2, r3, #32
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2200      	movs	r2, #0
 80030ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e007      	b.n	80030e2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	695b      	ldr	r3, [r3, #20]
 80030d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030dc:	2b80      	cmp	r3, #128	; 0x80
 80030de:	d1ca      	bne.n	8003076 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80030e0:	2300      	movs	r3, #0
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3710      	adds	r7, #16
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}

080030ea <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030ea:	b580      	push	{r7, lr}
 80030ec:	b084      	sub	sp, #16
 80030ee:	af00      	add	r7, sp, #0
 80030f0:	60f8      	str	r0, [r7, #12]
 80030f2:	60b9      	str	r1, [r7, #8]
 80030f4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80030f6:	e02d      	b.n	8003154 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80030f8:	68f8      	ldr	r0, [r7, #12]
 80030fa:	f000 f88d 	bl	8003218 <I2C_IsAcknowledgeFailed>
 80030fe:	4603      	mov	r3, r0
 8003100:	2b00      	cmp	r3, #0
 8003102:	d001      	beq.n	8003108 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	e02d      	b.n	8003164 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800310e:	d021      	beq.n	8003154 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003110:	f7fe fe52 	bl	8001db8 <HAL_GetTick>
 8003114:	4602      	mov	r2, r0
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	68ba      	ldr	r2, [r7, #8]
 800311c:	429a      	cmp	r2, r3
 800311e:	d302      	bcc.n	8003126 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d116      	bne.n	8003154 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2200      	movs	r2, #0
 800312a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2220      	movs	r2, #32
 8003130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2200      	movs	r2, #0
 8003138:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003140:	f043 0220 	orr.w	r2, r3, #32
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2200      	movs	r2, #0
 800314c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	e007      	b.n	8003164 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	695b      	ldr	r3, [r3, #20]
 800315a:	f003 0304 	and.w	r3, r3, #4
 800315e:	2b04      	cmp	r3, #4
 8003160:	d1ca      	bne.n	80030f8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003162:	2300      	movs	r3, #0
}
 8003164:	4618      	mov	r0, r3
 8003166:	3710      	adds	r7, #16
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}

0800316c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b084      	sub	sp, #16
 8003170:	af00      	add	r7, sp, #0
 8003172:	60f8      	str	r0, [r7, #12]
 8003174:	60b9      	str	r1, [r7, #8]
 8003176:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003178:	e042      	b.n	8003200 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	695b      	ldr	r3, [r3, #20]
 8003180:	f003 0310 	and.w	r3, r3, #16
 8003184:	2b10      	cmp	r3, #16
 8003186:	d119      	bne.n	80031bc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f06f 0210 	mvn.w	r2, #16
 8003190:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2200      	movs	r2, #0
 8003196:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	2220      	movs	r2, #32
 800319c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2200      	movs	r2, #0
 80031a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2200      	movs	r2, #0
 80031b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	e029      	b.n	8003210 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031bc:	f7fe fdfc 	bl	8001db8 <HAL_GetTick>
 80031c0:	4602      	mov	r2, r0
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	68ba      	ldr	r2, [r7, #8]
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d302      	bcc.n	80031d2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d116      	bne.n	8003200 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2200      	movs	r2, #0
 80031d6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2220      	movs	r2, #32
 80031dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2200      	movs	r2, #0
 80031e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ec:	f043 0220 	orr.w	r2, r3, #32
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2200      	movs	r2, #0
 80031f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e007      	b.n	8003210 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	695b      	ldr	r3, [r3, #20]
 8003206:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800320a:	2b40      	cmp	r3, #64	; 0x40
 800320c:	d1b5      	bne.n	800317a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800320e:	2300      	movs	r3, #0
}
 8003210:	4618      	mov	r0, r3
 8003212:	3710      	adds	r7, #16
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}

08003218 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003218:	b480      	push	{r7}
 800321a:	b083      	sub	sp, #12
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	695b      	ldr	r3, [r3, #20]
 8003226:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800322a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800322e:	d11b      	bne.n	8003268 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003238:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2200      	movs	r2, #0
 800323e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2220      	movs	r2, #32
 8003244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2200      	movs	r2, #0
 800324c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003254:	f043 0204 	orr.w	r2, r3, #4
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2200      	movs	r2, #0
 8003260:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	e000      	b.n	800326a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003268:	2300      	movs	r3, #0
}
 800326a:	4618      	mov	r0, r3
 800326c:	370c      	adds	r7, #12
 800326e:	46bd      	mov	sp, r7
 8003270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003274:	4770      	bx	lr
	...

08003278 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b086      	sub	sp, #24
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d101      	bne.n	800328a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e267      	b.n	800375a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 0301 	and.w	r3, r3, #1
 8003292:	2b00      	cmp	r3, #0
 8003294:	d075      	beq.n	8003382 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003296:	4b88      	ldr	r3, [pc, #544]	; (80034b8 <HAL_RCC_OscConfig+0x240>)
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	f003 030c 	and.w	r3, r3, #12
 800329e:	2b04      	cmp	r3, #4
 80032a0:	d00c      	beq.n	80032bc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032a2:	4b85      	ldr	r3, [pc, #532]	; (80034b8 <HAL_RCC_OscConfig+0x240>)
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80032aa:	2b08      	cmp	r3, #8
 80032ac:	d112      	bne.n	80032d4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032ae:	4b82      	ldr	r3, [pc, #520]	; (80034b8 <HAL_RCC_OscConfig+0x240>)
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032ba:	d10b      	bne.n	80032d4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032bc:	4b7e      	ldr	r3, [pc, #504]	; (80034b8 <HAL_RCC_OscConfig+0x240>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d05b      	beq.n	8003380 <HAL_RCC_OscConfig+0x108>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d157      	bne.n	8003380 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	e242      	b.n	800375a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032dc:	d106      	bne.n	80032ec <HAL_RCC_OscConfig+0x74>
 80032de:	4b76      	ldr	r3, [pc, #472]	; (80034b8 <HAL_RCC_OscConfig+0x240>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a75      	ldr	r2, [pc, #468]	; (80034b8 <HAL_RCC_OscConfig+0x240>)
 80032e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032e8:	6013      	str	r3, [r2, #0]
 80032ea:	e01d      	b.n	8003328 <HAL_RCC_OscConfig+0xb0>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032f4:	d10c      	bne.n	8003310 <HAL_RCC_OscConfig+0x98>
 80032f6:	4b70      	ldr	r3, [pc, #448]	; (80034b8 <HAL_RCC_OscConfig+0x240>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a6f      	ldr	r2, [pc, #444]	; (80034b8 <HAL_RCC_OscConfig+0x240>)
 80032fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003300:	6013      	str	r3, [r2, #0]
 8003302:	4b6d      	ldr	r3, [pc, #436]	; (80034b8 <HAL_RCC_OscConfig+0x240>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a6c      	ldr	r2, [pc, #432]	; (80034b8 <HAL_RCC_OscConfig+0x240>)
 8003308:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800330c:	6013      	str	r3, [r2, #0]
 800330e:	e00b      	b.n	8003328 <HAL_RCC_OscConfig+0xb0>
 8003310:	4b69      	ldr	r3, [pc, #420]	; (80034b8 <HAL_RCC_OscConfig+0x240>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a68      	ldr	r2, [pc, #416]	; (80034b8 <HAL_RCC_OscConfig+0x240>)
 8003316:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800331a:	6013      	str	r3, [r2, #0]
 800331c:	4b66      	ldr	r3, [pc, #408]	; (80034b8 <HAL_RCC_OscConfig+0x240>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a65      	ldr	r2, [pc, #404]	; (80034b8 <HAL_RCC_OscConfig+0x240>)
 8003322:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003326:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d013      	beq.n	8003358 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003330:	f7fe fd42 	bl	8001db8 <HAL_GetTick>
 8003334:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003336:	e008      	b.n	800334a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003338:	f7fe fd3e 	bl	8001db8 <HAL_GetTick>
 800333c:	4602      	mov	r2, r0
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	1ad3      	subs	r3, r2, r3
 8003342:	2b64      	cmp	r3, #100	; 0x64
 8003344:	d901      	bls.n	800334a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003346:	2303      	movs	r3, #3
 8003348:	e207      	b.n	800375a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800334a:	4b5b      	ldr	r3, [pc, #364]	; (80034b8 <HAL_RCC_OscConfig+0x240>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003352:	2b00      	cmp	r3, #0
 8003354:	d0f0      	beq.n	8003338 <HAL_RCC_OscConfig+0xc0>
 8003356:	e014      	b.n	8003382 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003358:	f7fe fd2e 	bl	8001db8 <HAL_GetTick>
 800335c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800335e:	e008      	b.n	8003372 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003360:	f7fe fd2a 	bl	8001db8 <HAL_GetTick>
 8003364:	4602      	mov	r2, r0
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	2b64      	cmp	r3, #100	; 0x64
 800336c:	d901      	bls.n	8003372 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800336e:	2303      	movs	r3, #3
 8003370:	e1f3      	b.n	800375a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003372:	4b51      	ldr	r3, [pc, #324]	; (80034b8 <HAL_RCC_OscConfig+0x240>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800337a:	2b00      	cmp	r3, #0
 800337c:	d1f0      	bne.n	8003360 <HAL_RCC_OscConfig+0xe8>
 800337e:	e000      	b.n	8003382 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003380:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 0302 	and.w	r3, r3, #2
 800338a:	2b00      	cmp	r3, #0
 800338c:	d063      	beq.n	8003456 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800338e:	4b4a      	ldr	r3, [pc, #296]	; (80034b8 <HAL_RCC_OscConfig+0x240>)
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	f003 030c 	and.w	r3, r3, #12
 8003396:	2b00      	cmp	r3, #0
 8003398:	d00b      	beq.n	80033b2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800339a:	4b47      	ldr	r3, [pc, #284]	; (80034b8 <HAL_RCC_OscConfig+0x240>)
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80033a2:	2b08      	cmp	r3, #8
 80033a4:	d11c      	bne.n	80033e0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033a6:	4b44      	ldr	r3, [pc, #272]	; (80034b8 <HAL_RCC_OscConfig+0x240>)
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d116      	bne.n	80033e0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033b2:	4b41      	ldr	r3, [pc, #260]	; (80034b8 <HAL_RCC_OscConfig+0x240>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 0302 	and.w	r3, r3, #2
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d005      	beq.n	80033ca <HAL_RCC_OscConfig+0x152>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	68db      	ldr	r3, [r3, #12]
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d001      	beq.n	80033ca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e1c7      	b.n	800375a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033ca:	4b3b      	ldr	r3, [pc, #236]	; (80034b8 <HAL_RCC_OscConfig+0x240>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	691b      	ldr	r3, [r3, #16]
 80033d6:	00db      	lsls	r3, r3, #3
 80033d8:	4937      	ldr	r1, [pc, #220]	; (80034b8 <HAL_RCC_OscConfig+0x240>)
 80033da:	4313      	orrs	r3, r2
 80033dc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033de:	e03a      	b.n	8003456 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d020      	beq.n	800342a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033e8:	4b34      	ldr	r3, [pc, #208]	; (80034bc <HAL_RCC_OscConfig+0x244>)
 80033ea:	2201      	movs	r2, #1
 80033ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033ee:	f7fe fce3 	bl	8001db8 <HAL_GetTick>
 80033f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033f4:	e008      	b.n	8003408 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033f6:	f7fe fcdf 	bl	8001db8 <HAL_GetTick>
 80033fa:	4602      	mov	r2, r0
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	1ad3      	subs	r3, r2, r3
 8003400:	2b02      	cmp	r3, #2
 8003402:	d901      	bls.n	8003408 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003404:	2303      	movs	r3, #3
 8003406:	e1a8      	b.n	800375a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003408:	4b2b      	ldr	r3, [pc, #172]	; (80034b8 <HAL_RCC_OscConfig+0x240>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 0302 	and.w	r3, r3, #2
 8003410:	2b00      	cmp	r3, #0
 8003412:	d0f0      	beq.n	80033f6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003414:	4b28      	ldr	r3, [pc, #160]	; (80034b8 <HAL_RCC_OscConfig+0x240>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	691b      	ldr	r3, [r3, #16]
 8003420:	00db      	lsls	r3, r3, #3
 8003422:	4925      	ldr	r1, [pc, #148]	; (80034b8 <HAL_RCC_OscConfig+0x240>)
 8003424:	4313      	orrs	r3, r2
 8003426:	600b      	str	r3, [r1, #0]
 8003428:	e015      	b.n	8003456 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800342a:	4b24      	ldr	r3, [pc, #144]	; (80034bc <HAL_RCC_OscConfig+0x244>)
 800342c:	2200      	movs	r2, #0
 800342e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003430:	f7fe fcc2 	bl	8001db8 <HAL_GetTick>
 8003434:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003436:	e008      	b.n	800344a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003438:	f7fe fcbe 	bl	8001db8 <HAL_GetTick>
 800343c:	4602      	mov	r2, r0
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	1ad3      	subs	r3, r2, r3
 8003442:	2b02      	cmp	r3, #2
 8003444:	d901      	bls.n	800344a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003446:	2303      	movs	r3, #3
 8003448:	e187      	b.n	800375a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800344a:	4b1b      	ldr	r3, [pc, #108]	; (80034b8 <HAL_RCC_OscConfig+0x240>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 0302 	and.w	r3, r3, #2
 8003452:	2b00      	cmp	r3, #0
 8003454:	d1f0      	bne.n	8003438 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 0308 	and.w	r3, r3, #8
 800345e:	2b00      	cmp	r3, #0
 8003460:	d036      	beq.n	80034d0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	695b      	ldr	r3, [r3, #20]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d016      	beq.n	8003498 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800346a:	4b15      	ldr	r3, [pc, #84]	; (80034c0 <HAL_RCC_OscConfig+0x248>)
 800346c:	2201      	movs	r2, #1
 800346e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003470:	f7fe fca2 	bl	8001db8 <HAL_GetTick>
 8003474:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003476:	e008      	b.n	800348a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003478:	f7fe fc9e 	bl	8001db8 <HAL_GetTick>
 800347c:	4602      	mov	r2, r0
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	1ad3      	subs	r3, r2, r3
 8003482:	2b02      	cmp	r3, #2
 8003484:	d901      	bls.n	800348a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003486:	2303      	movs	r3, #3
 8003488:	e167      	b.n	800375a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800348a:	4b0b      	ldr	r3, [pc, #44]	; (80034b8 <HAL_RCC_OscConfig+0x240>)
 800348c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800348e:	f003 0302 	and.w	r3, r3, #2
 8003492:	2b00      	cmp	r3, #0
 8003494:	d0f0      	beq.n	8003478 <HAL_RCC_OscConfig+0x200>
 8003496:	e01b      	b.n	80034d0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003498:	4b09      	ldr	r3, [pc, #36]	; (80034c0 <HAL_RCC_OscConfig+0x248>)
 800349a:	2200      	movs	r2, #0
 800349c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800349e:	f7fe fc8b 	bl	8001db8 <HAL_GetTick>
 80034a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034a4:	e00e      	b.n	80034c4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034a6:	f7fe fc87 	bl	8001db8 <HAL_GetTick>
 80034aa:	4602      	mov	r2, r0
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	1ad3      	subs	r3, r2, r3
 80034b0:	2b02      	cmp	r3, #2
 80034b2:	d907      	bls.n	80034c4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80034b4:	2303      	movs	r3, #3
 80034b6:	e150      	b.n	800375a <HAL_RCC_OscConfig+0x4e2>
 80034b8:	40023800 	.word	0x40023800
 80034bc:	42470000 	.word	0x42470000
 80034c0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034c4:	4b88      	ldr	r3, [pc, #544]	; (80036e8 <HAL_RCC_OscConfig+0x470>)
 80034c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034c8:	f003 0302 	and.w	r3, r3, #2
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d1ea      	bne.n	80034a6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f003 0304 	and.w	r3, r3, #4
 80034d8:	2b00      	cmp	r3, #0
 80034da:	f000 8097 	beq.w	800360c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034de:	2300      	movs	r3, #0
 80034e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034e2:	4b81      	ldr	r3, [pc, #516]	; (80036e8 <HAL_RCC_OscConfig+0x470>)
 80034e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d10f      	bne.n	800350e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034ee:	2300      	movs	r3, #0
 80034f0:	60bb      	str	r3, [r7, #8]
 80034f2:	4b7d      	ldr	r3, [pc, #500]	; (80036e8 <HAL_RCC_OscConfig+0x470>)
 80034f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f6:	4a7c      	ldr	r2, [pc, #496]	; (80036e8 <HAL_RCC_OscConfig+0x470>)
 80034f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034fc:	6413      	str	r3, [r2, #64]	; 0x40
 80034fe:	4b7a      	ldr	r3, [pc, #488]	; (80036e8 <HAL_RCC_OscConfig+0x470>)
 8003500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003502:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003506:	60bb      	str	r3, [r7, #8]
 8003508:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800350a:	2301      	movs	r3, #1
 800350c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800350e:	4b77      	ldr	r3, [pc, #476]	; (80036ec <HAL_RCC_OscConfig+0x474>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003516:	2b00      	cmp	r3, #0
 8003518:	d118      	bne.n	800354c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800351a:	4b74      	ldr	r3, [pc, #464]	; (80036ec <HAL_RCC_OscConfig+0x474>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a73      	ldr	r2, [pc, #460]	; (80036ec <HAL_RCC_OscConfig+0x474>)
 8003520:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003524:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003526:	f7fe fc47 	bl	8001db8 <HAL_GetTick>
 800352a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800352c:	e008      	b.n	8003540 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800352e:	f7fe fc43 	bl	8001db8 <HAL_GetTick>
 8003532:	4602      	mov	r2, r0
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	1ad3      	subs	r3, r2, r3
 8003538:	2b02      	cmp	r3, #2
 800353a:	d901      	bls.n	8003540 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800353c:	2303      	movs	r3, #3
 800353e:	e10c      	b.n	800375a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003540:	4b6a      	ldr	r3, [pc, #424]	; (80036ec <HAL_RCC_OscConfig+0x474>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003548:	2b00      	cmp	r3, #0
 800354a:	d0f0      	beq.n	800352e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	2b01      	cmp	r3, #1
 8003552:	d106      	bne.n	8003562 <HAL_RCC_OscConfig+0x2ea>
 8003554:	4b64      	ldr	r3, [pc, #400]	; (80036e8 <HAL_RCC_OscConfig+0x470>)
 8003556:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003558:	4a63      	ldr	r2, [pc, #396]	; (80036e8 <HAL_RCC_OscConfig+0x470>)
 800355a:	f043 0301 	orr.w	r3, r3, #1
 800355e:	6713      	str	r3, [r2, #112]	; 0x70
 8003560:	e01c      	b.n	800359c <HAL_RCC_OscConfig+0x324>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	2b05      	cmp	r3, #5
 8003568:	d10c      	bne.n	8003584 <HAL_RCC_OscConfig+0x30c>
 800356a:	4b5f      	ldr	r3, [pc, #380]	; (80036e8 <HAL_RCC_OscConfig+0x470>)
 800356c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800356e:	4a5e      	ldr	r2, [pc, #376]	; (80036e8 <HAL_RCC_OscConfig+0x470>)
 8003570:	f043 0304 	orr.w	r3, r3, #4
 8003574:	6713      	str	r3, [r2, #112]	; 0x70
 8003576:	4b5c      	ldr	r3, [pc, #368]	; (80036e8 <HAL_RCC_OscConfig+0x470>)
 8003578:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800357a:	4a5b      	ldr	r2, [pc, #364]	; (80036e8 <HAL_RCC_OscConfig+0x470>)
 800357c:	f043 0301 	orr.w	r3, r3, #1
 8003580:	6713      	str	r3, [r2, #112]	; 0x70
 8003582:	e00b      	b.n	800359c <HAL_RCC_OscConfig+0x324>
 8003584:	4b58      	ldr	r3, [pc, #352]	; (80036e8 <HAL_RCC_OscConfig+0x470>)
 8003586:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003588:	4a57      	ldr	r2, [pc, #348]	; (80036e8 <HAL_RCC_OscConfig+0x470>)
 800358a:	f023 0301 	bic.w	r3, r3, #1
 800358e:	6713      	str	r3, [r2, #112]	; 0x70
 8003590:	4b55      	ldr	r3, [pc, #340]	; (80036e8 <HAL_RCC_OscConfig+0x470>)
 8003592:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003594:	4a54      	ldr	r2, [pc, #336]	; (80036e8 <HAL_RCC_OscConfig+0x470>)
 8003596:	f023 0304 	bic.w	r3, r3, #4
 800359a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d015      	beq.n	80035d0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035a4:	f7fe fc08 	bl	8001db8 <HAL_GetTick>
 80035a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035aa:	e00a      	b.n	80035c2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035ac:	f7fe fc04 	bl	8001db8 <HAL_GetTick>
 80035b0:	4602      	mov	r2, r0
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	1ad3      	subs	r3, r2, r3
 80035b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d901      	bls.n	80035c2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80035be:	2303      	movs	r3, #3
 80035c0:	e0cb      	b.n	800375a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035c2:	4b49      	ldr	r3, [pc, #292]	; (80036e8 <HAL_RCC_OscConfig+0x470>)
 80035c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035c6:	f003 0302 	and.w	r3, r3, #2
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d0ee      	beq.n	80035ac <HAL_RCC_OscConfig+0x334>
 80035ce:	e014      	b.n	80035fa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035d0:	f7fe fbf2 	bl	8001db8 <HAL_GetTick>
 80035d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035d6:	e00a      	b.n	80035ee <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035d8:	f7fe fbee 	bl	8001db8 <HAL_GetTick>
 80035dc:	4602      	mov	r2, r0
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	1ad3      	subs	r3, r2, r3
 80035e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d901      	bls.n	80035ee <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80035ea:	2303      	movs	r3, #3
 80035ec:	e0b5      	b.n	800375a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035ee:	4b3e      	ldr	r3, [pc, #248]	; (80036e8 <HAL_RCC_OscConfig+0x470>)
 80035f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035f2:	f003 0302 	and.w	r3, r3, #2
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d1ee      	bne.n	80035d8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80035fa:	7dfb      	ldrb	r3, [r7, #23]
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d105      	bne.n	800360c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003600:	4b39      	ldr	r3, [pc, #228]	; (80036e8 <HAL_RCC_OscConfig+0x470>)
 8003602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003604:	4a38      	ldr	r2, [pc, #224]	; (80036e8 <HAL_RCC_OscConfig+0x470>)
 8003606:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800360a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	699b      	ldr	r3, [r3, #24]
 8003610:	2b00      	cmp	r3, #0
 8003612:	f000 80a1 	beq.w	8003758 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003616:	4b34      	ldr	r3, [pc, #208]	; (80036e8 <HAL_RCC_OscConfig+0x470>)
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	f003 030c 	and.w	r3, r3, #12
 800361e:	2b08      	cmp	r3, #8
 8003620:	d05c      	beq.n	80036dc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	699b      	ldr	r3, [r3, #24]
 8003626:	2b02      	cmp	r3, #2
 8003628:	d141      	bne.n	80036ae <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800362a:	4b31      	ldr	r3, [pc, #196]	; (80036f0 <HAL_RCC_OscConfig+0x478>)
 800362c:	2200      	movs	r2, #0
 800362e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003630:	f7fe fbc2 	bl	8001db8 <HAL_GetTick>
 8003634:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003636:	e008      	b.n	800364a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003638:	f7fe fbbe 	bl	8001db8 <HAL_GetTick>
 800363c:	4602      	mov	r2, r0
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	1ad3      	subs	r3, r2, r3
 8003642:	2b02      	cmp	r3, #2
 8003644:	d901      	bls.n	800364a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003646:	2303      	movs	r3, #3
 8003648:	e087      	b.n	800375a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800364a:	4b27      	ldr	r3, [pc, #156]	; (80036e8 <HAL_RCC_OscConfig+0x470>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003652:	2b00      	cmp	r3, #0
 8003654:	d1f0      	bne.n	8003638 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	69da      	ldr	r2, [r3, #28]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6a1b      	ldr	r3, [r3, #32]
 800365e:	431a      	orrs	r2, r3
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003664:	019b      	lsls	r3, r3, #6
 8003666:	431a      	orrs	r2, r3
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800366c:	085b      	lsrs	r3, r3, #1
 800366e:	3b01      	subs	r3, #1
 8003670:	041b      	lsls	r3, r3, #16
 8003672:	431a      	orrs	r2, r3
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003678:	061b      	lsls	r3, r3, #24
 800367a:	491b      	ldr	r1, [pc, #108]	; (80036e8 <HAL_RCC_OscConfig+0x470>)
 800367c:	4313      	orrs	r3, r2
 800367e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003680:	4b1b      	ldr	r3, [pc, #108]	; (80036f0 <HAL_RCC_OscConfig+0x478>)
 8003682:	2201      	movs	r2, #1
 8003684:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003686:	f7fe fb97 	bl	8001db8 <HAL_GetTick>
 800368a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800368c:	e008      	b.n	80036a0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800368e:	f7fe fb93 	bl	8001db8 <HAL_GetTick>
 8003692:	4602      	mov	r2, r0
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	1ad3      	subs	r3, r2, r3
 8003698:	2b02      	cmp	r3, #2
 800369a:	d901      	bls.n	80036a0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800369c:	2303      	movs	r3, #3
 800369e:	e05c      	b.n	800375a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036a0:	4b11      	ldr	r3, [pc, #68]	; (80036e8 <HAL_RCC_OscConfig+0x470>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d0f0      	beq.n	800368e <HAL_RCC_OscConfig+0x416>
 80036ac:	e054      	b.n	8003758 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036ae:	4b10      	ldr	r3, [pc, #64]	; (80036f0 <HAL_RCC_OscConfig+0x478>)
 80036b0:	2200      	movs	r2, #0
 80036b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036b4:	f7fe fb80 	bl	8001db8 <HAL_GetTick>
 80036b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036ba:	e008      	b.n	80036ce <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036bc:	f7fe fb7c 	bl	8001db8 <HAL_GetTick>
 80036c0:	4602      	mov	r2, r0
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	1ad3      	subs	r3, r2, r3
 80036c6:	2b02      	cmp	r3, #2
 80036c8:	d901      	bls.n	80036ce <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80036ca:	2303      	movs	r3, #3
 80036cc:	e045      	b.n	800375a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036ce:	4b06      	ldr	r3, [pc, #24]	; (80036e8 <HAL_RCC_OscConfig+0x470>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d1f0      	bne.n	80036bc <HAL_RCC_OscConfig+0x444>
 80036da:	e03d      	b.n	8003758 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	699b      	ldr	r3, [r3, #24]
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	d107      	bne.n	80036f4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	e038      	b.n	800375a <HAL_RCC_OscConfig+0x4e2>
 80036e8:	40023800 	.word	0x40023800
 80036ec:	40007000 	.word	0x40007000
 80036f0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80036f4:	4b1b      	ldr	r3, [pc, #108]	; (8003764 <HAL_RCC_OscConfig+0x4ec>)
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	699b      	ldr	r3, [r3, #24]
 80036fe:	2b01      	cmp	r3, #1
 8003700:	d028      	beq.n	8003754 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800370c:	429a      	cmp	r2, r3
 800370e:	d121      	bne.n	8003754 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800371a:	429a      	cmp	r2, r3
 800371c:	d11a      	bne.n	8003754 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800371e:	68fa      	ldr	r2, [r7, #12]
 8003720:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003724:	4013      	ands	r3, r2
 8003726:	687a      	ldr	r2, [r7, #4]
 8003728:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800372a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800372c:	4293      	cmp	r3, r2
 800372e:	d111      	bne.n	8003754 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800373a:	085b      	lsrs	r3, r3, #1
 800373c:	3b01      	subs	r3, #1
 800373e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003740:	429a      	cmp	r2, r3
 8003742:	d107      	bne.n	8003754 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800374e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003750:	429a      	cmp	r2, r3
 8003752:	d001      	beq.n	8003758 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	e000      	b.n	800375a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003758:	2300      	movs	r3, #0
}
 800375a:	4618      	mov	r0, r3
 800375c:	3718      	adds	r7, #24
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}
 8003762:	bf00      	nop
 8003764:	40023800 	.word	0x40023800

08003768 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b084      	sub	sp, #16
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
 8003770:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d101      	bne.n	800377c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	e0cc      	b.n	8003916 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800377c:	4b68      	ldr	r3, [pc, #416]	; (8003920 <HAL_RCC_ClockConfig+0x1b8>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 0307 	and.w	r3, r3, #7
 8003784:	683a      	ldr	r2, [r7, #0]
 8003786:	429a      	cmp	r2, r3
 8003788:	d90c      	bls.n	80037a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800378a:	4b65      	ldr	r3, [pc, #404]	; (8003920 <HAL_RCC_ClockConfig+0x1b8>)
 800378c:	683a      	ldr	r2, [r7, #0]
 800378e:	b2d2      	uxtb	r2, r2
 8003790:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003792:	4b63      	ldr	r3, [pc, #396]	; (8003920 <HAL_RCC_ClockConfig+0x1b8>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 0307 	and.w	r3, r3, #7
 800379a:	683a      	ldr	r2, [r7, #0]
 800379c:	429a      	cmp	r2, r3
 800379e:	d001      	beq.n	80037a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	e0b8      	b.n	8003916 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 0302 	and.w	r3, r3, #2
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d020      	beq.n	80037f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 0304 	and.w	r3, r3, #4
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d005      	beq.n	80037c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037bc:	4b59      	ldr	r3, [pc, #356]	; (8003924 <HAL_RCC_ClockConfig+0x1bc>)
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	4a58      	ldr	r2, [pc, #352]	; (8003924 <HAL_RCC_ClockConfig+0x1bc>)
 80037c2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80037c6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 0308 	and.w	r3, r3, #8
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d005      	beq.n	80037e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80037d4:	4b53      	ldr	r3, [pc, #332]	; (8003924 <HAL_RCC_ClockConfig+0x1bc>)
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	4a52      	ldr	r2, [pc, #328]	; (8003924 <HAL_RCC_ClockConfig+0x1bc>)
 80037da:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80037de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037e0:	4b50      	ldr	r3, [pc, #320]	; (8003924 <HAL_RCC_ClockConfig+0x1bc>)
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	494d      	ldr	r1, [pc, #308]	; (8003924 <HAL_RCC_ClockConfig+0x1bc>)
 80037ee:	4313      	orrs	r3, r2
 80037f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 0301 	and.w	r3, r3, #1
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d044      	beq.n	8003888 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	2b01      	cmp	r3, #1
 8003804:	d107      	bne.n	8003816 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003806:	4b47      	ldr	r3, [pc, #284]	; (8003924 <HAL_RCC_ClockConfig+0x1bc>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800380e:	2b00      	cmp	r3, #0
 8003810:	d119      	bne.n	8003846 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e07f      	b.n	8003916 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	2b02      	cmp	r3, #2
 800381c:	d003      	beq.n	8003826 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003822:	2b03      	cmp	r3, #3
 8003824:	d107      	bne.n	8003836 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003826:	4b3f      	ldr	r3, [pc, #252]	; (8003924 <HAL_RCC_ClockConfig+0x1bc>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800382e:	2b00      	cmp	r3, #0
 8003830:	d109      	bne.n	8003846 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	e06f      	b.n	8003916 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003836:	4b3b      	ldr	r3, [pc, #236]	; (8003924 <HAL_RCC_ClockConfig+0x1bc>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 0302 	and.w	r3, r3, #2
 800383e:	2b00      	cmp	r3, #0
 8003840:	d101      	bne.n	8003846 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e067      	b.n	8003916 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003846:	4b37      	ldr	r3, [pc, #220]	; (8003924 <HAL_RCC_ClockConfig+0x1bc>)
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	f023 0203 	bic.w	r2, r3, #3
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	4934      	ldr	r1, [pc, #208]	; (8003924 <HAL_RCC_ClockConfig+0x1bc>)
 8003854:	4313      	orrs	r3, r2
 8003856:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003858:	f7fe faae 	bl	8001db8 <HAL_GetTick>
 800385c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800385e:	e00a      	b.n	8003876 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003860:	f7fe faaa 	bl	8001db8 <HAL_GetTick>
 8003864:	4602      	mov	r2, r0
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	1ad3      	subs	r3, r2, r3
 800386a:	f241 3288 	movw	r2, #5000	; 0x1388
 800386e:	4293      	cmp	r3, r2
 8003870:	d901      	bls.n	8003876 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003872:	2303      	movs	r3, #3
 8003874:	e04f      	b.n	8003916 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003876:	4b2b      	ldr	r3, [pc, #172]	; (8003924 <HAL_RCC_ClockConfig+0x1bc>)
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	f003 020c 	and.w	r2, r3, #12
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	429a      	cmp	r2, r3
 8003886:	d1eb      	bne.n	8003860 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003888:	4b25      	ldr	r3, [pc, #148]	; (8003920 <HAL_RCC_ClockConfig+0x1b8>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 0307 	and.w	r3, r3, #7
 8003890:	683a      	ldr	r2, [r7, #0]
 8003892:	429a      	cmp	r2, r3
 8003894:	d20c      	bcs.n	80038b0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003896:	4b22      	ldr	r3, [pc, #136]	; (8003920 <HAL_RCC_ClockConfig+0x1b8>)
 8003898:	683a      	ldr	r2, [r7, #0]
 800389a:	b2d2      	uxtb	r2, r2
 800389c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800389e:	4b20      	ldr	r3, [pc, #128]	; (8003920 <HAL_RCC_ClockConfig+0x1b8>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 0307 	and.w	r3, r3, #7
 80038a6:	683a      	ldr	r2, [r7, #0]
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d001      	beq.n	80038b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	e032      	b.n	8003916 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 0304 	and.w	r3, r3, #4
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d008      	beq.n	80038ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038bc:	4b19      	ldr	r3, [pc, #100]	; (8003924 <HAL_RCC_ClockConfig+0x1bc>)
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	68db      	ldr	r3, [r3, #12]
 80038c8:	4916      	ldr	r1, [pc, #88]	; (8003924 <HAL_RCC_ClockConfig+0x1bc>)
 80038ca:	4313      	orrs	r3, r2
 80038cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 0308 	and.w	r3, r3, #8
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d009      	beq.n	80038ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80038da:	4b12      	ldr	r3, [pc, #72]	; (8003924 <HAL_RCC_ClockConfig+0x1bc>)
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	691b      	ldr	r3, [r3, #16]
 80038e6:	00db      	lsls	r3, r3, #3
 80038e8:	490e      	ldr	r1, [pc, #56]	; (8003924 <HAL_RCC_ClockConfig+0x1bc>)
 80038ea:	4313      	orrs	r3, r2
 80038ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80038ee:	f000 f821 	bl	8003934 <HAL_RCC_GetSysClockFreq>
 80038f2:	4602      	mov	r2, r0
 80038f4:	4b0b      	ldr	r3, [pc, #44]	; (8003924 <HAL_RCC_ClockConfig+0x1bc>)
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	091b      	lsrs	r3, r3, #4
 80038fa:	f003 030f 	and.w	r3, r3, #15
 80038fe:	490a      	ldr	r1, [pc, #40]	; (8003928 <HAL_RCC_ClockConfig+0x1c0>)
 8003900:	5ccb      	ldrb	r3, [r1, r3]
 8003902:	fa22 f303 	lsr.w	r3, r2, r3
 8003906:	4a09      	ldr	r2, [pc, #36]	; (800392c <HAL_RCC_ClockConfig+0x1c4>)
 8003908:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800390a:	4b09      	ldr	r3, [pc, #36]	; (8003930 <HAL_RCC_ClockConfig+0x1c8>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4618      	mov	r0, r3
 8003910:	f7fe f888 	bl	8001a24 <HAL_InitTick>

  return HAL_OK;
 8003914:	2300      	movs	r3, #0
}
 8003916:	4618      	mov	r0, r3
 8003918:	3710      	adds	r7, #16
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
 800391e:	bf00      	nop
 8003920:	40023c00 	.word	0x40023c00
 8003924:	40023800 	.word	0x40023800
 8003928:	08008f20 	.word	0x08008f20
 800392c:	20000000 	.word	0x20000000
 8003930:	20000004 	.word	0x20000004

08003934 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003934:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003938:	b090      	sub	sp, #64	; 0x40
 800393a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800393c:	2300      	movs	r3, #0
 800393e:	637b      	str	r3, [r7, #52]	; 0x34
 8003940:	2300      	movs	r3, #0
 8003942:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003944:	2300      	movs	r3, #0
 8003946:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003948:	2300      	movs	r3, #0
 800394a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800394c:	4b59      	ldr	r3, [pc, #356]	; (8003ab4 <HAL_RCC_GetSysClockFreq+0x180>)
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	f003 030c 	and.w	r3, r3, #12
 8003954:	2b08      	cmp	r3, #8
 8003956:	d00d      	beq.n	8003974 <HAL_RCC_GetSysClockFreq+0x40>
 8003958:	2b08      	cmp	r3, #8
 800395a:	f200 80a1 	bhi.w	8003aa0 <HAL_RCC_GetSysClockFreq+0x16c>
 800395e:	2b00      	cmp	r3, #0
 8003960:	d002      	beq.n	8003968 <HAL_RCC_GetSysClockFreq+0x34>
 8003962:	2b04      	cmp	r3, #4
 8003964:	d003      	beq.n	800396e <HAL_RCC_GetSysClockFreq+0x3a>
 8003966:	e09b      	b.n	8003aa0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003968:	4b53      	ldr	r3, [pc, #332]	; (8003ab8 <HAL_RCC_GetSysClockFreq+0x184>)
 800396a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800396c:	e09b      	b.n	8003aa6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800396e:	4b53      	ldr	r3, [pc, #332]	; (8003abc <HAL_RCC_GetSysClockFreq+0x188>)
 8003970:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003972:	e098      	b.n	8003aa6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003974:	4b4f      	ldr	r3, [pc, #316]	; (8003ab4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800397c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800397e:	4b4d      	ldr	r3, [pc, #308]	; (8003ab4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003986:	2b00      	cmp	r3, #0
 8003988:	d028      	beq.n	80039dc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800398a:	4b4a      	ldr	r3, [pc, #296]	; (8003ab4 <HAL_RCC_GetSysClockFreq+0x180>)
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	099b      	lsrs	r3, r3, #6
 8003990:	2200      	movs	r2, #0
 8003992:	623b      	str	r3, [r7, #32]
 8003994:	627a      	str	r2, [r7, #36]	; 0x24
 8003996:	6a3b      	ldr	r3, [r7, #32]
 8003998:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800399c:	2100      	movs	r1, #0
 800399e:	4b47      	ldr	r3, [pc, #284]	; (8003abc <HAL_RCC_GetSysClockFreq+0x188>)
 80039a0:	fb03 f201 	mul.w	r2, r3, r1
 80039a4:	2300      	movs	r3, #0
 80039a6:	fb00 f303 	mul.w	r3, r0, r3
 80039aa:	4413      	add	r3, r2
 80039ac:	4a43      	ldr	r2, [pc, #268]	; (8003abc <HAL_RCC_GetSysClockFreq+0x188>)
 80039ae:	fba0 1202 	umull	r1, r2, r0, r2
 80039b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80039b4:	460a      	mov	r2, r1
 80039b6:	62ba      	str	r2, [r7, #40]	; 0x28
 80039b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039ba:	4413      	add	r3, r2
 80039bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039c0:	2200      	movs	r2, #0
 80039c2:	61bb      	str	r3, [r7, #24]
 80039c4:	61fa      	str	r2, [r7, #28]
 80039c6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80039ca:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80039ce:	f7fd f943 	bl	8000c58 <__aeabi_uldivmod>
 80039d2:	4602      	mov	r2, r0
 80039d4:	460b      	mov	r3, r1
 80039d6:	4613      	mov	r3, r2
 80039d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80039da:	e053      	b.n	8003a84 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039dc:	4b35      	ldr	r3, [pc, #212]	; (8003ab4 <HAL_RCC_GetSysClockFreq+0x180>)
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	099b      	lsrs	r3, r3, #6
 80039e2:	2200      	movs	r2, #0
 80039e4:	613b      	str	r3, [r7, #16]
 80039e6:	617a      	str	r2, [r7, #20]
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80039ee:	f04f 0b00 	mov.w	fp, #0
 80039f2:	4652      	mov	r2, sl
 80039f4:	465b      	mov	r3, fp
 80039f6:	f04f 0000 	mov.w	r0, #0
 80039fa:	f04f 0100 	mov.w	r1, #0
 80039fe:	0159      	lsls	r1, r3, #5
 8003a00:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a04:	0150      	lsls	r0, r2, #5
 8003a06:	4602      	mov	r2, r0
 8003a08:	460b      	mov	r3, r1
 8003a0a:	ebb2 080a 	subs.w	r8, r2, sl
 8003a0e:	eb63 090b 	sbc.w	r9, r3, fp
 8003a12:	f04f 0200 	mov.w	r2, #0
 8003a16:	f04f 0300 	mov.w	r3, #0
 8003a1a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003a1e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003a22:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003a26:	ebb2 0408 	subs.w	r4, r2, r8
 8003a2a:	eb63 0509 	sbc.w	r5, r3, r9
 8003a2e:	f04f 0200 	mov.w	r2, #0
 8003a32:	f04f 0300 	mov.w	r3, #0
 8003a36:	00eb      	lsls	r3, r5, #3
 8003a38:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a3c:	00e2      	lsls	r2, r4, #3
 8003a3e:	4614      	mov	r4, r2
 8003a40:	461d      	mov	r5, r3
 8003a42:	eb14 030a 	adds.w	r3, r4, sl
 8003a46:	603b      	str	r3, [r7, #0]
 8003a48:	eb45 030b 	adc.w	r3, r5, fp
 8003a4c:	607b      	str	r3, [r7, #4]
 8003a4e:	f04f 0200 	mov.w	r2, #0
 8003a52:	f04f 0300 	mov.w	r3, #0
 8003a56:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003a5a:	4629      	mov	r1, r5
 8003a5c:	028b      	lsls	r3, r1, #10
 8003a5e:	4621      	mov	r1, r4
 8003a60:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003a64:	4621      	mov	r1, r4
 8003a66:	028a      	lsls	r2, r1, #10
 8003a68:	4610      	mov	r0, r2
 8003a6a:	4619      	mov	r1, r3
 8003a6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a6e:	2200      	movs	r2, #0
 8003a70:	60bb      	str	r3, [r7, #8]
 8003a72:	60fa      	str	r2, [r7, #12]
 8003a74:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003a78:	f7fd f8ee 	bl	8000c58 <__aeabi_uldivmod>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	460b      	mov	r3, r1
 8003a80:	4613      	mov	r3, r2
 8003a82:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003a84:	4b0b      	ldr	r3, [pc, #44]	; (8003ab4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	0c1b      	lsrs	r3, r3, #16
 8003a8a:	f003 0303 	and.w	r3, r3, #3
 8003a8e:	3301      	adds	r3, #1
 8003a90:	005b      	lsls	r3, r3, #1
 8003a92:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003a94:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a98:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a9c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003a9e:	e002      	b.n	8003aa6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003aa0:	4b05      	ldr	r3, [pc, #20]	; (8003ab8 <HAL_RCC_GetSysClockFreq+0x184>)
 8003aa2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003aa4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	3740      	adds	r7, #64	; 0x40
 8003aac:	46bd      	mov	sp, r7
 8003aae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ab2:	bf00      	nop
 8003ab4:	40023800 	.word	0x40023800
 8003ab8:	00f42400 	.word	0x00f42400
 8003abc:	017d7840 	.word	0x017d7840

08003ac0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ac4:	4b03      	ldr	r3, [pc, #12]	; (8003ad4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	46bd      	mov	sp, r7
 8003acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad0:	4770      	bx	lr
 8003ad2:	bf00      	nop
 8003ad4:	20000000 	.word	0x20000000

08003ad8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003adc:	f7ff fff0 	bl	8003ac0 <HAL_RCC_GetHCLKFreq>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	4b05      	ldr	r3, [pc, #20]	; (8003af8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	0a9b      	lsrs	r3, r3, #10
 8003ae8:	f003 0307 	and.w	r3, r3, #7
 8003aec:	4903      	ldr	r1, [pc, #12]	; (8003afc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003aee:	5ccb      	ldrb	r3, [r1, r3]
 8003af0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	bd80      	pop	{r7, pc}
 8003af8:	40023800 	.word	0x40023800
 8003afc:	08008f30 	.word	0x08008f30

08003b00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003b04:	f7ff ffdc 	bl	8003ac0 <HAL_RCC_GetHCLKFreq>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	4b05      	ldr	r3, [pc, #20]	; (8003b20 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	0b5b      	lsrs	r3, r3, #13
 8003b10:	f003 0307 	and.w	r3, r3, #7
 8003b14:	4903      	ldr	r1, [pc, #12]	; (8003b24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b16:	5ccb      	ldrb	r3, [r1, r3]
 8003b18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	bd80      	pop	{r7, pc}
 8003b20:	40023800 	.word	0x40023800
 8003b24:	08008f30 	.word	0x08008f30

08003b28 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b083      	sub	sp, #12
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
 8003b30:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	220f      	movs	r2, #15
 8003b36:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003b38:	4b12      	ldr	r3, [pc, #72]	; (8003b84 <HAL_RCC_GetClockConfig+0x5c>)
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	f003 0203 	and.w	r2, r3, #3
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003b44:	4b0f      	ldr	r3, [pc, #60]	; (8003b84 <HAL_RCC_GetClockConfig+0x5c>)
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003b50:	4b0c      	ldr	r3, [pc, #48]	; (8003b84 <HAL_RCC_GetClockConfig+0x5c>)
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003b5c:	4b09      	ldr	r3, [pc, #36]	; (8003b84 <HAL_RCC_GetClockConfig+0x5c>)
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	08db      	lsrs	r3, r3, #3
 8003b62:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003b6a:	4b07      	ldr	r3, [pc, #28]	; (8003b88 <HAL_RCC_GetClockConfig+0x60>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f003 0207 	and.w	r2, r3, #7
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	601a      	str	r2, [r3, #0]
}
 8003b76:	bf00      	nop
 8003b78:	370c      	adds	r7, #12
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b80:	4770      	bx	lr
 8003b82:	bf00      	nop
 8003b84:	40023800 	.word	0x40023800
 8003b88:	40023c00 	.word	0x40023c00

08003b8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b082      	sub	sp, #8
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d101      	bne.n	8003b9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e041      	b.n	8003c22 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d106      	bne.n	8003bb8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2200      	movs	r2, #0
 8003bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f000 f839 	bl	8003c2a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2202      	movs	r2, #2
 8003bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	3304      	adds	r3, #4
 8003bc8:	4619      	mov	r1, r3
 8003bca:	4610      	mov	r0, r2
 8003bcc:	f000 f9ca 	bl	8003f64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2201      	movs	r2, #1
 8003be4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2201      	movs	r2, #1
 8003bec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2201      	movs	r2, #1
 8003c04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2201      	movs	r2, #1
 8003c14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c20:	2300      	movs	r3, #0
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	3708      	adds	r7, #8
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}

08003c2a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003c2a:	b480      	push	{r7}
 8003c2c:	b083      	sub	sp, #12
 8003c2e:	af00      	add	r7, sp, #0
 8003c30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003c32:	bf00      	nop
 8003c34:	370c      	adds	r7, #12
 8003c36:	46bd      	mov	sp, r7
 8003c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3c:	4770      	bx	lr
	...

08003c40 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b085      	sub	sp, #20
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d001      	beq.n	8003c58 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	e044      	b.n	8003ce2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2202      	movs	r2, #2
 8003c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	68da      	ldr	r2, [r3, #12]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f042 0201 	orr.w	r2, r2, #1
 8003c6e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a1e      	ldr	r2, [pc, #120]	; (8003cf0 <HAL_TIM_Base_Start_IT+0xb0>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d018      	beq.n	8003cac <HAL_TIM_Base_Start_IT+0x6c>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c82:	d013      	beq.n	8003cac <HAL_TIM_Base_Start_IT+0x6c>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a1a      	ldr	r2, [pc, #104]	; (8003cf4 <HAL_TIM_Base_Start_IT+0xb4>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d00e      	beq.n	8003cac <HAL_TIM_Base_Start_IT+0x6c>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a19      	ldr	r2, [pc, #100]	; (8003cf8 <HAL_TIM_Base_Start_IT+0xb8>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d009      	beq.n	8003cac <HAL_TIM_Base_Start_IT+0x6c>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a17      	ldr	r2, [pc, #92]	; (8003cfc <HAL_TIM_Base_Start_IT+0xbc>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d004      	beq.n	8003cac <HAL_TIM_Base_Start_IT+0x6c>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a16      	ldr	r2, [pc, #88]	; (8003d00 <HAL_TIM_Base_Start_IT+0xc0>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d111      	bne.n	8003cd0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	f003 0307 	and.w	r3, r3, #7
 8003cb6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2b06      	cmp	r3, #6
 8003cbc:	d010      	beq.n	8003ce0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f042 0201 	orr.w	r2, r2, #1
 8003ccc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cce:	e007      	b.n	8003ce0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f042 0201 	orr.w	r2, r2, #1
 8003cde:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ce0:	2300      	movs	r3, #0
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3714      	adds	r7, #20
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr
 8003cee:	bf00      	nop
 8003cf0:	40010000 	.word	0x40010000
 8003cf4:	40000400 	.word	0x40000400
 8003cf8:	40000800 	.word	0x40000800
 8003cfc:	40000c00 	.word	0x40000c00
 8003d00:	40014000 	.word	0x40014000

08003d04 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b082      	sub	sp, #8
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	691b      	ldr	r3, [r3, #16]
 8003d12:	f003 0302 	and.w	r3, r3, #2
 8003d16:	2b02      	cmp	r3, #2
 8003d18:	d122      	bne.n	8003d60 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	68db      	ldr	r3, [r3, #12]
 8003d20:	f003 0302 	and.w	r3, r3, #2
 8003d24:	2b02      	cmp	r3, #2
 8003d26:	d11b      	bne.n	8003d60 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f06f 0202 	mvn.w	r2, #2
 8003d30:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2201      	movs	r2, #1
 8003d36:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	699b      	ldr	r3, [r3, #24]
 8003d3e:	f003 0303 	and.w	r3, r3, #3
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d003      	beq.n	8003d4e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	f000 f8ee 	bl	8003f28 <HAL_TIM_IC_CaptureCallback>
 8003d4c:	e005      	b.n	8003d5a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	f000 f8e0 	bl	8003f14 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	f000 f8f1 	bl	8003f3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	691b      	ldr	r3, [r3, #16]
 8003d66:	f003 0304 	and.w	r3, r3, #4
 8003d6a:	2b04      	cmp	r3, #4
 8003d6c:	d122      	bne.n	8003db4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	f003 0304 	and.w	r3, r3, #4
 8003d78:	2b04      	cmp	r3, #4
 8003d7a:	d11b      	bne.n	8003db4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f06f 0204 	mvn.w	r2, #4
 8003d84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2202      	movs	r2, #2
 8003d8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	699b      	ldr	r3, [r3, #24]
 8003d92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d003      	beq.n	8003da2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	f000 f8c4 	bl	8003f28 <HAL_TIM_IC_CaptureCallback>
 8003da0:	e005      	b.n	8003dae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	f000 f8b6 	bl	8003f14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	f000 f8c7 	bl	8003f3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2200      	movs	r2, #0
 8003db2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	691b      	ldr	r3, [r3, #16]
 8003dba:	f003 0308 	and.w	r3, r3, #8
 8003dbe:	2b08      	cmp	r3, #8
 8003dc0:	d122      	bne.n	8003e08 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	68db      	ldr	r3, [r3, #12]
 8003dc8:	f003 0308 	and.w	r3, r3, #8
 8003dcc:	2b08      	cmp	r3, #8
 8003dce:	d11b      	bne.n	8003e08 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f06f 0208 	mvn.w	r2, #8
 8003dd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2204      	movs	r2, #4
 8003dde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	69db      	ldr	r3, [r3, #28]
 8003de6:	f003 0303 	and.w	r3, r3, #3
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d003      	beq.n	8003df6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f000 f89a 	bl	8003f28 <HAL_TIM_IC_CaptureCallback>
 8003df4:	e005      	b.n	8003e02 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f000 f88c 	bl	8003f14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	f000 f89d 	bl	8003f3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2200      	movs	r2, #0
 8003e06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	691b      	ldr	r3, [r3, #16]
 8003e0e:	f003 0310 	and.w	r3, r3, #16
 8003e12:	2b10      	cmp	r3, #16
 8003e14:	d122      	bne.n	8003e5c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	68db      	ldr	r3, [r3, #12]
 8003e1c:	f003 0310 	and.w	r3, r3, #16
 8003e20:	2b10      	cmp	r3, #16
 8003e22:	d11b      	bne.n	8003e5c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f06f 0210 	mvn.w	r2, #16
 8003e2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2208      	movs	r2, #8
 8003e32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	69db      	ldr	r3, [r3, #28]
 8003e3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d003      	beq.n	8003e4a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e42:	6878      	ldr	r0, [r7, #4]
 8003e44:	f000 f870 	bl	8003f28 <HAL_TIM_IC_CaptureCallback>
 8003e48:	e005      	b.n	8003e56 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f000 f862 	bl	8003f14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e50:	6878      	ldr	r0, [r7, #4]
 8003e52:	f000 f873 	bl	8003f3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	691b      	ldr	r3, [r3, #16]
 8003e62:	f003 0301 	and.w	r3, r3, #1
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	d10e      	bne.n	8003e88 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	68db      	ldr	r3, [r3, #12]
 8003e70:	f003 0301 	and.w	r3, r3, #1
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d107      	bne.n	8003e88 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f06f 0201 	mvn.w	r2, #1
 8003e80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f7fd fcc6 	bl	8001814 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	691b      	ldr	r3, [r3, #16]
 8003e8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e92:	2b80      	cmp	r3, #128	; 0x80
 8003e94:	d10e      	bne.n	8003eb4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ea0:	2b80      	cmp	r3, #128	; 0x80
 8003ea2:	d107      	bne.n	8003eb4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003eac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f000 f8e2 	bl	8004078 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	691b      	ldr	r3, [r3, #16]
 8003eba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ebe:	2b40      	cmp	r3, #64	; 0x40
 8003ec0:	d10e      	bne.n	8003ee0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	68db      	ldr	r3, [r3, #12]
 8003ec8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ecc:	2b40      	cmp	r3, #64	; 0x40
 8003ece:	d107      	bne.n	8003ee0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003ed8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f000 f838 	bl	8003f50 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	691b      	ldr	r3, [r3, #16]
 8003ee6:	f003 0320 	and.w	r3, r3, #32
 8003eea:	2b20      	cmp	r3, #32
 8003eec:	d10e      	bne.n	8003f0c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	68db      	ldr	r3, [r3, #12]
 8003ef4:	f003 0320 	and.w	r3, r3, #32
 8003ef8:	2b20      	cmp	r3, #32
 8003efa:	d107      	bne.n	8003f0c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f06f 0220 	mvn.w	r2, #32
 8003f04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	f000 f8ac 	bl	8004064 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f0c:	bf00      	nop
 8003f0e:	3708      	adds	r7, #8
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}

08003f14 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b083      	sub	sp, #12
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f1c:	bf00      	nop
 8003f1e:	370c      	adds	r7, #12
 8003f20:	46bd      	mov	sp, r7
 8003f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f26:	4770      	bx	lr

08003f28 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b083      	sub	sp, #12
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003f30:	bf00      	nop
 8003f32:	370c      	adds	r7, #12
 8003f34:	46bd      	mov	sp, r7
 8003f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3a:	4770      	bx	lr

08003f3c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b083      	sub	sp, #12
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003f44:	bf00      	nop
 8003f46:	370c      	adds	r7, #12
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4e:	4770      	bx	lr

08003f50 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b083      	sub	sp, #12
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f58:	bf00      	nop
 8003f5a:	370c      	adds	r7, #12
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr

08003f64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b085      	sub	sp, #20
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
 8003f6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	4a34      	ldr	r2, [pc, #208]	; (8004048 <TIM_Base_SetConfig+0xe4>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d00f      	beq.n	8003f9c <TIM_Base_SetConfig+0x38>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f82:	d00b      	beq.n	8003f9c <TIM_Base_SetConfig+0x38>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	4a31      	ldr	r2, [pc, #196]	; (800404c <TIM_Base_SetConfig+0xe8>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d007      	beq.n	8003f9c <TIM_Base_SetConfig+0x38>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	4a30      	ldr	r2, [pc, #192]	; (8004050 <TIM_Base_SetConfig+0xec>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d003      	beq.n	8003f9c <TIM_Base_SetConfig+0x38>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	4a2f      	ldr	r2, [pc, #188]	; (8004054 <TIM_Base_SetConfig+0xf0>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d108      	bne.n	8003fae <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fa2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	68fa      	ldr	r2, [r7, #12]
 8003faa:	4313      	orrs	r3, r2
 8003fac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	4a25      	ldr	r2, [pc, #148]	; (8004048 <TIM_Base_SetConfig+0xe4>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d01b      	beq.n	8003fee <TIM_Base_SetConfig+0x8a>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fbc:	d017      	beq.n	8003fee <TIM_Base_SetConfig+0x8a>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	4a22      	ldr	r2, [pc, #136]	; (800404c <TIM_Base_SetConfig+0xe8>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d013      	beq.n	8003fee <TIM_Base_SetConfig+0x8a>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	4a21      	ldr	r2, [pc, #132]	; (8004050 <TIM_Base_SetConfig+0xec>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d00f      	beq.n	8003fee <TIM_Base_SetConfig+0x8a>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	4a20      	ldr	r2, [pc, #128]	; (8004054 <TIM_Base_SetConfig+0xf0>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d00b      	beq.n	8003fee <TIM_Base_SetConfig+0x8a>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	4a1f      	ldr	r2, [pc, #124]	; (8004058 <TIM_Base_SetConfig+0xf4>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d007      	beq.n	8003fee <TIM_Base_SetConfig+0x8a>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	4a1e      	ldr	r2, [pc, #120]	; (800405c <TIM_Base_SetConfig+0xf8>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d003      	beq.n	8003fee <TIM_Base_SetConfig+0x8a>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	4a1d      	ldr	r2, [pc, #116]	; (8004060 <TIM_Base_SetConfig+0xfc>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d108      	bne.n	8004000 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ff4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	68db      	ldr	r3, [r3, #12]
 8003ffa:	68fa      	ldr	r2, [r7, #12]
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	695b      	ldr	r3, [r3, #20]
 800400a:	4313      	orrs	r3, r2
 800400c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	68fa      	ldr	r2, [r7, #12]
 8004012:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	689a      	ldr	r2, [r3, #8]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	4a08      	ldr	r2, [pc, #32]	; (8004048 <TIM_Base_SetConfig+0xe4>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d103      	bne.n	8004034 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	691a      	ldr	r2, [r3, #16]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2201      	movs	r2, #1
 8004038:	615a      	str	r2, [r3, #20]
}
 800403a:	bf00      	nop
 800403c:	3714      	adds	r7, #20
 800403e:	46bd      	mov	sp, r7
 8004040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004044:	4770      	bx	lr
 8004046:	bf00      	nop
 8004048:	40010000 	.word	0x40010000
 800404c:	40000400 	.word	0x40000400
 8004050:	40000800 	.word	0x40000800
 8004054:	40000c00 	.word	0x40000c00
 8004058:	40014000 	.word	0x40014000
 800405c:	40014400 	.word	0x40014400
 8004060:	40014800 	.word	0x40014800

08004064 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004064:	b480      	push	{r7}
 8004066:	b083      	sub	sp, #12
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800406c:	bf00      	nop
 800406e:	370c      	adds	r7, #12
 8004070:	46bd      	mov	sp, r7
 8004072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004076:	4770      	bx	lr

08004078 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004078:	b480      	push	{r7}
 800407a:	b083      	sub	sp, #12
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004080:	bf00      	nop
 8004082:	370c      	adds	r7, #12
 8004084:	46bd      	mov	sp, r7
 8004086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408a:	4770      	bx	lr

0800408c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b082      	sub	sp, #8
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d101      	bne.n	800409e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	e03f      	b.n	800411e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040a4:	b2db      	uxtb	r3, r3
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d106      	bne.n	80040b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2200      	movs	r2, #0
 80040ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	f7fd fc3a 	bl	800192c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2224      	movs	r2, #36	; 0x24
 80040bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	68da      	ldr	r2, [r3, #12]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80040ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80040d0:	6878      	ldr	r0, [r7, #4]
 80040d2:	f000 f9cb 	bl	800446c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	691a      	ldr	r2, [r3, #16]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80040e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	695a      	ldr	r2, [r3, #20]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80040f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	68da      	ldr	r2, [r3, #12]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004104:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2200      	movs	r2, #0
 800410a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2220      	movs	r2, #32
 8004110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2220      	movs	r2, #32
 8004118:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800411c:	2300      	movs	r3, #0
}
 800411e:	4618      	mov	r0, r3
 8004120:	3708      	adds	r7, #8
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}

08004126 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004126:	b580      	push	{r7, lr}
 8004128:	b08a      	sub	sp, #40	; 0x28
 800412a:	af02      	add	r7, sp, #8
 800412c:	60f8      	str	r0, [r7, #12]
 800412e:	60b9      	str	r1, [r7, #8]
 8004130:	603b      	str	r3, [r7, #0]
 8004132:	4613      	mov	r3, r2
 8004134:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004136:	2300      	movs	r3, #0
 8004138:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004140:	b2db      	uxtb	r3, r3
 8004142:	2b20      	cmp	r3, #32
 8004144:	d17c      	bne.n	8004240 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d002      	beq.n	8004152 <HAL_UART_Transmit+0x2c>
 800414c:	88fb      	ldrh	r3, [r7, #6]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d101      	bne.n	8004156 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	e075      	b.n	8004242 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800415c:	2b01      	cmp	r3, #1
 800415e:	d101      	bne.n	8004164 <HAL_UART_Transmit+0x3e>
 8004160:	2302      	movs	r3, #2
 8004162:	e06e      	b.n	8004242 <HAL_UART_Transmit+0x11c>
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2201      	movs	r2, #1
 8004168:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2200      	movs	r2, #0
 8004170:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	2221      	movs	r2, #33	; 0x21
 8004176:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800417a:	f7fd fe1d 	bl	8001db8 <HAL_GetTick>
 800417e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	88fa      	ldrh	r2, [r7, #6]
 8004184:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	88fa      	ldrh	r2, [r7, #6]
 800418a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004194:	d108      	bne.n	80041a8 <HAL_UART_Transmit+0x82>
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	691b      	ldr	r3, [r3, #16]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d104      	bne.n	80041a8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800419e:	2300      	movs	r3, #0
 80041a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	61bb      	str	r3, [r7, #24]
 80041a6:	e003      	b.n	80041b0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80041ac:	2300      	movs	r3, #0
 80041ae:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2200      	movs	r2, #0
 80041b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80041b8:	e02a      	b.n	8004210 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	9300      	str	r3, [sp, #0]
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	2200      	movs	r2, #0
 80041c2:	2180      	movs	r1, #128	; 0x80
 80041c4:	68f8      	ldr	r0, [r7, #12]
 80041c6:	f000 f8e2 	bl	800438e <UART_WaitOnFlagUntilTimeout>
 80041ca:	4603      	mov	r3, r0
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d001      	beq.n	80041d4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80041d0:	2303      	movs	r3, #3
 80041d2:	e036      	b.n	8004242 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80041d4:	69fb      	ldr	r3, [r7, #28]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d10b      	bne.n	80041f2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80041da:	69bb      	ldr	r3, [r7, #24]
 80041dc:	881b      	ldrh	r3, [r3, #0]
 80041de:	461a      	mov	r2, r3
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80041e8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80041ea:	69bb      	ldr	r3, [r7, #24]
 80041ec:	3302      	adds	r3, #2
 80041ee:	61bb      	str	r3, [r7, #24]
 80041f0:	e007      	b.n	8004202 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80041f2:	69fb      	ldr	r3, [r7, #28]
 80041f4:	781a      	ldrb	r2, [r3, #0]
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80041fc:	69fb      	ldr	r3, [r7, #28]
 80041fe:	3301      	adds	r3, #1
 8004200:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004206:	b29b      	uxth	r3, r3
 8004208:	3b01      	subs	r3, #1
 800420a:	b29a      	uxth	r2, r3
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004214:	b29b      	uxth	r3, r3
 8004216:	2b00      	cmp	r3, #0
 8004218:	d1cf      	bne.n	80041ba <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	9300      	str	r3, [sp, #0]
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	2200      	movs	r2, #0
 8004222:	2140      	movs	r1, #64	; 0x40
 8004224:	68f8      	ldr	r0, [r7, #12]
 8004226:	f000 f8b2 	bl	800438e <UART_WaitOnFlagUntilTimeout>
 800422a:	4603      	mov	r3, r0
 800422c:	2b00      	cmp	r3, #0
 800422e:	d001      	beq.n	8004234 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004230:	2303      	movs	r3, #3
 8004232:	e006      	b.n	8004242 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2220      	movs	r2, #32
 8004238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800423c:	2300      	movs	r3, #0
 800423e:	e000      	b.n	8004242 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004240:	2302      	movs	r3, #2
  }
}
 8004242:	4618      	mov	r0, r3
 8004244:	3720      	adds	r7, #32
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}

0800424a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800424a:	b580      	push	{r7, lr}
 800424c:	b08a      	sub	sp, #40	; 0x28
 800424e:	af02      	add	r7, sp, #8
 8004250:	60f8      	str	r0, [r7, #12]
 8004252:	60b9      	str	r1, [r7, #8]
 8004254:	603b      	str	r3, [r7, #0]
 8004256:	4613      	mov	r3, r2
 8004258:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800425a:	2300      	movs	r3, #0
 800425c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004264:	b2db      	uxtb	r3, r3
 8004266:	2b20      	cmp	r3, #32
 8004268:	f040 808c 	bne.w	8004384 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d002      	beq.n	8004278 <HAL_UART_Receive+0x2e>
 8004272:	88fb      	ldrh	r3, [r7, #6]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d101      	bne.n	800427c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004278:	2301      	movs	r3, #1
 800427a:	e084      	b.n	8004386 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004282:	2b01      	cmp	r3, #1
 8004284:	d101      	bne.n	800428a <HAL_UART_Receive+0x40>
 8004286:	2302      	movs	r3, #2
 8004288:	e07d      	b.n	8004386 <HAL_UART_Receive+0x13c>
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	2201      	movs	r2, #1
 800428e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2200      	movs	r2, #0
 8004296:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	2222      	movs	r2, #34	; 0x22
 800429c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2200      	movs	r2, #0
 80042a4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80042a6:	f7fd fd87 	bl	8001db8 <HAL_GetTick>
 80042aa:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	88fa      	ldrh	r2, [r7, #6]
 80042b0:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	88fa      	ldrh	r2, [r7, #6]
 80042b6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042c0:	d108      	bne.n	80042d4 <HAL_UART_Receive+0x8a>
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	691b      	ldr	r3, [r3, #16]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d104      	bne.n	80042d4 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80042ca:	2300      	movs	r3, #0
 80042cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	61bb      	str	r3, [r7, #24]
 80042d2:	e003      	b.n	80042dc <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80042d8:	2300      	movs	r3, #0
 80042da:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2200      	movs	r2, #0
 80042e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80042e4:	e043      	b.n	800436e <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	9300      	str	r3, [sp, #0]
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	2200      	movs	r2, #0
 80042ee:	2120      	movs	r1, #32
 80042f0:	68f8      	ldr	r0, [r7, #12]
 80042f2:	f000 f84c 	bl	800438e <UART_WaitOnFlagUntilTimeout>
 80042f6:	4603      	mov	r3, r0
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d001      	beq.n	8004300 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80042fc:	2303      	movs	r3, #3
 80042fe:	e042      	b.n	8004386 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8004300:	69fb      	ldr	r3, [r7, #28]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d10c      	bne.n	8004320 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	b29b      	uxth	r3, r3
 800430e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004312:	b29a      	uxth	r2, r3
 8004314:	69bb      	ldr	r3, [r7, #24]
 8004316:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004318:	69bb      	ldr	r3, [r7, #24]
 800431a:	3302      	adds	r3, #2
 800431c:	61bb      	str	r3, [r7, #24]
 800431e:	e01f      	b.n	8004360 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004328:	d007      	beq.n	800433a <HAL_UART_Receive+0xf0>
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	689b      	ldr	r3, [r3, #8]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d10a      	bne.n	8004348 <HAL_UART_Receive+0xfe>
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	691b      	ldr	r3, [r3, #16]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d106      	bne.n	8004348 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	b2da      	uxtb	r2, r3
 8004342:	69fb      	ldr	r3, [r7, #28]
 8004344:	701a      	strb	r2, [r3, #0]
 8004346:	e008      	b.n	800435a <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	b2db      	uxtb	r3, r3
 8004350:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004354:	b2da      	uxtb	r2, r3
 8004356:	69fb      	ldr	r3, [r7, #28]
 8004358:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800435a:	69fb      	ldr	r3, [r7, #28]
 800435c:	3301      	adds	r3, #1
 800435e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004364:	b29b      	uxth	r3, r3
 8004366:	3b01      	subs	r3, #1
 8004368:	b29a      	uxth	r2, r3
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004372:	b29b      	uxth	r3, r3
 8004374:	2b00      	cmp	r3, #0
 8004376:	d1b6      	bne.n	80042e6 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2220      	movs	r2, #32
 800437c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8004380:	2300      	movs	r3, #0
 8004382:	e000      	b.n	8004386 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8004384:	2302      	movs	r3, #2
  }
}
 8004386:	4618      	mov	r0, r3
 8004388:	3720      	adds	r7, #32
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}

0800438e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800438e:	b580      	push	{r7, lr}
 8004390:	b090      	sub	sp, #64	; 0x40
 8004392:	af00      	add	r7, sp, #0
 8004394:	60f8      	str	r0, [r7, #12]
 8004396:	60b9      	str	r1, [r7, #8]
 8004398:	603b      	str	r3, [r7, #0]
 800439a:	4613      	mov	r3, r2
 800439c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800439e:	e050      	b.n	8004442 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80043a6:	d04c      	beq.n	8004442 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80043a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d007      	beq.n	80043be <UART_WaitOnFlagUntilTimeout+0x30>
 80043ae:	f7fd fd03 	bl	8001db8 <HAL_GetTick>
 80043b2:	4602      	mov	r2, r0
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	1ad3      	subs	r3, r2, r3
 80043b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80043ba:	429a      	cmp	r2, r3
 80043bc:	d241      	bcs.n	8004442 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	330c      	adds	r3, #12
 80043c4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043c8:	e853 3f00 	ldrex	r3, [r3]
 80043cc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80043ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80043d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	330c      	adds	r3, #12
 80043dc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80043de:	637a      	str	r2, [r7, #52]	; 0x34
 80043e0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043e2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80043e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80043e6:	e841 2300 	strex	r3, r2, [r1]
 80043ea:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80043ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d1e5      	bne.n	80043be <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	3314      	adds	r3, #20
 80043f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	e853 3f00 	ldrex	r3, [r3]
 8004400:	613b      	str	r3, [r7, #16]
   return(result);
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	f023 0301 	bic.w	r3, r3, #1
 8004408:	63bb      	str	r3, [r7, #56]	; 0x38
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	3314      	adds	r3, #20
 8004410:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004412:	623a      	str	r2, [r7, #32]
 8004414:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004416:	69f9      	ldr	r1, [r7, #28]
 8004418:	6a3a      	ldr	r2, [r7, #32]
 800441a:	e841 2300 	strex	r3, r2, [r1]
 800441e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004420:	69bb      	ldr	r3, [r7, #24]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d1e5      	bne.n	80043f2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2220      	movs	r2, #32
 800442a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2220      	movs	r2, #32
 8004432:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2200      	movs	r2, #0
 800443a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800443e:	2303      	movs	r3, #3
 8004440:	e00f      	b.n	8004462 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	681a      	ldr	r2, [r3, #0]
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	4013      	ands	r3, r2
 800444c:	68ba      	ldr	r2, [r7, #8]
 800444e:	429a      	cmp	r2, r3
 8004450:	bf0c      	ite	eq
 8004452:	2301      	moveq	r3, #1
 8004454:	2300      	movne	r3, #0
 8004456:	b2db      	uxtb	r3, r3
 8004458:	461a      	mov	r2, r3
 800445a:	79fb      	ldrb	r3, [r7, #7]
 800445c:	429a      	cmp	r2, r3
 800445e:	d09f      	beq.n	80043a0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004460:	2300      	movs	r3, #0
}
 8004462:	4618      	mov	r0, r3
 8004464:	3740      	adds	r7, #64	; 0x40
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}
	...

0800446c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800446c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004470:	b0c0      	sub	sp, #256	; 0x100
 8004472:	af00      	add	r7, sp, #0
 8004474:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004478:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	691b      	ldr	r3, [r3, #16]
 8004480:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004484:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004488:	68d9      	ldr	r1, [r3, #12]
 800448a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	ea40 0301 	orr.w	r3, r0, r1
 8004494:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004496:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800449a:	689a      	ldr	r2, [r3, #8]
 800449c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044a0:	691b      	ldr	r3, [r3, #16]
 80044a2:	431a      	orrs	r2, r3
 80044a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044a8:	695b      	ldr	r3, [r3, #20]
 80044aa:	431a      	orrs	r2, r3
 80044ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044b0:	69db      	ldr	r3, [r3, #28]
 80044b2:	4313      	orrs	r3, r2
 80044b4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80044b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	68db      	ldr	r3, [r3, #12]
 80044c0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80044c4:	f021 010c 	bic.w	r1, r1, #12
 80044c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044cc:	681a      	ldr	r2, [r3, #0]
 80044ce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80044d2:	430b      	orrs	r3, r1
 80044d4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80044d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	695b      	ldr	r3, [r3, #20]
 80044de:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80044e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044e6:	6999      	ldr	r1, [r3, #24]
 80044e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044ec:	681a      	ldr	r2, [r3, #0]
 80044ee:	ea40 0301 	orr.w	r3, r0, r1
 80044f2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80044f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	4b8f      	ldr	r3, [pc, #572]	; (8004738 <UART_SetConfig+0x2cc>)
 80044fc:	429a      	cmp	r2, r3
 80044fe:	d005      	beq.n	800450c <UART_SetConfig+0xa0>
 8004500:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004504:	681a      	ldr	r2, [r3, #0]
 8004506:	4b8d      	ldr	r3, [pc, #564]	; (800473c <UART_SetConfig+0x2d0>)
 8004508:	429a      	cmp	r2, r3
 800450a:	d104      	bne.n	8004516 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800450c:	f7ff faf8 	bl	8003b00 <HAL_RCC_GetPCLK2Freq>
 8004510:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004514:	e003      	b.n	800451e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004516:	f7ff fadf 	bl	8003ad8 <HAL_RCC_GetPCLK1Freq>
 800451a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800451e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004522:	69db      	ldr	r3, [r3, #28]
 8004524:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004528:	f040 810c 	bne.w	8004744 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800452c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004530:	2200      	movs	r2, #0
 8004532:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004536:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800453a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800453e:	4622      	mov	r2, r4
 8004540:	462b      	mov	r3, r5
 8004542:	1891      	adds	r1, r2, r2
 8004544:	65b9      	str	r1, [r7, #88]	; 0x58
 8004546:	415b      	adcs	r3, r3
 8004548:	65fb      	str	r3, [r7, #92]	; 0x5c
 800454a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800454e:	4621      	mov	r1, r4
 8004550:	eb12 0801 	adds.w	r8, r2, r1
 8004554:	4629      	mov	r1, r5
 8004556:	eb43 0901 	adc.w	r9, r3, r1
 800455a:	f04f 0200 	mov.w	r2, #0
 800455e:	f04f 0300 	mov.w	r3, #0
 8004562:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004566:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800456a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800456e:	4690      	mov	r8, r2
 8004570:	4699      	mov	r9, r3
 8004572:	4623      	mov	r3, r4
 8004574:	eb18 0303 	adds.w	r3, r8, r3
 8004578:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800457c:	462b      	mov	r3, r5
 800457e:	eb49 0303 	adc.w	r3, r9, r3
 8004582:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004586:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	2200      	movs	r2, #0
 800458e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004592:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004596:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800459a:	460b      	mov	r3, r1
 800459c:	18db      	adds	r3, r3, r3
 800459e:	653b      	str	r3, [r7, #80]	; 0x50
 80045a0:	4613      	mov	r3, r2
 80045a2:	eb42 0303 	adc.w	r3, r2, r3
 80045a6:	657b      	str	r3, [r7, #84]	; 0x54
 80045a8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80045ac:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80045b0:	f7fc fb52 	bl	8000c58 <__aeabi_uldivmod>
 80045b4:	4602      	mov	r2, r0
 80045b6:	460b      	mov	r3, r1
 80045b8:	4b61      	ldr	r3, [pc, #388]	; (8004740 <UART_SetConfig+0x2d4>)
 80045ba:	fba3 2302 	umull	r2, r3, r3, r2
 80045be:	095b      	lsrs	r3, r3, #5
 80045c0:	011c      	lsls	r4, r3, #4
 80045c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80045c6:	2200      	movs	r2, #0
 80045c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80045cc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80045d0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80045d4:	4642      	mov	r2, r8
 80045d6:	464b      	mov	r3, r9
 80045d8:	1891      	adds	r1, r2, r2
 80045da:	64b9      	str	r1, [r7, #72]	; 0x48
 80045dc:	415b      	adcs	r3, r3
 80045de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045e0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80045e4:	4641      	mov	r1, r8
 80045e6:	eb12 0a01 	adds.w	sl, r2, r1
 80045ea:	4649      	mov	r1, r9
 80045ec:	eb43 0b01 	adc.w	fp, r3, r1
 80045f0:	f04f 0200 	mov.w	r2, #0
 80045f4:	f04f 0300 	mov.w	r3, #0
 80045f8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80045fc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004600:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004604:	4692      	mov	sl, r2
 8004606:	469b      	mov	fp, r3
 8004608:	4643      	mov	r3, r8
 800460a:	eb1a 0303 	adds.w	r3, sl, r3
 800460e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004612:	464b      	mov	r3, r9
 8004614:	eb4b 0303 	adc.w	r3, fp, r3
 8004618:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800461c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	2200      	movs	r2, #0
 8004624:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004628:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800462c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004630:	460b      	mov	r3, r1
 8004632:	18db      	adds	r3, r3, r3
 8004634:	643b      	str	r3, [r7, #64]	; 0x40
 8004636:	4613      	mov	r3, r2
 8004638:	eb42 0303 	adc.w	r3, r2, r3
 800463c:	647b      	str	r3, [r7, #68]	; 0x44
 800463e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004642:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004646:	f7fc fb07 	bl	8000c58 <__aeabi_uldivmod>
 800464a:	4602      	mov	r2, r0
 800464c:	460b      	mov	r3, r1
 800464e:	4611      	mov	r1, r2
 8004650:	4b3b      	ldr	r3, [pc, #236]	; (8004740 <UART_SetConfig+0x2d4>)
 8004652:	fba3 2301 	umull	r2, r3, r3, r1
 8004656:	095b      	lsrs	r3, r3, #5
 8004658:	2264      	movs	r2, #100	; 0x64
 800465a:	fb02 f303 	mul.w	r3, r2, r3
 800465e:	1acb      	subs	r3, r1, r3
 8004660:	00db      	lsls	r3, r3, #3
 8004662:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004666:	4b36      	ldr	r3, [pc, #216]	; (8004740 <UART_SetConfig+0x2d4>)
 8004668:	fba3 2302 	umull	r2, r3, r3, r2
 800466c:	095b      	lsrs	r3, r3, #5
 800466e:	005b      	lsls	r3, r3, #1
 8004670:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004674:	441c      	add	r4, r3
 8004676:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800467a:	2200      	movs	r2, #0
 800467c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004680:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004684:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004688:	4642      	mov	r2, r8
 800468a:	464b      	mov	r3, r9
 800468c:	1891      	adds	r1, r2, r2
 800468e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004690:	415b      	adcs	r3, r3
 8004692:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004694:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004698:	4641      	mov	r1, r8
 800469a:	1851      	adds	r1, r2, r1
 800469c:	6339      	str	r1, [r7, #48]	; 0x30
 800469e:	4649      	mov	r1, r9
 80046a0:	414b      	adcs	r3, r1
 80046a2:	637b      	str	r3, [r7, #52]	; 0x34
 80046a4:	f04f 0200 	mov.w	r2, #0
 80046a8:	f04f 0300 	mov.w	r3, #0
 80046ac:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80046b0:	4659      	mov	r1, fp
 80046b2:	00cb      	lsls	r3, r1, #3
 80046b4:	4651      	mov	r1, sl
 80046b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80046ba:	4651      	mov	r1, sl
 80046bc:	00ca      	lsls	r2, r1, #3
 80046be:	4610      	mov	r0, r2
 80046c0:	4619      	mov	r1, r3
 80046c2:	4603      	mov	r3, r0
 80046c4:	4642      	mov	r2, r8
 80046c6:	189b      	adds	r3, r3, r2
 80046c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80046cc:	464b      	mov	r3, r9
 80046ce:	460a      	mov	r2, r1
 80046d0:	eb42 0303 	adc.w	r3, r2, r3
 80046d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80046d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	2200      	movs	r2, #0
 80046e0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80046e4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80046e8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80046ec:	460b      	mov	r3, r1
 80046ee:	18db      	adds	r3, r3, r3
 80046f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80046f2:	4613      	mov	r3, r2
 80046f4:	eb42 0303 	adc.w	r3, r2, r3
 80046f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046fa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80046fe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004702:	f7fc faa9 	bl	8000c58 <__aeabi_uldivmod>
 8004706:	4602      	mov	r2, r0
 8004708:	460b      	mov	r3, r1
 800470a:	4b0d      	ldr	r3, [pc, #52]	; (8004740 <UART_SetConfig+0x2d4>)
 800470c:	fba3 1302 	umull	r1, r3, r3, r2
 8004710:	095b      	lsrs	r3, r3, #5
 8004712:	2164      	movs	r1, #100	; 0x64
 8004714:	fb01 f303 	mul.w	r3, r1, r3
 8004718:	1ad3      	subs	r3, r2, r3
 800471a:	00db      	lsls	r3, r3, #3
 800471c:	3332      	adds	r3, #50	; 0x32
 800471e:	4a08      	ldr	r2, [pc, #32]	; (8004740 <UART_SetConfig+0x2d4>)
 8004720:	fba2 2303 	umull	r2, r3, r2, r3
 8004724:	095b      	lsrs	r3, r3, #5
 8004726:	f003 0207 	and.w	r2, r3, #7
 800472a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4422      	add	r2, r4
 8004732:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004734:	e105      	b.n	8004942 <UART_SetConfig+0x4d6>
 8004736:	bf00      	nop
 8004738:	40011000 	.word	0x40011000
 800473c:	40011400 	.word	0x40011400
 8004740:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004744:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004748:	2200      	movs	r2, #0
 800474a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800474e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004752:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004756:	4642      	mov	r2, r8
 8004758:	464b      	mov	r3, r9
 800475a:	1891      	adds	r1, r2, r2
 800475c:	6239      	str	r1, [r7, #32]
 800475e:	415b      	adcs	r3, r3
 8004760:	627b      	str	r3, [r7, #36]	; 0x24
 8004762:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004766:	4641      	mov	r1, r8
 8004768:	1854      	adds	r4, r2, r1
 800476a:	4649      	mov	r1, r9
 800476c:	eb43 0501 	adc.w	r5, r3, r1
 8004770:	f04f 0200 	mov.w	r2, #0
 8004774:	f04f 0300 	mov.w	r3, #0
 8004778:	00eb      	lsls	r3, r5, #3
 800477a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800477e:	00e2      	lsls	r2, r4, #3
 8004780:	4614      	mov	r4, r2
 8004782:	461d      	mov	r5, r3
 8004784:	4643      	mov	r3, r8
 8004786:	18e3      	adds	r3, r4, r3
 8004788:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800478c:	464b      	mov	r3, r9
 800478e:	eb45 0303 	adc.w	r3, r5, r3
 8004792:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004796:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	2200      	movs	r2, #0
 800479e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80047a2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80047a6:	f04f 0200 	mov.w	r2, #0
 80047aa:	f04f 0300 	mov.w	r3, #0
 80047ae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80047b2:	4629      	mov	r1, r5
 80047b4:	008b      	lsls	r3, r1, #2
 80047b6:	4621      	mov	r1, r4
 80047b8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80047bc:	4621      	mov	r1, r4
 80047be:	008a      	lsls	r2, r1, #2
 80047c0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80047c4:	f7fc fa48 	bl	8000c58 <__aeabi_uldivmod>
 80047c8:	4602      	mov	r2, r0
 80047ca:	460b      	mov	r3, r1
 80047cc:	4b60      	ldr	r3, [pc, #384]	; (8004950 <UART_SetConfig+0x4e4>)
 80047ce:	fba3 2302 	umull	r2, r3, r3, r2
 80047d2:	095b      	lsrs	r3, r3, #5
 80047d4:	011c      	lsls	r4, r3, #4
 80047d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80047da:	2200      	movs	r2, #0
 80047dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80047e0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80047e4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80047e8:	4642      	mov	r2, r8
 80047ea:	464b      	mov	r3, r9
 80047ec:	1891      	adds	r1, r2, r2
 80047ee:	61b9      	str	r1, [r7, #24]
 80047f0:	415b      	adcs	r3, r3
 80047f2:	61fb      	str	r3, [r7, #28]
 80047f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80047f8:	4641      	mov	r1, r8
 80047fa:	1851      	adds	r1, r2, r1
 80047fc:	6139      	str	r1, [r7, #16]
 80047fe:	4649      	mov	r1, r9
 8004800:	414b      	adcs	r3, r1
 8004802:	617b      	str	r3, [r7, #20]
 8004804:	f04f 0200 	mov.w	r2, #0
 8004808:	f04f 0300 	mov.w	r3, #0
 800480c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004810:	4659      	mov	r1, fp
 8004812:	00cb      	lsls	r3, r1, #3
 8004814:	4651      	mov	r1, sl
 8004816:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800481a:	4651      	mov	r1, sl
 800481c:	00ca      	lsls	r2, r1, #3
 800481e:	4610      	mov	r0, r2
 8004820:	4619      	mov	r1, r3
 8004822:	4603      	mov	r3, r0
 8004824:	4642      	mov	r2, r8
 8004826:	189b      	adds	r3, r3, r2
 8004828:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800482c:	464b      	mov	r3, r9
 800482e:	460a      	mov	r2, r1
 8004830:	eb42 0303 	adc.w	r3, r2, r3
 8004834:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004838:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	2200      	movs	r2, #0
 8004840:	67bb      	str	r3, [r7, #120]	; 0x78
 8004842:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004844:	f04f 0200 	mov.w	r2, #0
 8004848:	f04f 0300 	mov.w	r3, #0
 800484c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004850:	4649      	mov	r1, r9
 8004852:	008b      	lsls	r3, r1, #2
 8004854:	4641      	mov	r1, r8
 8004856:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800485a:	4641      	mov	r1, r8
 800485c:	008a      	lsls	r2, r1, #2
 800485e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004862:	f7fc f9f9 	bl	8000c58 <__aeabi_uldivmod>
 8004866:	4602      	mov	r2, r0
 8004868:	460b      	mov	r3, r1
 800486a:	4b39      	ldr	r3, [pc, #228]	; (8004950 <UART_SetConfig+0x4e4>)
 800486c:	fba3 1302 	umull	r1, r3, r3, r2
 8004870:	095b      	lsrs	r3, r3, #5
 8004872:	2164      	movs	r1, #100	; 0x64
 8004874:	fb01 f303 	mul.w	r3, r1, r3
 8004878:	1ad3      	subs	r3, r2, r3
 800487a:	011b      	lsls	r3, r3, #4
 800487c:	3332      	adds	r3, #50	; 0x32
 800487e:	4a34      	ldr	r2, [pc, #208]	; (8004950 <UART_SetConfig+0x4e4>)
 8004880:	fba2 2303 	umull	r2, r3, r2, r3
 8004884:	095b      	lsrs	r3, r3, #5
 8004886:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800488a:	441c      	add	r4, r3
 800488c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004890:	2200      	movs	r2, #0
 8004892:	673b      	str	r3, [r7, #112]	; 0x70
 8004894:	677a      	str	r2, [r7, #116]	; 0x74
 8004896:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800489a:	4642      	mov	r2, r8
 800489c:	464b      	mov	r3, r9
 800489e:	1891      	adds	r1, r2, r2
 80048a0:	60b9      	str	r1, [r7, #8]
 80048a2:	415b      	adcs	r3, r3
 80048a4:	60fb      	str	r3, [r7, #12]
 80048a6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80048aa:	4641      	mov	r1, r8
 80048ac:	1851      	adds	r1, r2, r1
 80048ae:	6039      	str	r1, [r7, #0]
 80048b0:	4649      	mov	r1, r9
 80048b2:	414b      	adcs	r3, r1
 80048b4:	607b      	str	r3, [r7, #4]
 80048b6:	f04f 0200 	mov.w	r2, #0
 80048ba:	f04f 0300 	mov.w	r3, #0
 80048be:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80048c2:	4659      	mov	r1, fp
 80048c4:	00cb      	lsls	r3, r1, #3
 80048c6:	4651      	mov	r1, sl
 80048c8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80048cc:	4651      	mov	r1, sl
 80048ce:	00ca      	lsls	r2, r1, #3
 80048d0:	4610      	mov	r0, r2
 80048d2:	4619      	mov	r1, r3
 80048d4:	4603      	mov	r3, r0
 80048d6:	4642      	mov	r2, r8
 80048d8:	189b      	adds	r3, r3, r2
 80048da:	66bb      	str	r3, [r7, #104]	; 0x68
 80048dc:	464b      	mov	r3, r9
 80048de:	460a      	mov	r2, r1
 80048e0:	eb42 0303 	adc.w	r3, r2, r3
 80048e4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80048e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	2200      	movs	r2, #0
 80048ee:	663b      	str	r3, [r7, #96]	; 0x60
 80048f0:	667a      	str	r2, [r7, #100]	; 0x64
 80048f2:	f04f 0200 	mov.w	r2, #0
 80048f6:	f04f 0300 	mov.w	r3, #0
 80048fa:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80048fe:	4649      	mov	r1, r9
 8004900:	008b      	lsls	r3, r1, #2
 8004902:	4641      	mov	r1, r8
 8004904:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004908:	4641      	mov	r1, r8
 800490a:	008a      	lsls	r2, r1, #2
 800490c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004910:	f7fc f9a2 	bl	8000c58 <__aeabi_uldivmod>
 8004914:	4602      	mov	r2, r0
 8004916:	460b      	mov	r3, r1
 8004918:	4b0d      	ldr	r3, [pc, #52]	; (8004950 <UART_SetConfig+0x4e4>)
 800491a:	fba3 1302 	umull	r1, r3, r3, r2
 800491e:	095b      	lsrs	r3, r3, #5
 8004920:	2164      	movs	r1, #100	; 0x64
 8004922:	fb01 f303 	mul.w	r3, r1, r3
 8004926:	1ad3      	subs	r3, r2, r3
 8004928:	011b      	lsls	r3, r3, #4
 800492a:	3332      	adds	r3, #50	; 0x32
 800492c:	4a08      	ldr	r2, [pc, #32]	; (8004950 <UART_SetConfig+0x4e4>)
 800492e:	fba2 2303 	umull	r2, r3, r2, r3
 8004932:	095b      	lsrs	r3, r3, #5
 8004934:	f003 020f 	and.w	r2, r3, #15
 8004938:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4422      	add	r2, r4
 8004940:	609a      	str	r2, [r3, #8]
}
 8004942:	bf00      	nop
 8004944:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004948:	46bd      	mov	sp, r7
 800494a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800494e:	bf00      	nop
 8004950:	51eb851f 	.word	0x51eb851f

08004954 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004954:	b480      	push	{r7}
 8004956:	b085      	sub	sp, #20
 8004958:	af00      	add	r7, sp, #0
 800495a:	4603      	mov	r3, r0
 800495c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800495e:	2300      	movs	r3, #0
 8004960:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004962:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004966:	2b84      	cmp	r3, #132	; 0x84
 8004968:	d005      	beq.n	8004976 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800496a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	4413      	add	r3, r2
 8004972:	3303      	adds	r3, #3
 8004974:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004976:	68fb      	ldr	r3, [r7, #12]
}
 8004978:	4618      	mov	r0, r3
 800497a:	3714      	adds	r7, #20
 800497c:	46bd      	mov	sp, r7
 800497e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004982:	4770      	bx	lr

08004984 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004988:	f000 faf6 	bl	8004f78 <vTaskStartScheduler>
  
  return osOK;
 800498c:	2300      	movs	r3, #0
}
 800498e:	4618      	mov	r0, r3
 8004990:	bd80      	pop	{r7, pc}

08004992 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004992:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004994:	b089      	sub	sp, #36	; 0x24
 8004996:	af04      	add	r7, sp, #16
 8004998:	6078      	str	r0, [r7, #4]
 800499a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	695b      	ldr	r3, [r3, #20]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d020      	beq.n	80049e6 <osThreadCreate+0x54>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	699b      	ldr	r3, [r3, #24]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d01c      	beq.n	80049e6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	685c      	ldr	r4, [r3, #4]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681d      	ldr	r5, [r3, #0]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	691e      	ldr	r6, [r3, #16]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80049be:	4618      	mov	r0, r3
 80049c0:	f7ff ffc8 	bl	8004954 <makeFreeRtosPriority>
 80049c4:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	695b      	ldr	r3, [r3, #20]
 80049ca:	687a      	ldr	r2, [r7, #4]
 80049cc:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80049ce:	9202      	str	r2, [sp, #8]
 80049d0:	9301      	str	r3, [sp, #4]
 80049d2:	9100      	str	r1, [sp, #0]
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	4632      	mov	r2, r6
 80049d8:	4629      	mov	r1, r5
 80049da:	4620      	mov	r0, r4
 80049dc:	f000 f8ed 	bl	8004bba <xTaskCreateStatic>
 80049e0:	4603      	mov	r3, r0
 80049e2:	60fb      	str	r3, [r7, #12]
 80049e4:	e01c      	b.n	8004a20 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	685c      	ldr	r4, [r3, #4]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80049f2:	b29e      	uxth	r6, r3
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80049fa:	4618      	mov	r0, r3
 80049fc:	f7ff ffaa 	bl	8004954 <makeFreeRtosPriority>
 8004a00:	4602      	mov	r2, r0
 8004a02:	f107 030c 	add.w	r3, r7, #12
 8004a06:	9301      	str	r3, [sp, #4]
 8004a08:	9200      	str	r2, [sp, #0]
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	4632      	mov	r2, r6
 8004a0e:	4629      	mov	r1, r5
 8004a10:	4620      	mov	r0, r4
 8004a12:	f000 f92f 	bl	8004c74 <xTaskCreate>
 8004a16:	4603      	mov	r3, r0
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d001      	beq.n	8004a20 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	e000      	b.n	8004a22 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004a20:	68fb      	ldr	r3, [r7, #12]
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	3714      	adds	r7, #20
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004a2a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004a2a:	b580      	push	{r7, lr}
 8004a2c:	b084      	sub	sp, #16
 8004a2e:	af00      	add	r7, sp, #0
 8004a30:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d001      	beq.n	8004a40 <osDelay+0x16>
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	e000      	b.n	8004a42 <osDelay+0x18>
 8004a40:	2301      	movs	r3, #1
 8004a42:	4618      	mov	r0, r3
 8004a44:	f000 fa64 	bl	8004f10 <vTaskDelay>
  
  return osOK;
 8004a48:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3710      	adds	r7, #16
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}

08004a52 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004a52:	b480      	push	{r7}
 8004a54:	b083      	sub	sp, #12
 8004a56:	af00      	add	r7, sp, #0
 8004a58:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	f103 0208 	add.w	r2, r3, #8
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004a6a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	f103 0208 	add.w	r2, r3, #8
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	f103 0208 	add.w	r2, r3, #8
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2200      	movs	r2, #0
 8004a84:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004a86:	bf00      	nop
 8004a88:	370c      	adds	r7, #12
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a90:	4770      	bx	lr

08004a92 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004a92:	b480      	push	{r7}
 8004a94:	b083      	sub	sp, #12
 8004a96:	af00      	add	r7, sp, #0
 8004a98:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004aa0:	bf00      	nop
 8004aa2:	370c      	adds	r7, #12
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aaa:	4770      	bx	lr

08004aac <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004aac:	b480      	push	{r7}
 8004aae:	b085      	sub	sp, #20
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
 8004ab4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	68fa      	ldr	r2, [r7, #12]
 8004ac0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	689a      	ldr	r2, [r3, #8]
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	683a      	ldr	r2, [r7, #0]
 8004ad0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	683a      	ldr	r2, [r7, #0]
 8004ad6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	687a      	ldr	r2, [r7, #4]
 8004adc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	1c5a      	adds	r2, r3, #1
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	601a      	str	r2, [r3, #0]
}
 8004ae8:	bf00      	nop
 8004aea:	3714      	adds	r7, #20
 8004aec:	46bd      	mov	sp, r7
 8004aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af2:	4770      	bx	lr

08004af4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004af4:	b480      	push	{r7}
 8004af6:	b085      	sub	sp, #20
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
 8004afc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b0a:	d103      	bne.n	8004b14 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	691b      	ldr	r3, [r3, #16]
 8004b10:	60fb      	str	r3, [r7, #12]
 8004b12:	e00c      	b.n	8004b2e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	3308      	adds	r3, #8
 8004b18:	60fb      	str	r3, [r7, #12]
 8004b1a:	e002      	b.n	8004b22 <vListInsert+0x2e>
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	60fb      	str	r3, [r7, #12]
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	68ba      	ldr	r2, [r7, #8]
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	d2f6      	bcs.n	8004b1c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	685a      	ldr	r2, [r3, #4]
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	683a      	ldr	r2, [r7, #0]
 8004b3c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	68fa      	ldr	r2, [r7, #12]
 8004b42:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	683a      	ldr	r2, [r7, #0]
 8004b48:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	687a      	ldr	r2, [r7, #4]
 8004b4e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	1c5a      	adds	r2, r3, #1
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	601a      	str	r2, [r3, #0]
}
 8004b5a:	bf00      	nop
 8004b5c:	3714      	adds	r7, #20
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b64:	4770      	bx	lr

08004b66 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004b66:	b480      	push	{r7}
 8004b68:	b085      	sub	sp, #20
 8004b6a:	af00      	add	r7, sp, #0
 8004b6c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	691b      	ldr	r3, [r3, #16]
 8004b72:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	687a      	ldr	r2, [r7, #4]
 8004b7a:	6892      	ldr	r2, [r2, #8]
 8004b7c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	687a      	ldr	r2, [r7, #4]
 8004b84:	6852      	ldr	r2, [r2, #4]
 8004b86:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	687a      	ldr	r2, [r7, #4]
 8004b8e:	429a      	cmp	r2, r3
 8004b90:	d103      	bne.n	8004b9a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	689a      	ldr	r2, [r3, #8]
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	1e5a      	subs	r2, r3, #1
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	3714      	adds	r7, #20
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb8:	4770      	bx	lr

08004bba <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004bba:	b580      	push	{r7, lr}
 8004bbc:	b08e      	sub	sp, #56	; 0x38
 8004bbe:	af04      	add	r7, sp, #16
 8004bc0:	60f8      	str	r0, [r7, #12]
 8004bc2:	60b9      	str	r1, [r7, #8]
 8004bc4:	607a      	str	r2, [r7, #4]
 8004bc6:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004bc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d10a      	bne.n	8004be4 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bd2:	f383 8811 	msr	BASEPRI, r3
 8004bd6:	f3bf 8f6f 	isb	sy
 8004bda:	f3bf 8f4f 	dsb	sy
 8004bde:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004be0:	bf00      	nop
 8004be2:	e7fe      	b.n	8004be2 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004be4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d10a      	bne.n	8004c00 <xTaskCreateStatic+0x46>
	__asm volatile
 8004bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bee:	f383 8811 	msr	BASEPRI, r3
 8004bf2:	f3bf 8f6f 	isb	sy
 8004bf6:	f3bf 8f4f 	dsb	sy
 8004bfa:	61fb      	str	r3, [r7, #28]
}
 8004bfc:	bf00      	nop
 8004bfe:	e7fe      	b.n	8004bfe <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004c00:	23b4      	movs	r3, #180	; 0xb4
 8004c02:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004c04:	693b      	ldr	r3, [r7, #16]
 8004c06:	2bb4      	cmp	r3, #180	; 0xb4
 8004c08:	d00a      	beq.n	8004c20 <xTaskCreateStatic+0x66>
	__asm volatile
 8004c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c0e:	f383 8811 	msr	BASEPRI, r3
 8004c12:	f3bf 8f6f 	isb	sy
 8004c16:	f3bf 8f4f 	dsb	sy
 8004c1a:	61bb      	str	r3, [r7, #24]
}
 8004c1c:	bf00      	nop
 8004c1e:	e7fe      	b.n	8004c1e <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004c20:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d01e      	beq.n	8004c66 <xTaskCreateStatic+0xac>
 8004c28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d01b      	beq.n	8004c66 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004c2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c30:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c34:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c36:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c3a:	2202      	movs	r2, #2
 8004c3c:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004c40:	2300      	movs	r3, #0
 8004c42:	9303      	str	r3, [sp, #12]
 8004c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c46:	9302      	str	r3, [sp, #8]
 8004c48:	f107 0314 	add.w	r3, r7, #20
 8004c4c:	9301      	str	r3, [sp, #4]
 8004c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c50:	9300      	str	r3, [sp, #0]
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	687a      	ldr	r2, [r7, #4]
 8004c56:	68b9      	ldr	r1, [r7, #8]
 8004c58:	68f8      	ldr	r0, [r7, #12]
 8004c5a:	f000 f851 	bl	8004d00 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004c5e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004c60:	f000 f8ec 	bl	8004e3c <prvAddNewTaskToReadyList>
 8004c64:	e001      	b.n	8004c6a <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004c66:	2300      	movs	r3, #0
 8004c68:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004c6a:	697b      	ldr	r3, [r7, #20]
	}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	3728      	adds	r7, #40	; 0x28
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd80      	pop	{r7, pc}

08004c74 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b08c      	sub	sp, #48	; 0x30
 8004c78:	af04      	add	r7, sp, #16
 8004c7a:	60f8      	str	r0, [r7, #12]
 8004c7c:	60b9      	str	r1, [r7, #8]
 8004c7e:	603b      	str	r3, [r7, #0]
 8004c80:	4613      	mov	r3, r2
 8004c82:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004c84:	88fb      	ldrh	r3, [r7, #6]
 8004c86:	009b      	lsls	r3, r3, #2
 8004c88:	4618      	mov	r0, r3
 8004c8a:	f000 fef5 	bl	8005a78 <pvPortMalloc>
 8004c8e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d00e      	beq.n	8004cb4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004c96:	20b4      	movs	r0, #180	; 0xb4
 8004c98:	f000 feee 	bl	8005a78 <pvPortMalloc>
 8004c9c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004c9e:	69fb      	ldr	r3, [r7, #28]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d003      	beq.n	8004cac <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004ca4:	69fb      	ldr	r3, [r7, #28]
 8004ca6:	697a      	ldr	r2, [r7, #20]
 8004ca8:	631a      	str	r2, [r3, #48]	; 0x30
 8004caa:	e005      	b.n	8004cb8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004cac:	6978      	ldr	r0, [r7, #20]
 8004cae:	f000 ffaf 	bl	8005c10 <vPortFree>
 8004cb2:	e001      	b.n	8004cb8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004cb8:	69fb      	ldr	r3, [r7, #28]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d017      	beq.n	8004cee <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004cbe:	69fb      	ldr	r3, [r7, #28]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004cc6:	88fa      	ldrh	r2, [r7, #6]
 8004cc8:	2300      	movs	r3, #0
 8004cca:	9303      	str	r3, [sp, #12]
 8004ccc:	69fb      	ldr	r3, [r7, #28]
 8004cce:	9302      	str	r3, [sp, #8]
 8004cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cd2:	9301      	str	r3, [sp, #4]
 8004cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cd6:	9300      	str	r3, [sp, #0]
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	68b9      	ldr	r1, [r7, #8]
 8004cdc:	68f8      	ldr	r0, [r7, #12]
 8004cde:	f000 f80f 	bl	8004d00 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004ce2:	69f8      	ldr	r0, [r7, #28]
 8004ce4:	f000 f8aa 	bl	8004e3c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	61bb      	str	r3, [r7, #24]
 8004cec:	e002      	b.n	8004cf4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004cee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004cf2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004cf4:	69bb      	ldr	r3, [r7, #24]
	}
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	3720      	adds	r7, #32
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}
	...

08004d00 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b088      	sub	sp, #32
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	60f8      	str	r0, [r7, #12]
 8004d08:	60b9      	str	r1, [r7, #8]
 8004d0a:	607a      	str	r2, [r7, #4]
 8004d0c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004d18:	3b01      	subs	r3, #1
 8004d1a:	009b      	lsls	r3, r3, #2
 8004d1c:	4413      	add	r3, r2
 8004d1e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004d20:	69bb      	ldr	r3, [r7, #24]
 8004d22:	f023 0307 	bic.w	r3, r3, #7
 8004d26:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004d28:	69bb      	ldr	r3, [r7, #24]
 8004d2a:	f003 0307 	and.w	r3, r3, #7
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d00a      	beq.n	8004d48 <prvInitialiseNewTask+0x48>
	__asm volatile
 8004d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d36:	f383 8811 	msr	BASEPRI, r3
 8004d3a:	f3bf 8f6f 	isb	sy
 8004d3e:	f3bf 8f4f 	dsb	sy
 8004d42:	617b      	str	r3, [r7, #20]
}
 8004d44:	bf00      	nop
 8004d46:	e7fe      	b.n	8004d46 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d01f      	beq.n	8004d8e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004d4e:	2300      	movs	r3, #0
 8004d50:	61fb      	str	r3, [r7, #28]
 8004d52:	e012      	b.n	8004d7a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004d54:	68ba      	ldr	r2, [r7, #8]
 8004d56:	69fb      	ldr	r3, [r7, #28]
 8004d58:	4413      	add	r3, r2
 8004d5a:	7819      	ldrb	r1, [r3, #0]
 8004d5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d5e:	69fb      	ldr	r3, [r7, #28]
 8004d60:	4413      	add	r3, r2
 8004d62:	3334      	adds	r3, #52	; 0x34
 8004d64:	460a      	mov	r2, r1
 8004d66:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004d68:	68ba      	ldr	r2, [r7, #8]
 8004d6a:	69fb      	ldr	r3, [r7, #28]
 8004d6c:	4413      	add	r3, r2
 8004d6e:	781b      	ldrb	r3, [r3, #0]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d006      	beq.n	8004d82 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004d74:	69fb      	ldr	r3, [r7, #28]
 8004d76:	3301      	adds	r3, #1
 8004d78:	61fb      	str	r3, [r7, #28]
 8004d7a:	69fb      	ldr	r3, [r7, #28]
 8004d7c:	2b0f      	cmp	r3, #15
 8004d7e:	d9e9      	bls.n	8004d54 <prvInitialiseNewTask+0x54>
 8004d80:	e000      	b.n	8004d84 <prvInitialiseNewTask+0x84>
			{
				break;
 8004d82:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d86:	2200      	movs	r2, #0
 8004d88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004d8c:	e003      	b.n	8004d96 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d90:	2200      	movs	r2, #0
 8004d92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d98:	2b06      	cmp	r3, #6
 8004d9a:	d901      	bls.n	8004da0 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004d9c:	2306      	movs	r3, #6
 8004d9e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004da2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004da4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004da8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004daa:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dae:	2200      	movs	r2, #0
 8004db0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004db4:	3304      	adds	r3, #4
 8004db6:	4618      	mov	r0, r3
 8004db8:	f7ff fe6b 	bl	8004a92 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dbe:	3318      	adds	r3, #24
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	f7ff fe66 	bl	8004a92 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004dca:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dce:	f1c3 0207 	rsb	r2, r3, #7
 8004dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dd4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004dda:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dde:	2200      	movs	r2, #0
 8004de0:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004de6:	2200      	movs	r2, #0
 8004de8:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dee:	334c      	adds	r3, #76	; 0x4c
 8004df0:	2260      	movs	r2, #96	; 0x60
 8004df2:	2100      	movs	r1, #0
 8004df4:	4618      	mov	r0, r3
 8004df6:	f001 f95a 	bl	80060ae <memset>
 8004dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dfc:	4a0c      	ldr	r2, [pc, #48]	; (8004e30 <prvInitialiseNewTask+0x130>)
 8004dfe:	651a      	str	r2, [r3, #80]	; 0x50
 8004e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e02:	4a0c      	ldr	r2, [pc, #48]	; (8004e34 <prvInitialiseNewTask+0x134>)
 8004e04:	655a      	str	r2, [r3, #84]	; 0x54
 8004e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e08:	4a0b      	ldr	r2, [pc, #44]	; (8004e38 <prvInitialiseNewTask+0x138>)
 8004e0a:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004e0c:	683a      	ldr	r2, [r7, #0]
 8004e0e:	68f9      	ldr	r1, [r7, #12]
 8004e10:	69b8      	ldr	r0, [r7, #24]
 8004e12:	f000 fc1f 	bl	8005654 <pxPortInitialiseStack>
 8004e16:	4602      	mov	r2, r0
 8004e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e1a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d002      	beq.n	8004e28 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e26:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004e28:	bf00      	nop
 8004e2a:	3720      	adds	r7, #32
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bd80      	pop	{r7, pc}
 8004e30:	08008f58 	.word	0x08008f58
 8004e34:	08008f78 	.word	0x08008f78
 8004e38:	08008f38 	.word	0x08008f38

08004e3c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b082      	sub	sp, #8
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004e44:	f000 fd36 	bl	80058b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004e48:	4b2a      	ldr	r3, [pc, #168]	; (8004ef4 <prvAddNewTaskToReadyList+0xb8>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	3301      	adds	r3, #1
 8004e4e:	4a29      	ldr	r2, [pc, #164]	; (8004ef4 <prvAddNewTaskToReadyList+0xb8>)
 8004e50:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004e52:	4b29      	ldr	r3, [pc, #164]	; (8004ef8 <prvAddNewTaskToReadyList+0xbc>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d109      	bne.n	8004e6e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004e5a:	4a27      	ldr	r2, [pc, #156]	; (8004ef8 <prvAddNewTaskToReadyList+0xbc>)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004e60:	4b24      	ldr	r3, [pc, #144]	; (8004ef4 <prvAddNewTaskToReadyList+0xb8>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	d110      	bne.n	8004e8a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004e68:	f000 facc 	bl	8005404 <prvInitialiseTaskLists>
 8004e6c:	e00d      	b.n	8004e8a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004e6e:	4b23      	ldr	r3, [pc, #140]	; (8004efc <prvAddNewTaskToReadyList+0xc0>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d109      	bne.n	8004e8a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004e76:	4b20      	ldr	r3, [pc, #128]	; (8004ef8 <prvAddNewTaskToReadyList+0xbc>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e80:	429a      	cmp	r2, r3
 8004e82:	d802      	bhi.n	8004e8a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004e84:	4a1c      	ldr	r2, [pc, #112]	; (8004ef8 <prvAddNewTaskToReadyList+0xbc>)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004e8a:	4b1d      	ldr	r3, [pc, #116]	; (8004f00 <prvAddNewTaskToReadyList+0xc4>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	3301      	adds	r3, #1
 8004e90:	4a1b      	ldr	r2, [pc, #108]	; (8004f00 <prvAddNewTaskToReadyList+0xc4>)
 8004e92:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e98:	2201      	movs	r2, #1
 8004e9a:	409a      	lsls	r2, r3
 8004e9c:	4b19      	ldr	r3, [pc, #100]	; (8004f04 <prvAddNewTaskToReadyList+0xc8>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	4a18      	ldr	r2, [pc, #96]	; (8004f04 <prvAddNewTaskToReadyList+0xc8>)
 8004ea4:	6013      	str	r3, [r2, #0]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004eaa:	4613      	mov	r3, r2
 8004eac:	009b      	lsls	r3, r3, #2
 8004eae:	4413      	add	r3, r2
 8004eb0:	009b      	lsls	r3, r3, #2
 8004eb2:	4a15      	ldr	r2, [pc, #84]	; (8004f08 <prvAddNewTaskToReadyList+0xcc>)
 8004eb4:	441a      	add	r2, r3
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	3304      	adds	r3, #4
 8004eba:	4619      	mov	r1, r3
 8004ebc:	4610      	mov	r0, r2
 8004ebe:	f7ff fdf5 	bl	8004aac <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004ec2:	f000 fd27 	bl	8005914 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004ec6:	4b0d      	ldr	r3, [pc, #52]	; (8004efc <prvAddNewTaskToReadyList+0xc0>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d00e      	beq.n	8004eec <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004ece:	4b0a      	ldr	r3, [pc, #40]	; (8004ef8 <prvAddNewTaskToReadyList+0xbc>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	d207      	bcs.n	8004eec <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004edc:	4b0b      	ldr	r3, [pc, #44]	; (8004f0c <prvAddNewTaskToReadyList+0xd0>)
 8004ede:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ee2:	601a      	str	r2, [r3, #0]
 8004ee4:	f3bf 8f4f 	dsb	sy
 8004ee8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004eec:	bf00      	nop
 8004eee:	3708      	adds	r7, #8
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}
 8004ef4:	2000076c 	.word	0x2000076c
 8004ef8:	2000066c 	.word	0x2000066c
 8004efc:	20000778 	.word	0x20000778
 8004f00:	20000788 	.word	0x20000788
 8004f04:	20000774 	.word	0x20000774
 8004f08:	20000670 	.word	0x20000670
 8004f0c:	e000ed04 	.word	0xe000ed04

08004f10 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b084      	sub	sp, #16
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004f18:	2300      	movs	r3, #0
 8004f1a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d017      	beq.n	8004f52 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004f22:	4b13      	ldr	r3, [pc, #76]	; (8004f70 <vTaskDelay+0x60>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d00a      	beq.n	8004f40 <vTaskDelay+0x30>
	__asm volatile
 8004f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f2e:	f383 8811 	msr	BASEPRI, r3
 8004f32:	f3bf 8f6f 	isb	sy
 8004f36:	f3bf 8f4f 	dsb	sy
 8004f3a:	60bb      	str	r3, [r7, #8]
}
 8004f3c:	bf00      	nop
 8004f3e:	e7fe      	b.n	8004f3e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004f40:	f000 f884 	bl	800504c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004f44:	2100      	movs	r1, #0
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f000 fb1e 	bl	8005588 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004f4c:	f000 f88c 	bl	8005068 <xTaskResumeAll>
 8004f50:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d107      	bne.n	8004f68 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004f58:	4b06      	ldr	r3, [pc, #24]	; (8004f74 <vTaskDelay+0x64>)
 8004f5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f5e:	601a      	str	r2, [r3, #0]
 8004f60:	f3bf 8f4f 	dsb	sy
 8004f64:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004f68:	bf00      	nop
 8004f6a:	3710      	adds	r7, #16
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd80      	pop	{r7, pc}
 8004f70:	20000794 	.word	0x20000794
 8004f74:	e000ed04 	.word	0xe000ed04

08004f78 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b08a      	sub	sp, #40	; 0x28
 8004f7c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004f82:	2300      	movs	r3, #0
 8004f84:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004f86:	463a      	mov	r2, r7
 8004f88:	1d39      	adds	r1, r7, #4
 8004f8a:	f107 0308 	add.w	r3, r7, #8
 8004f8e:	4618      	mov	r0, r3
 8004f90:	f7fb ffe4 	bl	8000f5c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004f94:	6839      	ldr	r1, [r7, #0]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	68ba      	ldr	r2, [r7, #8]
 8004f9a:	9202      	str	r2, [sp, #8]
 8004f9c:	9301      	str	r3, [sp, #4]
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	9300      	str	r3, [sp, #0]
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	460a      	mov	r2, r1
 8004fa6:	4921      	ldr	r1, [pc, #132]	; (800502c <vTaskStartScheduler+0xb4>)
 8004fa8:	4821      	ldr	r0, [pc, #132]	; (8005030 <vTaskStartScheduler+0xb8>)
 8004faa:	f7ff fe06 	bl	8004bba <xTaskCreateStatic>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	4a20      	ldr	r2, [pc, #128]	; (8005034 <vTaskStartScheduler+0xbc>)
 8004fb2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004fb4:	4b1f      	ldr	r3, [pc, #124]	; (8005034 <vTaskStartScheduler+0xbc>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d002      	beq.n	8004fc2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	617b      	str	r3, [r7, #20]
 8004fc0:	e001      	b.n	8004fc6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	2b01      	cmp	r3, #1
 8004fca:	d11b      	bne.n	8005004 <vTaskStartScheduler+0x8c>
	__asm volatile
 8004fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fd0:	f383 8811 	msr	BASEPRI, r3
 8004fd4:	f3bf 8f6f 	isb	sy
 8004fd8:	f3bf 8f4f 	dsb	sy
 8004fdc:	613b      	str	r3, [r7, #16]
}
 8004fde:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004fe0:	4b15      	ldr	r3, [pc, #84]	; (8005038 <vTaskStartScheduler+0xc0>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	334c      	adds	r3, #76	; 0x4c
 8004fe6:	4a15      	ldr	r2, [pc, #84]	; (800503c <vTaskStartScheduler+0xc4>)
 8004fe8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004fea:	4b15      	ldr	r3, [pc, #84]	; (8005040 <vTaskStartScheduler+0xc8>)
 8004fec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004ff0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004ff2:	4b14      	ldr	r3, [pc, #80]	; (8005044 <vTaskStartScheduler+0xcc>)
 8004ff4:	2201      	movs	r2, #1
 8004ff6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004ff8:	4b13      	ldr	r3, [pc, #76]	; (8005048 <vTaskStartScheduler+0xd0>)
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004ffe:	f000 fbb7 	bl	8005770 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005002:	e00e      	b.n	8005022 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800500a:	d10a      	bne.n	8005022 <vTaskStartScheduler+0xaa>
	__asm volatile
 800500c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005010:	f383 8811 	msr	BASEPRI, r3
 8005014:	f3bf 8f6f 	isb	sy
 8005018:	f3bf 8f4f 	dsb	sy
 800501c:	60fb      	str	r3, [r7, #12]
}
 800501e:	bf00      	nop
 8005020:	e7fe      	b.n	8005020 <vTaskStartScheduler+0xa8>
}
 8005022:	bf00      	nop
 8005024:	3718      	adds	r7, #24
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}
 800502a:	bf00      	nop
 800502c:	08008f18 	.word	0x08008f18
 8005030:	080053d5 	.word	0x080053d5
 8005034:	20000790 	.word	0x20000790
 8005038:	2000066c 	.word	0x2000066c
 800503c:	20000010 	.word	0x20000010
 8005040:	2000078c 	.word	0x2000078c
 8005044:	20000778 	.word	0x20000778
 8005048:	20000770 	.word	0x20000770

0800504c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800504c:	b480      	push	{r7}
 800504e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005050:	4b04      	ldr	r3, [pc, #16]	; (8005064 <vTaskSuspendAll+0x18>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	3301      	adds	r3, #1
 8005056:	4a03      	ldr	r2, [pc, #12]	; (8005064 <vTaskSuspendAll+0x18>)
 8005058:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800505a:	bf00      	nop
 800505c:	46bd      	mov	sp, r7
 800505e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005062:	4770      	bx	lr
 8005064:	20000794 	.word	0x20000794

08005068 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b084      	sub	sp, #16
 800506c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800506e:	2300      	movs	r3, #0
 8005070:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005072:	2300      	movs	r3, #0
 8005074:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005076:	4b41      	ldr	r3, [pc, #260]	; (800517c <xTaskResumeAll+0x114>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d10a      	bne.n	8005094 <xTaskResumeAll+0x2c>
	__asm volatile
 800507e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005082:	f383 8811 	msr	BASEPRI, r3
 8005086:	f3bf 8f6f 	isb	sy
 800508a:	f3bf 8f4f 	dsb	sy
 800508e:	603b      	str	r3, [r7, #0]
}
 8005090:	bf00      	nop
 8005092:	e7fe      	b.n	8005092 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005094:	f000 fc0e 	bl	80058b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005098:	4b38      	ldr	r3, [pc, #224]	; (800517c <xTaskResumeAll+0x114>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	3b01      	subs	r3, #1
 800509e:	4a37      	ldr	r2, [pc, #220]	; (800517c <xTaskResumeAll+0x114>)
 80050a0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80050a2:	4b36      	ldr	r3, [pc, #216]	; (800517c <xTaskResumeAll+0x114>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d161      	bne.n	800516e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80050aa:	4b35      	ldr	r3, [pc, #212]	; (8005180 <xTaskResumeAll+0x118>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d05d      	beq.n	800516e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80050b2:	e02e      	b.n	8005112 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80050b4:	4b33      	ldr	r3, [pc, #204]	; (8005184 <xTaskResumeAll+0x11c>)
 80050b6:	68db      	ldr	r3, [r3, #12]
 80050b8:	68db      	ldr	r3, [r3, #12]
 80050ba:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	3318      	adds	r3, #24
 80050c0:	4618      	mov	r0, r3
 80050c2:	f7ff fd50 	bl	8004b66 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	3304      	adds	r3, #4
 80050ca:	4618      	mov	r0, r3
 80050cc:	f7ff fd4b 	bl	8004b66 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050d4:	2201      	movs	r2, #1
 80050d6:	409a      	lsls	r2, r3
 80050d8:	4b2b      	ldr	r3, [pc, #172]	; (8005188 <xTaskResumeAll+0x120>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4313      	orrs	r3, r2
 80050de:	4a2a      	ldr	r2, [pc, #168]	; (8005188 <xTaskResumeAll+0x120>)
 80050e0:	6013      	str	r3, [r2, #0]
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050e6:	4613      	mov	r3, r2
 80050e8:	009b      	lsls	r3, r3, #2
 80050ea:	4413      	add	r3, r2
 80050ec:	009b      	lsls	r3, r3, #2
 80050ee:	4a27      	ldr	r2, [pc, #156]	; (800518c <xTaskResumeAll+0x124>)
 80050f0:	441a      	add	r2, r3
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	3304      	adds	r3, #4
 80050f6:	4619      	mov	r1, r3
 80050f8:	4610      	mov	r0, r2
 80050fa:	f7ff fcd7 	bl	8004aac <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005102:	4b23      	ldr	r3, [pc, #140]	; (8005190 <xTaskResumeAll+0x128>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005108:	429a      	cmp	r2, r3
 800510a:	d302      	bcc.n	8005112 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800510c:	4b21      	ldr	r3, [pc, #132]	; (8005194 <xTaskResumeAll+0x12c>)
 800510e:	2201      	movs	r2, #1
 8005110:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005112:	4b1c      	ldr	r3, [pc, #112]	; (8005184 <xTaskResumeAll+0x11c>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d1cc      	bne.n	80050b4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d001      	beq.n	8005124 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005120:	f000 fa12 	bl	8005548 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005124:	4b1c      	ldr	r3, [pc, #112]	; (8005198 <xTaskResumeAll+0x130>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d010      	beq.n	8005152 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005130:	f000 f836 	bl	80051a0 <xTaskIncrementTick>
 8005134:	4603      	mov	r3, r0
 8005136:	2b00      	cmp	r3, #0
 8005138:	d002      	beq.n	8005140 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800513a:	4b16      	ldr	r3, [pc, #88]	; (8005194 <xTaskResumeAll+0x12c>)
 800513c:	2201      	movs	r2, #1
 800513e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	3b01      	subs	r3, #1
 8005144:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d1f1      	bne.n	8005130 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800514c:	4b12      	ldr	r3, [pc, #72]	; (8005198 <xTaskResumeAll+0x130>)
 800514e:	2200      	movs	r2, #0
 8005150:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005152:	4b10      	ldr	r3, [pc, #64]	; (8005194 <xTaskResumeAll+0x12c>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d009      	beq.n	800516e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800515a:	2301      	movs	r3, #1
 800515c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800515e:	4b0f      	ldr	r3, [pc, #60]	; (800519c <xTaskResumeAll+0x134>)
 8005160:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005164:	601a      	str	r2, [r3, #0]
 8005166:	f3bf 8f4f 	dsb	sy
 800516a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800516e:	f000 fbd1 	bl	8005914 <vPortExitCritical>

	return xAlreadyYielded;
 8005172:	68bb      	ldr	r3, [r7, #8]
}
 8005174:	4618      	mov	r0, r3
 8005176:	3710      	adds	r7, #16
 8005178:	46bd      	mov	sp, r7
 800517a:	bd80      	pop	{r7, pc}
 800517c:	20000794 	.word	0x20000794
 8005180:	2000076c 	.word	0x2000076c
 8005184:	2000072c 	.word	0x2000072c
 8005188:	20000774 	.word	0x20000774
 800518c:	20000670 	.word	0x20000670
 8005190:	2000066c 	.word	0x2000066c
 8005194:	20000780 	.word	0x20000780
 8005198:	2000077c 	.word	0x2000077c
 800519c:	e000ed04 	.word	0xe000ed04

080051a0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b086      	sub	sp, #24
 80051a4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80051a6:	2300      	movs	r3, #0
 80051a8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80051aa:	4b4e      	ldr	r3, [pc, #312]	; (80052e4 <xTaskIncrementTick+0x144>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	f040 808e 	bne.w	80052d0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80051b4:	4b4c      	ldr	r3, [pc, #304]	; (80052e8 <xTaskIncrementTick+0x148>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	3301      	adds	r3, #1
 80051ba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80051bc:	4a4a      	ldr	r2, [pc, #296]	; (80052e8 <xTaskIncrementTick+0x148>)
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d120      	bne.n	800520a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80051c8:	4b48      	ldr	r3, [pc, #288]	; (80052ec <xTaskIncrementTick+0x14c>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d00a      	beq.n	80051e8 <xTaskIncrementTick+0x48>
	__asm volatile
 80051d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051d6:	f383 8811 	msr	BASEPRI, r3
 80051da:	f3bf 8f6f 	isb	sy
 80051de:	f3bf 8f4f 	dsb	sy
 80051e2:	603b      	str	r3, [r7, #0]
}
 80051e4:	bf00      	nop
 80051e6:	e7fe      	b.n	80051e6 <xTaskIncrementTick+0x46>
 80051e8:	4b40      	ldr	r3, [pc, #256]	; (80052ec <xTaskIncrementTick+0x14c>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	60fb      	str	r3, [r7, #12]
 80051ee:	4b40      	ldr	r3, [pc, #256]	; (80052f0 <xTaskIncrementTick+0x150>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a3e      	ldr	r2, [pc, #248]	; (80052ec <xTaskIncrementTick+0x14c>)
 80051f4:	6013      	str	r3, [r2, #0]
 80051f6:	4a3e      	ldr	r2, [pc, #248]	; (80052f0 <xTaskIncrementTick+0x150>)
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	6013      	str	r3, [r2, #0]
 80051fc:	4b3d      	ldr	r3, [pc, #244]	; (80052f4 <xTaskIncrementTick+0x154>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	3301      	adds	r3, #1
 8005202:	4a3c      	ldr	r2, [pc, #240]	; (80052f4 <xTaskIncrementTick+0x154>)
 8005204:	6013      	str	r3, [r2, #0]
 8005206:	f000 f99f 	bl	8005548 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800520a:	4b3b      	ldr	r3, [pc, #236]	; (80052f8 <xTaskIncrementTick+0x158>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	693a      	ldr	r2, [r7, #16]
 8005210:	429a      	cmp	r2, r3
 8005212:	d348      	bcc.n	80052a6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005214:	4b35      	ldr	r3, [pc, #212]	; (80052ec <xTaskIncrementTick+0x14c>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d104      	bne.n	8005228 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800521e:	4b36      	ldr	r3, [pc, #216]	; (80052f8 <xTaskIncrementTick+0x158>)
 8005220:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005224:	601a      	str	r2, [r3, #0]
					break;
 8005226:	e03e      	b.n	80052a6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005228:	4b30      	ldr	r3, [pc, #192]	; (80052ec <xTaskIncrementTick+0x14c>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	68db      	ldr	r3, [r3, #12]
 800522e:	68db      	ldr	r3, [r3, #12]
 8005230:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005238:	693a      	ldr	r2, [r7, #16]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	429a      	cmp	r2, r3
 800523e:	d203      	bcs.n	8005248 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005240:	4a2d      	ldr	r2, [pc, #180]	; (80052f8 <xTaskIncrementTick+0x158>)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005246:	e02e      	b.n	80052a6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	3304      	adds	r3, #4
 800524c:	4618      	mov	r0, r3
 800524e:	f7ff fc8a 	bl	8004b66 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005256:	2b00      	cmp	r3, #0
 8005258:	d004      	beq.n	8005264 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	3318      	adds	r3, #24
 800525e:	4618      	mov	r0, r3
 8005260:	f7ff fc81 	bl	8004b66 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005268:	2201      	movs	r2, #1
 800526a:	409a      	lsls	r2, r3
 800526c:	4b23      	ldr	r3, [pc, #140]	; (80052fc <xTaskIncrementTick+0x15c>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4313      	orrs	r3, r2
 8005272:	4a22      	ldr	r2, [pc, #136]	; (80052fc <xTaskIncrementTick+0x15c>)
 8005274:	6013      	str	r3, [r2, #0]
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800527a:	4613      	mov	r3, r2
 800527c:	009b      	lsls	r3, r3, #2
 800527e:	4413      	add	r3, r2
 8005280:	009b      	lsls	r3, r3, #2
 8005282:	4a1f      	ldr	r2, [pc, #124]	; (8005300 <xTaskIncrementTick+0x160>)
 8005284:	441a      	add	r2, r3
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	3304      	adds	r3, #4
 800528a:	4619      	mov	r1, r3
 800528c:	4610      	mov	r0, r2
 800528e:	f7ff fc0d 	bl	8004aac <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005296:	4b1b      	ldr	r3, [pc, #108]	; (8005304 <xTaskIncrementTick+0x164>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800529c:	429a      	cmp	r2, r3
 800529e:	d3b9      	bcc.n	8005214 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80052a0:	2301      	movs	r3, #1
 80052a2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80052a4:	e7b6      	b.n	8005214 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80052a6:	4b17      	ldr	r3, [pc, #92]	; (8005304 <xTaskIncrementTick+0x164>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052ac:	4914      	ldr	r1, [pc, #80]	; (8005300 <xTaskIncrementTick+0x160>)
 80052ae:	4613      	mov	r3, r2
 80052b0:	009b      	lsls	r3, r3, #2
 80052b2:	4413      	add	r3, r2
 80052b4:	009b      	lsls	r3, r3, #2
 80052b6:	440b      	add	r3, r1
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	2b01      	cmp	r3, #1
 80052bc:	d901      	bls.n	80052c2 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80052be:	2301      	movs	r3, #1
 80052c0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80052c2:	4b11      	ldr	r3, [pc, #68]	; (8005308 <xTaskIncrementTick+0x168>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d007      	beq.n	80052da <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80052ca:	2301      	movs	r3, #1
 80052cc:	617b      	str	r3, [r7, #20]
 80052ce:	e004      	b.n	80052da <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80052d0:	4b0e      	ldr	r3, [pc, #56]	; (800530c <xTaskIncrementTick+0x16c>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	3301      	adds	r3, #1
 80052d6:	4a0d      	ldr	r2, [pc, #52]	; (800530c <xTaskIncrementTick+0x16c>)
 80052d8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80052da:	697b      	ldr	r3, [r7, #20]
}
 80052dc:	4618      	mov	r0, r3
 80052de:	3718      	adds	r7, #24
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bd80      	pop	{r7, pc}
 80052e4:	20000794 	.word	0x20000794
 80052e8:	20000770 	.word	0x20000770
 80052ec:	20000724 	.word	0x20000724
 80052f0:	20000728 	.word	0x20000728
 80052f4:	20000784 	.word	0x20000784
 80052f8:	2000078c 	.word	0x2000078c
 80052fc:	20000774 	.word	0x20000774
 8005300:	20000670 	.word	0x20000670
 8005304:	2000066c 	.word	0x2000066c
 8005308:	20000780 	.word	0x20000780
 800530c:	2000077c 	.word	0x2000077c

08005310 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005310:	b480      	push	{r7}
 8005312:	b087      	sub	sp, #28
 8005314:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005316:	4b29      	ldr	r3, [pc, #164]	; (80053bc <vTaskSwitchContext+0xac>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d003      	beq.n	8005326 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800531e:	4b28      	ldr	r3, [pc, #160]	; (80053c0 <vTaskSwitchContext+0xb0>)
 8005320:	2201      	movs	r2, #1
 8005322:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005324:	e044      	b.n	80053b0 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8005326:	4b26      	ldr	r3, [pc, #152]	; (80053c0 <vTaskSwitchContext+0xb0>)
 8005328:	2200      	movs	r2, #0
 800532a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800532c:	4b25      	ldr	r3, [pc, #148]	; (80053c4 <vTaskSwitchContext+0xb4>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	fab3 f383 	clz	r3, r3
 8005338:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800533a:	7afb      	ldrb	r3, [r7, #11]
 800533c:	f1c3 031f 	rsb	r3, r3, #31
 8005340:	617b      	str	r3, [r7, #20]
 8005342:	4921      	ldr	r1, [pc, #132]	; (80053c8 <vTaskSwitchContext+0xb8>)
 8005344:	697a      	ldr	r2, [r7, #20]
 8005346:	4613      	mov	r3, r2
 8005348:	009b      	lsls	r3, r3, #2
 800534a:	4413      	add	r3, r2
 800534c:	009b      	lsls	r3, r3, #2
 800534e:	440b      	add	r3, r1
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d10a      	bne.n	800536c <vTaskSwitchContext+0x5c>
	__asm volatile
 8005356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800535a:	f383 8811 	msr	BASEPRI, r3
 800535e:	f3bf 8f6f 	isb	sy
 8005362:	f3bf 8f4f 	dsb	sy
 8005366:	607b      	str	r3, [r7, #4]
}
 8005368:	bf00      	nop
 800536a:	e7fe      	b.n	800536a <vTaskSwitchContext+0x5a>
 800536c:	697a      	ldr	r2, [r7, #20]
 800536e:	4613      	mov	r3, r2
 8005370:	009b      	lsls	r3, r3, #2
 8005372:	4413      	add	r3, r2
 8005374:	009b      	lsls	r3, r3, #2
 8005376:	4a14      	ldr	r2, [pc, #80]	; (80053c8 <vTaskSwitchContext+0xb8>)
 8005378:	4413      	add	r3, r2
 800537a:	613b      	str	r3, [r7, #16]
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	685a      	ldr	r2, [r3, #4]
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	605a      	str	r2, [r3, #4]
 8005386:	693b      	ldr	r3, [r7, #16]
 8005388:	685a      	ldr	r2, [r3, #4]
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	3308      	adds	r3, #8
 800538e:	429a      	cmp	r2, r3
 8005390:	d104      	bne.n	800539c <vTaskSwitchContext+0x8c>
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	685a      	ldr	r2, [r3, #4]
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	605a      	str	r2, [r3, #4]
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	68db      	ldr	r3, [r3, #12]
 80053a2:	4a0a      	ldr	r2, [pc, #40]	; (80053cc <vTaskSwitchContext+0xbc>)
 80053a4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80053a6:	4b09      	ldr	r3, [pc, #36]	; (80053cc <vTaskSwitchContext+0xbc>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	334c      	adds	r3, #76	; 0x4c
 80053ac:	4a08      	ldr	r2, [pc, #32]	; (80053d0 <vTaskSwitchContext+0xc0>)
 80053ae:	6013      	str	r3, [r2, #0]
}
 80053b0:	bf00      	nop
 80053b2:	371c      	adds	r7, #28
 80053b4:	46bd      	mov	sp, r7
 80053b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ba:	4770      	bx	lr
 80053bc:	20000794 	.word	0x20000794
 80053c0:	20000780 	.word	0x20000780
 80053c4:	20000774 	.word	0x20000774
 80053c8:	20000670 	.word	0x20000670
 80053cc:	2000066c 	.word	0x2000066c
 80053d0:	20000010 	.word	0x20000010

080053d4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b082      	sub	sp, #8
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80053dc:	f000 f852 	bl	8005484 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80053e0:	4b06      	ldr	r3, [pc, #24]	; (80053fc <prvIdleTask+0x28>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	2b01      	cmp	r3, #1
 80053e6:	d9f9      	bls.n	80053dc <prvIdleTask+0x8>
			{
				taskYIELD();
 80053e8:	4b05      	ldr	r3, [pc, #20]	; (8005400 <prvIdleTask+0x2c>)
 80053ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053ee:	601a      	str	r2, [r3, #0]
 80053f0:	f3bf 8f4f 	dsb	sy
 80053f4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80053f8:	e7f0      	b.n	80053dc <prvIdleTask+0x8>
 80053fa:	bf00      	nop
 80053fc:	20000670 	.word	0x20000670
 8005400:	e000ed04 	.word	0xe000ed04

08005404 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b082      	sub	sp, #8
 8005408:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800540a:	2300      	movs	r3, #0
 800540c:	607b      	str	r3, [r7, #4]
 800540e:	e00c      	b.n	800542a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005410:	687a      	ldr	r2, [r7, #4]
 8005412:	4613      	mov	r3, r2
 8005414:	009b      	lsls	r3, r3, #2
 8005416:	4413      	add	r3, r2
 8005418:	009b      	lsls	r3, r3, #2
 800541a:	4a12      	ldr	r2, [pc, #72]	; (8005464 <prvInitialiseTaskLists+0x60>)
 800541c:	4413      	add	r3, r2
 800541e:	4618      	mov	r0, r3
 8005420:	f7ff fb17 	bl	8004a52 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	3301      	adds	r3, #1
 8005428:	607b      	str	r3, [r7, #4]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2b06      	cmp	r3, #6
 800542e:	d9ef      	bls.n	8005410 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005430:	480d      	ldr	r0, [pc, #52]	; (8005468 <prvInitialiseTaskLists+0x64>)
 8005432:	f7ff fb0e 	bl	8004a52 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005436:	480d      	ldr	r0, [pc, #52]	; (800546c <prvInitialiseTaskLists+0x68>)
 8005438:	f7ff fb0b 	bl	8004a52 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800543c:	480c      	ldr	r0, [pc, #48]	; (8005470 <prvInitialiseTaskLists+0x6c>)
 800543e:	f7ff fb08 	bl	8004a52 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005442:	480c      	ldr	r0, [pc, #48]	; (8005474 <prvInitialiseTaskLists+0x70>)
 8005444:	f7ff fb05 	bl	8004a52 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005448:	480b      	ldr	r0, [pc, #44]	; (8005478 <prvInitialiseTaskLists+0x74>)
 800544a:	f7ff fb02 	bl	8004a52 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800544e:	4b0b      	ldr	r3, [pc, #44]	; (800547c <prvInitialiseTaskLists+0x78>)
 8005450:	4a05      	ldr	r2, [pc, #20]	; (8005468 <prvInitialiseTaskLists+0x64>)
 8005452:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005454:	4b0a      	ldr	r3, [pc, #40]	; (8005480 <prvInitialiseTaskLists+0x7c>)
 8005456:	4a05      	ldr	r2, [pc, #20]	; (800546c <prvInitialiseTaskLists+0x68>)
 8005458:	601a      	str	r2, [r3, #0]
}
 800545a:	bf00      	nop
 800545c:	3708      	adds	r7, #8
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}
 8005462:	bf00      	nop
 8005464:	20000670 	.word	0x20000670
 8005468:	200006fc 	.word	0x200006fc
 800546c:	20000710 	.word	0x20000710
 8005470:	2000072c 	.word	0x2000072c
 8005474:	20000740 	.word	0x20000740
 8005478:	20000758 	.word	0x20000758
 800547c:	20000724 	.word	0x20000724
 8005480:	20000728 	.word	0x20000728

08005484 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b082      	sub	sp, #8
 8005488:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800548a:	e019      	b.n	80054c0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800548c:	f000 fa12 	bl	80058b4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005490:	4b10      	ldr	r3, [pc, #64]	; (80054d4 <prvCheckTasksWaitingTermination+0x50>)
 8005492:	68db      	ldr	r3, [r3, #12]
 8005494:	68db      	ldr	r3, [r3, #12]
 8005496:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	3304      	adds	r3, #4
 800549c:	4618      	mov	r0, r3
 800549e:	f7ff fb62 	bl	8004b66 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80054a2:	4b0d      	ldr	r3, [pc, #52]	; (80054d8 <prvCheckTasksWaitingTermination+0x54>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	3b01      	subs	r3, #1
 80054a8:	4a0b      	ldr	r2, [pc, #44]	; (80054d8 <prvCheckTasksWaitingTermination+0x54>)
 80054aa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80054ac:	4b0b      	ldr	r3, [pc, #44]	; (80054dc <prvCheckTasksWaitingTermination+0x58>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	3b01      	subs	r3, #1
 80054b2:	4a0a      	ldr	r2, [pc, #40]	; (80054dc <prvCheckTasksWaitingTermination+0x58>)
 80054b4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80054b6:	f000 fa2d 	bl	8005914 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f000 f810 	bl	80054e0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80054c0:	4b06      	ldr	r3, [pc, #24]	; (80054dc <prvCheckTasksWaitingTermination+0x58>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d1e1      	bne.n	800548c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80054c8:	bf00      	nop
 80054ca:	bf00      	nop
 80054cc:	3708      	adds	r7, #8
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}
 80054d2:	bf00      	nop
 80054d4:	20000740 	.word	0x20000740
 80054d8:	2000076c 	.word	0x2000076c
 80054dc:	20000754 	.word	0x20000754

080054e0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b084      	sub	sp, #16
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	334c      	adds	r3, #76	; 0x4c
 80054ec:	4618      	mov	r0, r3
 80054ee:	f001 faf3 	bl	8006ad8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d108      	bne.n	800550e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005500:	4618      	mov	r0, r3
 8005502:	f000 fb85 	bl	8005c10 <vPortFree>
				vPortFree( pxTCB );
 8005506:	6878      	ldr	r0, [r7, #4]
 8005508:	f000 fb82 	bl	8005c10 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800550c:	e018      	b.n	8005540 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8005514:	2b01      	cmp	r3, #1
 8005516:	d103      	bne.n	8005520 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005518:	6878      	ldr	r0, [r7, #4]
 800551a:	f000 fb79 	bl	8005c10 <vPortFree>
	}
 800551e:	e00f      	b.n	8005540 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8005526:	2b02      	cmp	r3, #2
 8005528:	d00a      	beq.n	8005540 <prvDeleteTCB+0x60>
	__asm volatile
 800552a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800552e:	f383 8811 	msr	BASEPRI, r3
 8005532:	f3bf 8f6f 	isb	sy
 8005536:	f3bf 8f4f 	dsb	sy
 800553a:	60fb      	str	r3, [r7, #12]
}
 800553c:	bf00      	nop
 800553e:	e7fe      	b.n	800553e <prvDeleteTCB+0x5e>
	}
 8005540:	bf00      	nop
 8005542:	3710      	adds	r7, #16
 8005544:	46bd      	mov	sp, r7
 8005546:	bd80      	pop	{r7, pc}

08005548 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005548:	b480      	push	{r7}
 800554a:	b083      	sub	sp, #12
 800554c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800554e:	4b0c      	ldr	r3, [pc, #48]	; (8005580 <prvResetNextTaskUnblockTime+0x38>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d104      	bne.n	8005562 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005558:	4b0a      	ldr	r3, [pc, #40]	; (8005584 <prvResetNextTaskUnblockTime+0x3c>)
 800555a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800555e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005560:	e008      	b.n	8005574 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005562:	4b07      	ldr	r3, [pc, #28]	; (8005580 <prvResetNextTaskUnblockTime+0x38>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	68db      	ldr	r3, [r3, #12]
 8005568:	68db      	ldr	r3, [r3, #12]
 800556a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	685b      	ldr	r3, [r3, #4]
 8005570:	4a04      	ldr	r2, [pc, #16]	; (8005584 <prvResetNextTaskUnblockTime+0x3c>)
 8005572:	6013      	str	r3, [r2, #0]
}
 8005574:	bf00      	nop
 8005576:	370c      	adds	r7, #12
 8005578:	46bd      	mov	sp, r7
 800557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557e:	4770      	bx	lr
 8005580:	20000724 	.word	0x20000724
 8005584:	2000078c 	.word	0x2000078c

08005588 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b084      	sub	sp, #16
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
 8005590:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005592:	4b29      	ldr	r3, [pc, #164]	; (8005638 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005598:	4b28      	ldr	r3, [pc, #160]	; (800563c <prvAddCurrentTaskToDelayedList+0xb4>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	3304      	adds	r3, #4
 800559e:	4618      	mov	r0, r3
 80055a0:	f7ff fae1 	bl	8004b66 <uxListRemove>
 80055a4:	4603      	mov	r3, r0
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d10b      	bne.n	80055c2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80055aa:	4b24      	ldr	r3, [pc, #144]	; (800563c <prvAddCurrentTaskToDelayedList+0xb4>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055b0:	2201      	movs	r2, #1
 80055b2:	fa02 f303 	lsl.w	r3, r2, r3
 80055b6:	43da      	mvns	r2, r3
 80055b8:	4b21      	ldr	r3, [pc, #132]	; (8005640 <prvAddCurrentTaskToDelayedList+0xb8>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4013      	ands	r3, r2
 80055be:	4a20      	ldr	r2, [pc, #128]	; (8005640 <prvAddCurrentTaskToDelayedList+0xb8>)
 80055c0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80055c8:	d10a      	bne.n	80055e0 <prvAddCurrentTaskToDelayedList+0x58>
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d007      	beq.n	80055e0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80055d0:	4b1a      	ldr	r3, [pc, #104]	; (800563c <prvAddCurrentTaskToDelayedList+0xb4>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	3304      	adds	r3, #4
 80055d6:	4619      	mov	r1, r3
 80055d8:	481a      	ldr	r0, [pc, #104]	; (8005644 <prvAddCurrentTaskToDelayedList+0xbc>)
 80055da:	f7ff fa67 	bl	8004aac <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80055de:	e026      	b.n	800562e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80055e0:	68fa      	ldr	r2, [r7, #12]
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	4413      	add	r3, r2
 80055e6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80055e8:	4b14      	ldr	r3, [pc, #80]	; (800563c <prvAddCurrentTaskToDelayedList+0xb4>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	68ba      	ldr	r2, [r7, #8]
 80055ee:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80055f0:	68ba      	ldr	r2, [r7, #8]
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	429a      	cmp	r2, r3
 80055f6:	d209      	bcs.n	800560c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80055f8:	4b13      	ldr	r3, [pc, #76]	; (8005648 <prvAddCurrentTaskToDelayedList+0xc0>)
 80055fa:	681a      	ldr	r2, [r3, #0]
 80055fc:	4b0f      	ldr	r3, [pc, #60]	; (800563c <prvAddCurrentTaskToDelayedList+0xb4>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	3304      	adds	r3, #4
 8005602:	4619      	mov	r1, r3
 8005604:	4610      	mov	r0, r2
 8005606:	f7ff fa75 	bl	8004af4 <vListInsert>
}
 800560a:	e010      	b.n	800562e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800560c:	4b0f      	ldr	r3, [pc, #60]	; (800564c <prvAddCurrentTaskToDelayedList+0xc4>)
 800560e:	681a      	ldr	r2, [r3, #0]
 8005610:	4b0a      	ldr	r3, [pc, #40]	; (800563c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	3304      	adds	r3, #4
 8005616:	4619      	mov	r1, r3
 8005618:	4610      	mov	r0, r2
 800561a:	f7ff fa6b 	bl	8004af4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800561e:	4b0c      	ldr	r3, [pc, #48]	; (8005650 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	68ba      	ldr	r2, [r7, #8]
 8005624:	429a      	cmp	r2, r3
 8005626:	d202      	bcs.n	800562e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005628:	4a09      	ldr	r2, [pc, #36]	; (8005650 <prvAddCurrentTaskToDelayedList+0xc8>)
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	6013      	str	r3, [r2, #0]
}
 800562e:	bf00      	nop
 8005630:	3710      	adds	r7, #16
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}
 8005636:	bf00      	nop
 8005638:	20000770 	.word	0x20000770
 800563c:	2000066c 	.word	0x2000066c
 8005640:	20000774 	.word	0x20000774
 8005644:	20000758 	.word	0x20000758
 8005648:	20000728 	.word	0x20000728
 800564c:	20000724 	.word	0x20000724
 8005650:	2000078c 	.word	0x2000078c

08005654 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005654:	b480      	push	{r7}
 8005656:	b085      	sub	sp, #20
 8005658:	af00      	add	r7, sp, #0
 800565a:	60f8      	str	r0, [r7, #12]
 800565c:	60b9      	str	r1, [r7, #8]
 800565e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	3b04      	subs	r3, #4
 8005664:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800566c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	3b04      	subs	r3, #4
 8005672:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	f023 0201 	bic.w	r2, r3, #1
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	3b04      	subs	r3, #4
 8005682:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005684:	4a0c      	ldr	r2, [pc, #48]	; (80056b8 <pxPortInitialiseStack+0x64>)
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	3b14      	subs	r3, #20
 800568e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005690:	687a      	ldr	r2, [r7, #4]
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	3b04      	subs	r3, #4
 800569a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	f06f 0202 	mvn.w	r2, #2
 80056a2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	3b20      	subs	r3, #32
 80056a8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80056aa:	68fb      	ldr	r3, [r7, #12]
}
 80056ac:	4618      	mov	r0, r3
 80056ae:	3714      	adds	r7, #20
 80056b0:	46bd      	mov	sp, r7
 80056b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b6:	4770      	bx	lr
 80056b8:	080056bd 	.word	0x080056bd

080056bc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80056bc:	b480      	push	{r7}
 80056be:	b085      	sub	sp, #20
 80056c0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80056c2:	2300      	movs	r3, #0
 80056c4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80056c6:	4b12      	ldr	r3, [pc, #72]	; (8005710 <prvTaskExitError+0x54>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80056ce:	d00a      	beq.n	80056e6 <prvTaskExitError+0x2a>
	__asm volatile
 80056d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056d4:	f383 8811 	msr	BASEPRI, r3
 80056d8:	f3bf 8f6f 	isb	sy
 80056dc:	f3bf 8f4f 	dsb	sy
 80056e0:	60fb      	str	r3, [r7, #12]
}
 80056e2:	bf00      	nop
 80056e4:	e7fe      	b.n	80056e4 <prvTaskExitError+0x28>
	__asm volatile
 80056e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ea:	f383 8811 	msr	BASEPRI, r3
 80056ee:	f3bf 8f6f 	isb	sy
 80056f2:	f3bf 8f4f 	dsb	sy
 80056f6:	60bb      	str	r3, [r7, #8]
}
 80056f8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80056fa:	bf00      	nop
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d0fc      	beq.n	80056fc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005702:	bf00      	nop
 8005704:	bf00      	nop
 8005706:	3714      	adds	r7, #20
 8005708:	46bd      	mov	sp, r7
 800570a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570e:	4770      	bx	lr
 8005710:	2000000c 	.word	0x2000000c
	...

08005720 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005720:	4b07      	ldr	r3, [pc, #28]	; (8005740 <pxCurrentTCBConst2>)
 8005722:	6819      	ldr	r1, [r3, #0]
 8005724:	6808      	ldr	r0, [r1, #0]
 8005726:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800572a:	f380 8809 	msr	PSP, r0
 800572e:	f3bf 8f6f 	isb	sy
 8005732:	f04f 0000 	mov.w	r0, #0
 8005736:	f380 8811 	msr	BASEPRI, r0
 800573a:	4770      	bx	lr
 800573c:	f3af 8000 	nop.w

08005740 <pxCurrentTCBConst2>:
 8005740:	2000066c 	.word	0x2000066c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005744:	bf00      	nop
 8005746:	bf00      	nop

08005748 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005748:	4808      	ldr	r0, [pc, #32]	; (800576c <prvPortStartFirstTask+0x24>)
 800574a:	6800      	ldr	r0, [r0, #0]
 800574c:	6800      	ldr	r0, [r0, #0]
 800574e:	f380 8808 	msr	MSP, r0
 8005752:	f04f 0000 	mov.w	r0, #0
 8005756:	f380 8814 	msr	CONTROL, r0
 800575a:	b662      	cpsie	i
 800575c:	b661      	cpsie	f
 800575e:	f3bf 8f4f 	dsb	sy
 8005762:	f3bf 8f6f 	isb	sy
 8005766:	df00      	svc	0
 8005768:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800576a:	bf00      	nop
 800576c:	e000ed08 	.word	0xe000ed08

08005770 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b086      	sub	sp, #24
 8005774:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005776:	4b46      	ldr	r3, [pc, #280]	; (8005890 <xPortStartScheduler+0x120>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a46      	ldr	r2, [pc, #280]	; (8005894 <xPortStartScheduler+0x124>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d10a      	bne.n	8005796 <xPortStartScheduler+0x26>
	__asm volatile
 8005780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005784:	f383 8811 	msr	BASEPRI, r3
 8005788:	f3bf 8f6f 	isb	sy
 800578c:	f3bf 8f4f 	dsb	sy
 8005790:	613b      	str	r3, [r7, #16]
}
 8005792:	bf00      	nop
 8005794:	e7fe      	b.n	8005794 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005796:	4b3e      	ldr	r3, [pc, #248]	; (8005890 <xPortStartScheduler+0x120>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a3f      	ldr	r2, [pc, #252]	; (8005898 <xPortStartScheduler+0x128>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d10a      	bne.n	80057b6 <xPortStartScheduler+0x46>
	__asm volatile
 80057a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057a4:	f383 8811 	msr	BASEPRI, r3
 80057a8:	f3bf 8f6f 	isb	sy
 80057ac:	f3bf 8f4f 	dsb	sy
 80057b0:	60fb      	str	r3, [r7, #12]
}
 80057b2:	bf00      	nop
 80057b4:	e7fe      	b.n	80057b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80057b6:	4b39      	ldr	r3, [pc, #228]	; (800589c <xPortStartScheduler+0x12c>)
 80057b8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	781b      	ldrb	r3, [r3, #0]
 80057be:	b2db      	uxtb	r3, r3
 80057c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	22ff      	movs	r2, #255	; 0xff
 80057c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	781b      	ldrb	r3, [r3, #0]
 80057cc:	b2db      	uxtb	r3, r3
 80057ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80057d0:	78fb      	ldrb	r3, [r7, #3]
 80057d2:	b2db      	uxtb	r3, r3
 80057d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80057d8:	b2da      	uxtb	r2, r3
 80057da:	4b31      	ldr	r3, [pc, #196]	; (80058a0 <xPortStartScheduler+0x130>)
 80057dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80057de:	4b31      	ldr	r3, [pc, #196]	; (80058a4 <xPortStartScheduler+0x134>)
 80057e0:	2207      	movs	r2, #7
 80057e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80057e4:	e009      	b.n	80057fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80057e6:	4b2f      	ldr	r3, [pc, #188]	; (80058a4 <xPortStartScheduler+0x134>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	3b01      	subs	r3, #1
 80057ec:	4a2d      	ldr	r2, [pc, #180]	; (80058a4 <xPortStartScheduler+0x134>)
 80057ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80057f0:	78fb      	ldrb	r3, [r7, #3]
 80057f2:	b2db      	uxtb	r3, r3
 80057f4:	005b      	lsls	r3, r3, #1
 80057f6:	b2db      	uxtb	r3, r3
 80057f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80057fa:	78fb      	ldrb	r3, [r7, #3]
 80057fc:	b2db      	uxtb	r3, r3
 80057fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005802:	2b80      	cmp	r3, #128	; 0x80
 8005804:	d0ef      	beq.n	80057e6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005806:	4b27      	ldr	r3, [pc, #156]	; (80058a4 <xPortStartScheduler+0x134>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f1c3 0307 	rsb	r3, r3, #7
 800580e:	2b04      	cmp	r3, #4
 8005810:	d00a      	beq.n	8005828 <xPortStartScheduler+0xb8>
	__asm volatile
 8005812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005816:	f383 8811 	msr	BASEPRI, r3
 800581a:	f3bf 8f6f 	isb	sy
 800581e:	f3bf 8f4f 	dsb	sy
 8005822:	60bb      	str	r3, [r7, #8]
}
 8005824:	bf00      	nop
 8005826:	e7fe      	b.n	8005826 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005828:	4b1e      	ldr	r3, [pc, #120]	; (80058a4 <xPortStartScheduler+0x134>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	021b      	lsls	r3, r3, #8
 800582e:	4a1d      	ldr	r2, [pc, #116]	; (80058a4 <xPortStartScheduler+0x134>)
 8005830:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005832:	4b1c      	ldr	r3, [pc, #112]	; (80058a4 <xPortStartScheduler+0x134>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800583a:	4a1a      	ldr	r2, [pc, #104]	; (80058a4 <xPortStartScheduler+0x134>)
 800583c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	b2da      	uxtb	r2, r3
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005846:	4b18      	ldr	r3, [pc, #96]	; (80058a8 <xPortStartScheduler+0x138>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a17      	ldr	r2, [pc, #92]	; (80058a8 <xPortStartScheduler+0x138>)
 800584c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005850:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005852:	4b15      	ldr	r3, [pc, #84]	; (80058a8 <xPortStartScheduler+0x138>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4a14      	ldr	r2, [pc, #80]	; (80058a8 <xPortStartScheduler+0x138>)
 8005858:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800585c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800585e:	f000 f8dd 	bl	8005a1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005862:	4b12      	ldr	r3, [pc, #72]	; (80058ac <xPortStartScheduler+0x13c>)
 8005864:	2200      	movs	r2, #0
 8005866:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005868:	f000 f8fc 	bl	8005a64 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800586c:	4b10      	ldr	r3, [pc, #64]	; (80058b0 <xPortStartScheduler+0x140>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a0f      	ldr	r2, [pc, #60]	; (80058b0 <xPortStartScheduler+0x140>)
 8005872:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005876:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005878:	f7ff ff66 	bl	8005748 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800587c:	f7ff fd48 	bl	8005310 <vTaskSwitchContext>
	prvTaskExitError();
 8005880:	f7ff ff1c 	bl	80056bc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005884:	2300      	movs	r3, #0
}
 8005886:	4618      	mov	r0, r3
 8005888:	3718      	adds	r7, #24
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}
 800588e:	bf00      	nop
 8005890:	e000ed00 	.word	0xe000ed00
 8005894:	410fc271 	.word	0x410fc271
 8005898:	410fc270 	.word	0x410fc270
 800589c:	e000e400 	.word	0xe000e400
 80058a0:	20000798 	.word	0x20000798
 80058a4:	2000079c 	.word	0x2000079c
 80058a8:	e000ed20 	.word	0xe000ed20
 80058ac:	2000000c 	.word	0x2000000c
 80058b0:	e000ef34 	.word	0xe000ef34

080058b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80058b4:	b480      	push	{r7}
 80058b6:	b083      	sub	sp, #12
 80058b8:	af00      	add	r7, sp, #0
	__asm volatile
 80058ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058be:	f383 8811 	msr	BASEPRI, r3
 80058c2:	f3bf 8f6f 	isb	sy
 80058c6:	f3bf 8f4f 	dsb	sy
 80058ca:	607b      	str	r3, [r7, #4]
}
 80058cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80058ce:	4b0f      	ldr	r3, [pc, #60]	; (800590c <vPortEnterCritical+0x58>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	3301      	adds	r3, #1
 80058d4:	4a0d      	ldr	r2, [pc, #52]	; (800590c <vPortEnterCritical+0x58>)
 80058d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80058d8:	4b0c      	ldr	r3, [pc, #48]	; (800590c <vPortEnterCritical+0x58>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	2b01      	cmp	r3, #1
 80058de:	d10f      	bne.n	8005900 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80058e0:	4b0b      	ldr	r3, [pc, #44]	; (8005910 <vPortEnterCritical+0x5c>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	b2db      	uxtb	r3, r3
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d00a      	beq.n	8005900 <vPortEnterCritical+0x4c>
	__asm volatile
 80058ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058ee:	f383 8811 	msr	BASEPRI, r3
 80058f2:	f3bf 8f6f 	isb	sy
 80058f6:	f3bf 8f4f 	dsb	sy
 80058fa:	603b      	str	r3, [r7, #0]
}
 80058fc:	bf00      	nop
 80058fe:	e7fe      	b.n	80058fe <vPortEnterCritical+0x4a>
	}
}
 8005900:	bf00      	nop
 8005902:	370c      	adds	r7, #12
 8005904:	46bd      	mov	sp, r7
 8005906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590a:	4770      	bx	lr
 800590c:	2000000c 	.word	0x2000000c
 8005910:	e000ed04 	.word	0xe000ed04

08005914 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005914:	b480      	push	{r7}
 8005916:	b083      	sub	sp, #12
 8005918:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800591a:	4b12      	ldr	r3, [pc, #72]	; (8005964 <vPortExitCritical+0x50>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d10a      	bne.n	8005938 <vPortExitCritical+0x24>
	__asm volatile
 8005922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005926:	f383 8811 	msr	BASEPRI, r3
 800592a:	f3bf 8f6f 	isb	sy
 800592e:	f3bf 8f4f 	dsb	sy
 8005932:	607b      	str	r3, [r7, #4]
}
 8005934:	bf00      	nop
 8005936:	e7fe      	b.n	8005936 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005938:	4b0a      	ldr	r3, [pc, #40]	; (8005964 <vPortExitCritical+0x50>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	3b01      	subs	r3, #1
 800593e:	4a09      	ldr	r2, [pc, #36]	; (8005964 <vPortExitCritical+0x50>)
 8005940:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005942:	4b08      	ldr	r3, [pc, #32]	; (8005964 <vPortExitCritical+0x50>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d105      	bne.n	8005956 <vPortExitCritical+0x42>
 800594a:	2300      	movs	r3, #0
 800594c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005954:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005956:	bf00      	nop
 8005958:	370c      	adds	r7, #12
 800595a:	46bd      	mov	sp, r7
 800595c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005960:	4770      	bx	lr
 8005962:	bf00      	nop
 8005964:	2000000c 	.word	0x2000000c
	...

08005970 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005970:	f3ef 8009 	mrs	r0, PSP
 8005974:	f3bf 8f6f 	isb	sy
 8005978:	4b15      	ldr	r3, [pc, #84]	; (80059d0 <pxCurrentTCBConst>)
 800597a:	681a      	ldr	r2, [r3, #0]
 800597c:	f01e 0f10 	tst.w	lr, #16
 8005980:	bf08      	it	eq
 8005982:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005986:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800598a:	6010      	str	r0, [r2, #0]
 800598c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005990:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005994:	f380 8811 	msr	BASEPRI, r0
 8005998:	f3bf 8f4f 	dsb	sy
 800599c:	f3bf 8f6f 	isb	sy
 80059a0:	f7ff fcb6 	bl	8005310 <vTaskSwitchContext>
 80059a4:	f04f 0000 	mov.w	r0, #0
 80059a8:	f380 8811 	msr	BASEPRI, r0
 80059ac:	bc09      	pop	{r0, r3}
 80059ae:	6819      	ldr	r1, [r3, #0]
 80059b0:	6808      	ldr	r0, [r1, #0]
 80059b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059b6:	f01e 0f10 	tst.w	lr, #16
 80059ba:	bf08      	it	eq
 80059bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80059c0:	f380 8809 	msr	PSP, r0
 80059c4:	f3bf 8f6f 	isb	sy
 80059c8:	4770      	bx	lr
 80059ca:	bf00      	nop
 80059cc:	f3af 8000 	nop.w

080059d0 <pxCurrentTCBConst>:
 80059d0:	2000066c 	.word	0x2000066c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80059d4:	bf00      	nop
 80059d6:	bf00      	nop

080059d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b082      	sub	sp, #8
 80059dc:	af00      	add	r7, sp, #0
	__asm volatile
 80059de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059e2:	f383 8811 	msr	BASEPRI, r3
 80059e6:	f3bf 8f6f 	isb	sy
 80059ea:	f3bf 8f4f 	dsb	sy
 80059ee:	607b      	str	r3, [r7, #4]
}
 80059f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80059f2:	f7ff fbd5 	bl	80051a0 <xTaskIncrementTick>
 80059f6:	4603      	mov	r3, r0
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d003      	beq.n	8005a04 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80059fc:	4b06      	ldr	r3, [pc, #24]	; (8005a18 <SysTick_Handler+0x40>)
 80059fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a02:	601a      	str	r2, [r3, #0]
 8005a04:	2300      	movs	r3, #0
 8005a06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	f383 8811 	msr	BASEPRI, r3
}
 8005a0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005a10:	bf00      	nop
 8005a12:	3708      	adds	r7, #8
 8005a14:	46bd      	mov	sp, r7
 8005a16:	bd80      	pop	{r7, pc}
 8005a18:	e000ed04 	.word	0xe000ed04

08005a1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005a20:	4b0b      	ldr	r3, [pc, #44]	; (8005a50 <vPortSetupTimerInterrupt+0x34>)
 8005a22:	2200      	movs	r2, #0
 8005a24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005a26:	4b0b      	ldr	r3, [pc, #44]	; (8005a54 <vPortSetupTimerInterrupt+0x38>)
 8005a28:	2200      	movs	r2, #0
 8005a2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005a2c:	4b0a      	ldr	r3, [pc, #40]	; (8005a58 <vPortSetupTimerInterrupt+0x3c>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a0a      	ldr	r2, [pc, #40]	; (8005a5c <vPortSetupTimerInterrupt+0x40>)
 8005a32:	fba2 2303 	umull	r2, r3, r2, r3
 8005a36:	099b      	lsrs	r3, r3, #6
 8005a38:	4a09      	ldr	r2, [pc, #36]	; (8005a60 <vPortSetupTimerInterrupt+0x44>)
 8005a3a:	3b01      	subs	r3, #1
 8005a3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005a3e:	4b04      	ldr	r3, [pc, #16]	; (8005a50 <vPortSetupTimerInterrupt+0x34>)
 8005a40:	2207      	movs	r2, #7
 8005a42:	601a      	str	r2, [r3, #0]
}
 8005a44:	bf00      	nop
 8005a46:	46bd      	mov	sp, r7
 8005a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4c:	4770      	bx	lr
 8005a4e:	bf00      	nop
 8005a50:	e000e010 	.word	0xe000e010
 8005a54:	e000e018 	.word	0xe000e018
 8005a58:	20000000 	.word	0x20000000
 8005a5c:	10624dd3 	.word	0x10624dd3
 8005a60:	e000e014 	.word	0xe000e014

08005a64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005a64:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005a74 <vPortEnableVFP+0x10>
 8005a68:	6801      	ldr	r1, [r0, #0]
 8005a6a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005a6e:	6001      	str	r1, [r0, #0]
 8005a70:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005a72:	bf00      	nop
 8005a74:	e000ed88 	.word	0xe000ed88

08005a78 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b08a      	sub	sp, #40	; 0x28
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005a80:	2300      	movs	r3, #0
 8005a82:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005a84:	f7ff fae2 	bl	800504c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005a88:	4b5b      	ldr	r3, [pc, #364]	; (8005bf8 <pvPortMalloc+0x180>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d101      	bne.n	8005a94 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005a90:	f000 f920 	bl	8005cd4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005a94:	4b59      	ldr	r3, [pc, #356]	; (8005bfc <pvPortMalloc+0x184>)
 8005a96:	681a      	ldr	r2, [r3, #0]
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	4013      	ands	r3, r2
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	f040 8093 	bne.w	8005bc8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d01d      	beq.n	8005ae4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005aa8:	2208      	movs	r2, #8
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	4413      	add	r3, r2
 8005aae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	f003 0307 	and.w	r3, r3, #7
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d014      	beq.n	8005ae4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	f023 0307 	bic.w	r3, r3, #7
 8005ac0:	3308      	adds	r3, #8
 8005ac2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	f003 0307 	and.w	r3, r3, #7
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d00a      	beq.n	8005ae4 <pvPortMalloc+0x6c>
	__asm volatile
 8005ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ad2:	f383 8811 	msr	BASEPRI, r3
 8005ad6:	f3bf 8f6f 	isb	sy
 8005ada:	f3bf 8f4f 	dsb	sy
 8005ade:	617b      	str	r3, [r7, #20]
}
 8005ae0:	bf00      	nop
 8005ae2:	e7fe      	b.n	8005ae2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d06e      	beq.n	8005bc8 <pvPortMalloc+0x150>
 8005aea:	4b45      	ldr	r3, [pc, #276]	; (8005c00 <pvPortMalloc+0x188>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	687a      	ldr	r2, [r7, #4]
 8005af0:	429a      	cmp	r2, r3
 8005af2:	d869      	bhi.n	8005bc8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005af4:	4b43      	ldr	r3, [pc, #268]	; (8005c04 <pvPortMalloc+0x18c>)
 8005af6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005af8:	4b42      	ldr	r3, [pc, #264]	; (8005c04 <pvPortMalloc+0x18c>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005afe:	e004      	b.n	8005b0a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b02:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b0c:	685b      	ldr	r3, [r3, #4]
 8005b0e:	687a      	ldr	r2, [r7, #4]
 8005b10:	429a      	cmp	r2, r3
 8005b12:	d903      	bls.n	8005b1c <pvPortMalloc+0xa4>
 8005b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d1f1      	bne.n	8005b00 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005b1c:	4b36      	ldr	r3, [pc, #216]	; (8005bf8 <pvPortMalloc+0x180>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b22:	429a      	cmp	r2, r3
 8005b24:	d050      	beq.n	8005bc8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005b26:	6a3b      	ldr	r3, [r7, #32]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	2208      	movs	r2, #8
 8005b2c:	4413      	add	r3, r2
 8005b2e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b32:	681a      	ldr	r2, [r3, #0]
 8005b34:	6a3b      	ldr	r3, [r7, #32]
 8005b36:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b3a:	685a      	ldr	r2, [r3, #4]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	1ad2      	subs	r2, r2, r3
 8005b40:	2308      	movs	r3, #8
 8005b42:	005b      	lsls	r3, r3, #1
 8005b44:	429a      	cmp	r2, r3
 8005b46:	d91f      	bls.n	8005b88 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005b48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	4413      	add	r3, r2
 8005b4e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005b50:	69bb      	ldr	r3, [r7, #24]
 8005b52:	f003 0307 	and.w	r3, r3, #7
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d00a      	beq.n	8005b70 <pvPortMalloc+0xf8>
	__asm volatile
 8005b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b5e:	f383 8811 	msr	BASEPRI, r3
 8005b62:	f3bf 8f6f 	isb	sy
 8005b66:	f3bf 8f4f 	dsb	sy
 8005b6a:	613b      	str	r3, [r7, #16]
}
 8005b6c:	bf00      	nop
 8005b6e:	e7fe      	b.n	8005b6e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b72:	685a      	ldr	r2, [r3, #4]
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	1ad2      	subs	r2, r2, r3
 8005b78:	69bb      	ldr	r3, [r7, #24]
 8005b7a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b7e:	687a      	ldr	r2, [r7, #4]
 8005b80:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005b82:	69b8      	ldr	r0, [r7, #24]
 8005b84:	f000 f908 	bl	8005d98 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005b88:	4b1d      	ldr	r3, [pc, #116]	; (8005c00 <pvPortMalloc+0x188>)
 8005b8a:	681a      	ldr	r2, [r3, #0]
 8005b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b8e:	685b      	ldr	r3, [r3, #4]
 8005b90:	1ad3      	subs	r3, r2, r3
 8005b92:	4a1b      	ldr	r2, [pc, #108]	; (8005c00 <pvPortMalloc+0x188>)
 8005b94:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005b96:	4b1a      	ldr	r3, [pc, #104]	; (8005c00 <pvPortMalloc+0x188>)
 8005b98:	681a      	ldr	r2, [r3, #0]
 8005b9a:	4b1b      	ldr	r3, [pc, #108]	; (8005c08 <pvPortMalloc+0x190>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	429a      	cmp	r2, r3
 8005ba0:	d203      	bcs.n	8005baa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005ba2:	4b17      	ldr	r3, [pc, #92]	; (8005c00 <pvPortMalloc+0x188>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4a18      	ldr	r2, [pc, #96]	; (8005c08 <pvPortMalloc+0x190>)
 8005ba8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bac:	685a      	ldr	r2, [r3, #4]
 8005bae:	4b13      	ldr	r3, [pc, #76]	; (8005bfc <pvPortMalloc+0x184>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	431a      	orrs	r2, r3
 8005bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bba:	2200      	movs	r2, #0
 8005bbc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005bbe:	4b13      	ldr	r3, [pc, #76]	; (8005c0c <pvPortMalloc+0x194>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	3301      	adds	r3, #1
 8005bc4:	4a11      	ldr	r2, [pc, #68]	; (8005c0c <pvPortMalloc+0x194>)
 8005bc6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005bc8:	f7ff fa4e 	bl	8005068 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005bcc:	69fb      	ldr	r3, [r7, #28]
 8005bce:	f003 0307 	and.w	r3, r3, #7
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d00a      	beq.n	8005bec <pvPortMalloc+0x174>
	__asm volatile
 8005bd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bda:	f383 8811 	msr	BASEPRI, r3
 8005bde:	f3bf 8f6f 	isb	sy
 8005be2:	f3bf 8f4f 	dsb	sy
 8005be6:	60fb      	str	r3, [r7, #12]
}
 8005be8:	bf00      	nop
 8005bea:	e7fe      	b.n	8005bea <pvPortMalloc+0x172>
	return pvReturn;
 8005bec:	69fb      	ldr	r3, [r7, #28]
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	3728      	adds	r7, #40	; 0x28
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}
 8005bf6:	bf00      	nop
 8005bf8:	200043a8 	.word	0x200043a8
 8005bfc:	200043bc 	.word	0x200043bc
 8005c00:	200043ac 	.word	0x200043ac
 8005c04:	200043a0 	.word	0x200043a0
 8005c08:	200043b0 	.word	0x200043b0
 8005c0c:	200043b4 	.word	0x200043b4

08005c10 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b086      	sub	sp, #24
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d04d      	beq.n	8005cbe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005c22:	2308      	movs	r3, #8
 8005c24:	425b      	negs	r3, r3
 8005c26:	697a      	ldr	r2, [r7, #20]
 8005c28:	4413      	add	r3, r2
 8005c2a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005c30:	693b      	ldr	r3, [r7, #16]
 8005c32:	685a      	ldr	r2, [r3, #4]
 8005c34:	4b24      	ldr	r3, [pc, #144]	; (8005cc8 <vPortFree+0xb8>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4013      	ands	r3, r2
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d10a      	bne.n	8005c54 <vPortFree+0x44>
	__asm volatile
 8005c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c42:	f383 8811 	msr	BASEPRI, r3
 8005c46:	f3bf 8f6f 	isb	sy
 8005c4a:	f3bf 8f4f 	dsb	sy
 8005c4e:	60fb      	str	r3, [r7, #12]
}
 8005c50:	bf00      	nop
 8005c52:	e7fe      	b.n	8005c52 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005c54:	693b      	ldr	r3, [r7, #16]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d00a      	beq.n	8005c72 <vPortFree+0x62>
	__asm volatile
 8005c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c60:	f383 8811 	msr	BASEPRI, r3
 8005c64:	f3bf 8f6f 	isb	sy
 8005c68:	f3bf 8f4f 	dsb	sy
 8005c6c:	60bb      	str	r3, [r7, #8]
}
 8005c6e:	bf00      	nop
 8005c70:	e7fe      	b.n	8005c70 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	685a      	ldr	r2, [r3, #4]
 8005c76:	4b14      	ldr	r3, [pc, #80]	; (8005cc8 <vPortFree+0xb8>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4013      	ands	r3, r2
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d01e      	beq.n	8005cbe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005c80:	693b      	ldr	r3, [r7, #16]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d11a      	bne.n	8005cbe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005c88:	693b      	ldr	r3, [r7, #16]
 8005c8a:	685a      	ldr	r2, [r3, #4]
 8005c8c:	4b0e      	ldr	r3, [pc, #56]	; (8005cc8 <vPortFree+0xb8>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	43db      	mvns	r3, r3
 8005c92:	401a      	ands	r2, r3
 8005c94:	693b      	ldr	r3, [r7, #16]
 8005c96:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005c98:	f7ff f9d8 	bl	800504c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005c9c:	693b      	ldr	r3, [r7, #16]
 8005c9e:	685a      	ldr	r2, [r3, #4]
 8005ca0:	4b0a      	ldr	r3, [pc, #40]	; (8005ccc <vPortFree+0xbc>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4413      	add	r3, r2
 8005ca6:	4a09      	ldr	r2, [pc, #36]	; (8005ccc <vPortFree+0xbc>)
 8005ca8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005caa:	6938      	ldr	r0, [r7, #16]
 8005cac:	f000 f874 	bl	8005d98 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005cb0:	4b07      	ldr	r3, [pc, #28]	; (8005cd0 <vPortFree+0xc0>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	3301      	adds	r3, #1
 8005cb6:	4a06      	ldr	r2, [pc, #24]	; (8005cd0 <vPortFree+0xc0>)
 8005cb8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005cba:	f7ff f9d5 	bl	8005068 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005cbe:	bf00      	nop
 8005cc0:	3718      	adds	r7, #24
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bd80      	pop	{r7, pc}
 8005cc6:	bf00      	nop
 8005cc8:	200043bc 	.word	0x200043bc
 8005ccc:	200043ac 	.word	0x200043ac
 8005cd0:	200043b8 	.word	0x200043b8

08005cd4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b085      	sub	sp, #20
 8005cd8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005cda:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005cde:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005ce0:	4b27      	ldr	r3, [pc, #156]	; (8005d80 <prvHeapInit+0xac>)
 8005ce2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	f003 0307 	and.w	r3, r3, #7
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d00c      	beq.n	8005d08 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	3307      	adds	r3, #7
 8005cf2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	f023 0307 	bic.w	r3, r3, #7
 8005cfa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005cfc:	68ba      	ldr	r2, [r7, #8]
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	1ad3      	subs	r3, r2, r3
 8005d02:	4a1f      	ldr	r2, [pc, #124]	; (8005d80 <prvHeapInit+0xac>)
 8005d04:	4413      	add	r3, r2
 8005d06:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005d0c:	4a1d      	ldr	r2, [pc, #116]	; (8005d84 <prvHeapInit+0xb0>)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005d12:	4b1c      	ldr	r3, [pc, #112]	; (8005d84 <prvHeapInit+0xb0>)
 8005d14:	2200      	movs	r2, #0
 8005d16:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	68ba      	ldr	r2, [r7, #8]
 8005d1c:	4413      	add	r3, r2
 8005d1e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005d20:	2208      	movs	r2, #8
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	1a9b      	subs	r3, r3, r2
 8005d26:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	f023 0307 	bic.w	r3, r3, #7
 8005d2e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	4a15      	ldr	r2, [pc, #84]	; (8005d88 <prvHeapInit+0xb4>)
 8005d34:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005d36:	4b14      	ldr	r3, [pc, #80]	; (8005d88 <prvHeapInit+0xb4>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005d3e:	4b12      	ldr	r3, [pc, #72]	; (8005d88 <prvHeapInit+0xb4>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	2200      	movs	r2, #0
 8005d44:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	68fa      	ldr	r2, [r7, #12]
 8005d4e:	1ad2      	subs	r2, r2, r3
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005d54:	4b0c      	ldr	r3, [pc, #48]	; (8005d88 <prvHeapInit+0xb4>)
 8005d56:	681a      	ldr	r2, [r3, #0]
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	685b      	ldr	r3, [r3, #4]
 8005d60:	4a0a      	ldr	r2, [pc, #40]	; (8005d8c <prvHeapInit+0xb8>)
 8005d62:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	685b      	ldr	r3, [r3, #4]
 8005d68:	4a09      	ldr	r2, [pc, #36]	; (8005d90 <prvHeapInit+0xbc>)
 8005d6a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005d6c:	4b09      	ldr	r3, [pc, #36]	; (8005d94 <prvHeapInit+0xc0>)
 8005d6e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005d72:	601a      	str	r2, [r3, #0]
}
 8005d74:	bf00      	nop
 8005d76:	3714      	adds	r7, #20
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7e:	4770      	bx	lr
 8005d80:	200007a0 	.word	0x200007a0
 8005d84:	200043a0 	.word	0x200043a0
 8005d88:	200043a8 	.word	0x200043a8
 8005d8c:	200043b0 	.word	0x200043b0
 8005d90:	200043ac 	.word	0x200043ac
 8005d94:	200043bc 	.word	0x200043bc

08005d98 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b085      	sub	sp, #20
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005da0:	4b28      	ldr	r3, [pc, #160]	; (8005e44 <prvInsertBlockIntoFreeList+0xac>)
 8005da2:	60fb      	str	r3, [r7, #12]
 8005da4:	e002      	b.n	8005dac <prvInsertBlockIntoFreeList+0x14>
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	60fb      	str	r3, [r7, #12]
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	687a      	ldr	r2, [r7, #4]
 8005db2:	429a      	cmp	r2, r3
 8005db4:	d8f7      	bhi.n	8005da6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	685b      	ldr	r3, [r3, #4]
 8005dbe:	68ba      	ldr	r2, [r7, #8]
 8005dc0:	4413      	add	r3, r2
 8005dc2:	687a      	ldr	r2, [r7, #4]
 8005dc4:	429a      	cmp	r2, r3
 8005dc6:	d108      	bne.n	8005dda <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	685a      	ldr	r2, [r3, #4]
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	685b      	ldr	r3, [r3, #4]
 8005dd0:	441a      	add	r2, r3
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	685b      	ldr	r3, [r3, #4]
 8005de2:	68ba      	ldr	r2, [r7, #8]
 8005de4:	441a      	add	r2, r3
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	429a      	cmp	r2, r3
 8005dec:	d118      	bne.n	8005e20 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681a      	ldr	r2, [r3, #0]
 8005df2:	4b15      	ldr	r3, [pc, #84]	; (8005e48 <prvInsertBlockIntoFreeList+0xb0>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	429a      	cmp	r2, r3
 8005df8:	d00d      	beq.n	8005e16 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	685a      	ldr	r2, [r3, #4]
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	685b      	ldr	r3, [r3, #4]
 8005e04:	441a      	add	r2, r3
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	681a      	ldr	r2, [r3, #0]
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	601a      	str	r2, [r3, #0]
 8005e14:	e008      	b.n	8005e28 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005e16:	4b0c      	ldr	r3, [pc, #48]	; (8005e48 <prvInsertBlockIntoFreeList+0xb0>)
 8005e18:	681a      	ldr	r2, [r3, #0]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	601a      	str	r2, [r3, #0]
 8005e1e:	e003      	b.n	8005e28 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681a      	ldr	r2, [r3, #0]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005e28:	68fa      	ldr	r2, [r7, #12]
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	429a      	cmp	r2, r3
 8005e2e:	d002      	beq.n	8005e36 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	687a      	ldr	r2, [r7, #4]
 8005e34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005e36:	bf00      	nop
 8005e38:	3714      	adds	r7, #20
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e40:	4770      	bx	lr
 8005e42:	bf00      	nop
 8005e44:	200043a0 	.word	0x200043a0
 8005e48:	200043a8 	.word	0x200043a8

08005e4c <__errno>:
 8005e4c:	4b01      	ldr	r3, [pc, #4]	; (8005e54 <__errno+0x8>)
 8005e4e:	6818      	ldr	r0, [r3, #0]
 8005e50:	4770      	bx	lr
 8005e52:	bf00      	nop
 8005e54:	20000010 	.word	0x20000010

08005e58 <std>:
 8005e58:	2300      	movs	r3, #0
 8005e5a:	b510      	push	{r4, lr}
 8005e5c:	4604      	mov	r4, r0
 8005e5e:	e9c0 3300 	strd	r3, r3, [r0]
 8005e62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005e66:	6083      	str	r3, [r0, #8]
 8005e68:	8181      	strh	r1, [r0, #12]
 8005e6a:	6643      	str	r3, [r0, #100]	; 0x64
 8005e6c:	81c2      	strh	r2, [r0, #14]
 8005e6e:	6183      	str	r3, [r0, #24]
 8005e70:	4619      	mov	r1, r3
 8005e72:	2208      	movs	r2, #8
 8005e74:	305c      	adds	r0, #92	; 0x5c
 8005e76:	f000 f91a 	bl	80060ae <memset>
 8005e7a:	4b05      	ldr	r3, [pc, #20]	; (8005e90 <std+0x38>)
 8005e7c:	6263      	str	r3, [r4, #36]	; 0x24
 8005e7e:	4b05      	ldr	r3, [pc, #20]	; (8005e94 <std+0x3c>)
 8005e80:	62a3      	str	r3, [r4, #40]	; 0x28
 8005e82:	4b05      	ldr	r3, [pc, #20]	; (8005e98 <std+0x40>)
 8005e84:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005e86:	4b05      	ldr	r3, [pc, #20]	; (8005e9c <std+0x44>)
 8005e88:	6224      	str	r4, [r4, #32]
 8005e8a:	6323      	str	r3, [r4, #48]	; 0x30
 8005e8c:	bd10      	pop	{r4, pc}
 8005e8e:	bf00      	nop
 8005e90:	08006bf1 	.word	0x08006bf1
 8005e94:	08006c13 	.word	0x08006c13
 8005e98:	08006c4b 	.word	0x08006c4b
 8005e9c:	08006c6f 	.word	0x08006c6f

08005ea0 <_cleanup_r>:
 8005ea0:	4901      	ldr	r1, [pc, #4]	; (8005ea8 <_cleanup_r+0x8>)
 8005ea2:	f000 b8af 	b.w	8006004 <_fwalk_reent>
 8005ea6:	bf00      	nop
 8005ea8:	08007ac1 	.word	0x08007ac1

08005eac <__sfmoreglue>:
 8005eac:	b570      	push	{r4, r5, r6, lr}
 8005eae:	2268      	movs	r2, #104	; 0x68
 8005eb0:	1e4d      	subs	r5, r1, #1
 8005eb2:	4355      	muls	r5, r2
 8005eb4:	460e      	mov	r6, r1
 8005eb6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005eba:	f000 f921 	bl	8006100 <_malloc_r>
 8005ebe:	4604      	mov	r4, r0
 8005ec0:	b140      	cbz	r0, 8005ed4 <__sfmoreglue+0x28>
 8005ec2:	2100      	movs	r1, #0
 8005ec4:	e9c0 1600 	strd	r1, r6, [r0]
 8005ec8:	300c      	adds	r0, #12
 8005eca:	60a0      	str	r0, [r4, #8]
 8005ecc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005ed0:	f000 f8ed 	bl	80060ae <memset>
 8005ed4:	4620      	mov	r0, r4
 8005ed6:	bd70      	pop	{r4, r5, r6, pc}

08005ed8 <__sfp_lock_acquire>:
 8005ed8:	4801      	ldr	r0, [pc, #4]	; (8005ee0 <__sfp_lock_acquire+0x8>)
 8005eda:	f000 b8d8 	b.w	800608e <__retarget_lock_acquire_recursive>
 8005ede:	bf00      	nop
 8005ee0:	200043c1 	.word	0x200043c1

08005ee4 <__sfp_lock_release>:
 8005ee4:	4801      	ldr	r0, [pc, #4]	; (8005eec <__sfp_lock_release+0x8>)
 8005ee6:	f000 b8d3 	b.w	8006090 <__retarget_lock_release_recursive>
 8005eea:	bf00      	nop
 8005eec:	200043c1 	.word	0x200043c1

08005ef0 <__sinit_lock_acquire>:
 8005ef0:	4801      	ldr	r0, [pc, #4]	; (8005ef8 <__sinit_lock_acquire+0x8>)
 8005ef2:	f000 b8cc 	b.w	800608e <__retarget_lock_acquire_recursive>
 8005ef6:	bf00      	nop
 8005ef8:	200043c2 	.word	0x200043c2

08005efc <__sinit_lock_release>:
 8005efc:	4801      	ldr	r0, [pc, #4]	; (8005f04 <__sinit_lock_release+0x8>)
 8005efe:	f000 b8c7 	b.w	8006090 <__retarget_lock_release_recursive>
 8005f02:	bf00      	nop
 8005f04:	200043c2 	.word	0x200043c2

08005f08 <__sinit>:
 8005f08:	b510      	push	{r4, lr}
 8005f0a:	4604      	mov	r4, r0
 8005f0c:	f7ff fff0 	bl	8005ef0 <__sinit_lock_acquire>
 8005f10:	69a3      	ldr	r3, [r4, #24]
 8005f12:	b11b      	cbz	r3, 8005f1c <__sinit+0x14>
 8005f14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f18:	f7ff bff0 	b.w	8005efc <__sinit_lock_release>
 8005f1c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005f20:	6523      	str	r3, [r4, #80]	; 0x50
 8005f22:	4b13      	ldr	r3, [pc, #76]	; (8005f70 <__sinit+0x68>)
 8005f24:	4a13      	ldr	r2, [pc, #76]	; (8005f74 <__sinit+0x6c>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	62a2      	str	r2, [r4, #40]	; 0x28
 8005f2a:	42a3      	cmp	r3, r4
 8005f2c:	bf04      	itt	eq
 8005f2e:	2301      	moveq	r3, #1
 8005f30:	61a3      	streq	r3, [r4, #24]
 8005f32:	4620      	mov	r0, r4
 8005f34:	f000 f820 	bl	8005f78 <__sfp>
 8005f38:	6060      	str	r0, [r4, #4]
 8005f3a:	4620      	mov	r0, r4
 8005f3c:	f000 f81c 	bl	8005f78 <__sfp>
 8005f40:	60a0      	str	r0, [r4, #8]
 8005f42:	4620      	mov	r0, r4
 8005f44:	f000 f818 	bl	8005f78 <__sfp>
 8005f48:	2200      	movs	r2, #0
 8005f4a:	60e0      	str	r0, [r4, #12]
 8005f4c:	2104      	movs	r1, #4
 8005f4e:	6860      	ldr	r0, [r4, #4]
 8005f50:	f7ff ff82 	bl	8005e58 <std>
 8005f54:	68a0      	ldr	r0, [r4, #8]
 8005f56:	2201      	movs	r2, #1
 8005f58:	2109      	movs	r1, #9
 8005f5a:	f7ff ff7d 	bl	8005e58 <std>
 8005f5e:	68e0      	ldr	r0, [r4, #12]
 8005f60:	2202      	movs	r2, #2
 8005f62:	2112      	movs	r1, #18
 8005f64:	f7ff ff78 	bl	8005e58 <std>
 8005f68:	2301      	movs	r3, #1
 8005f6a:	61a3      	str	r3, [r4, #24]
 8005f6c:	e7d2      	b.n	8005f14 <__sinit+0xc>
 8005f6e:	bf00      	nop
 8005f70:	08008f98 	.word	0x08008f98
 8005f74:	08005ea1 	.word	0x08005ea1

08005f78 <__sfp>:
 8005f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f7a:	4607      	mov	r7, r0
 8005f7c:	f7ff ffac 	bl	8005ed8 <__sfp_lock_acquire>
 8005f80:	4b1e      	ldr	r3, [pc, #120]	; (8005ffc <__sfp+0x84>)
 8005f82:	681e      	ldr	r6, [r3, #0]
 8005f84:	69b3      	ldr	r3, [r6, #24]
 8005f86:	b913      	cbnz	r3, 8005f8e <__sfp+0x16>
 8005f88:	4630      	mov	r0, r6
 8005f8a:	f7ff ffbd 	bl	8005f08 <__sinit>
 8005f8e:	3648      	adds	r6, #72	; 0x48
 8005f90:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005f94:	3b01      	subs	r3, #1
 8005f96:	d503      	bpl.n	8005fa0 <__sfp+0x28>
 8005f98:	6833      	ldr	r3, [r6, #0]
 8005f9a:	b30b      	cbz	r3, 8005fe0 <__sfp+0x68>
 8005f9c:	6836      	ldr	r6, [r6, #0]
 8005f9e:	e7f7      	b.n	8005f90 <__sfp+0x18>
 8005fa0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005fa4:	b9d5      	cbnz	r5, 8005fdc <__sfp+0x64>
 8005fa6:	4b16      	ldr	r3, [pc, #88]	; (8006000 <__sfp+0x88>)
 8005fa8:	60e3      	str	r3, [r4, #12]
 8005faa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005fae:	6665      	str	r5, [r4, #100]	; 0x64
 8005fb0:	f000 f86c 	bl	800608c <__retarget_lock_init_recursive>
 8005fb4:	f7ff ff96 	bl	8005ee4 <__sfp_lock_release>
 8005fb8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005fbc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005fc0:	6025      	str	r5, [r4, #0]
 8005fc2:	61a5      	str	r5, [r4, #24]
 8005fc4:	2208      	movs	r2, #8
 8005fc6:	4629      	mov	r1, r5
 8005fc8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005fcc:	f000 f86f 	bl	80060ae <memset>
 8005fd0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005fd4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005fd8:	4620      	mov	r0, r4
 8005fda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005fdc:	3468      	adds	r4, #104	; 0x68
 8005fde:	e7d9      	b.n	8005f94 <__sfp+0x1c>
 8005fe0:	2104      	movs	r1, #4
 8005fe2:	4638      	mov	r0, r7
 8005fe4:	f7ff ff62 	bl	8005eac <__sfmoreglue>
 8005fe8:	4604      	mov	r4, r0
 8005fea:	6030      	str	r0, [r6, #0]
 8005fec:	2800      	cmp	r0, #0
 8005fee:	d1d5      	bne.n	8005f9c <__sfp+0x24>
 8005ff0:	f7ff ff78 	bl	8005ee4 <__sfp_lock_release>
 8005ff4:	230c      	movs	r3, #12
 8005ff6:	603b      	str	r3, [r7, #0]
 8005ff8:	e7ee      	b.n	8005fd8 <__sfp+0x60>
 8005ffa:	bf00      	nop
 8005ffc:	08008f98 	.word	0x08008f98
 8006000:	ffff0001 	.word	0xffff0001

08006004 <_fwalk_reent>:
 8006004:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006008:	4606      	mov	r6, r0
 800600a:	4688      	mov	r8, r1
 800600c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006010:	2700      	movs	r7, #0
 8006012:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006016:	f1b9 0901 	subs.w	r9, r9, #1
 800601a:	d505      	bpl.n	8006028 <_fwalk_reent+0x24>
 800601c:	6824      	ldr	r4, [r4, #0]
 800601e:	2c00      	cmp	r4, #0
 8006020:	d1f7      	bne.n	8006012 <_fwalk_reent+0xe>
 8006022:	4638      	mov	r0, r7
 8006024:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006028:	89ab      	ldrh	r3, [r5, #12]
 800602a:	2b01      	cmp	r3, #1
 800602c:	d907      	bls.n	800603e <_fwalk_reent+0x3a>
 800602e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006032:	3301      	adds	r3, #1
 8006034:	d003      	beq.n	800603e <_fwalk_reent+0x3a>
 8006036:	4629      	mov	r1, r5
 8006038:	4630      	mov	r0, r6
 800603a:	47c0      	blx	r8
 800603c:	4307      	orrs	r7, r0
 800603e:	3568      	adds	r5, #104	; 0x68
 8006040:	e7e9      	b.n	8006016 <_fwalk_reent+0x12>
	...

08006044 <__libc_init_array>:
 8006044:	b570      	push	{r4, r5, r6, lr}
 8006046:	4d0d      	ldr	r5, [pc, #52]	; (800607c <__libc_init_array+0x38>)
 8006048:	4c0d      	ldr	r4, [pc, #52]	; (8006080 <__libc_init_array+0x3c>)
 800604a:	1b64      	subs	r4, r4, r5
 800604c:	10a4      	asrs	r4, r4, #2
 800604e:	2600      	movs	r6, #0
 8006050:	42a6      	cmp	r6, r4
 8006052:	d109      	bne.n	8006068 <__libc_init_array+0x24>
 8006054:	4d0b      	ldr	r5, [pc, #44]	; (8006084 <__libc_init_array+0x40>)
 8006056:	4c0c      	ldr	r4, [pc, #48]	; (8006088 <__libc_init_array+0x44>)
 8006058:	f002 fe7a 	bl	8008d50 <_init>
 800605c:	1b64      	subs	r4, r4, r5
 800605e:	10a4      	asrs	r4, r4, #2
 8006060:	2600      	movs	r6, #0
 8006062:	42a6      	cmp	r6, r4
 8006064:	d105      	bne.n	8006072 <__libc_init_array+0x2e>
 8006066:	bd70      	pop	{r4, r5, r6, pc}
 8006068:	f855 3b04 	ldr.w	r3, [r5], #4
 800606c:	4798      	blx	r3
 800606e:	3601      	adds	r6, #1
 8006070:	e7ee      	b.n	8006050 <__libc_init_array+0xc>
 8006072:	f855 3b04 	ldr.w	r3, [r5], #4
 8006076:	4798      	blx	r3
 8006078:	3601      	adds	r6, #1
 800607a:	e7f2      	b.n	8006062 <__libc_init_array+0x1e>
 800607c:	0800931c 	.word	0x0800931c
 8006080:	0800931c 	.word	0x0800931c
 8006084:	0800931c 	.word	0x0800931c
 8006088:	08009320 	.word	0x08009320

0800608c <__retarget_lock_init_recursive>:
 800608c:	4770      	bx	lr

0800608e <__retarget_lock_acquire_recursive>:
 800608e:	4770      	bx	lr

08006090 <__retarget_lock_release_recursive>:
 8006090:	4770      	bx	lr

08006092 <memcpy>:
 8006092:	440a      	add	r2, r1
 8006094:	4291      	cmp	r1, r2
 8006096:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800609a:	d100      	bne.n	800609e <memcpy+0xc>
 800609c:	4770      	bx	lr
 800609e:	b510      	push	{r4, lr}
 80060a0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80060a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80060a8:	4291      	cmp	r1, r2
 80060aa:	d1f9      	bne.n	80060a0 <memcpy+0xe>
 80060ac:	bd10      	pop	{r4, pc}

080060ae <memset>:
 80060ae:	4402      	add	r2, r0
 80060b0:	4603      	mov	r3, r0
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d100      	bne.n	80060b8 <memset+0xa>
 80060b6:	4770      	bx	lr
 80060b8:	f803 1b01 	strb.w	r1, [r3], #1
 80060bc:	e7f9      	b.n	80060b2 <memset+0x4>
	...

080060c0 <sbrk_aligned>:
 80060c0:	b570      	push	{r4, r5, r6, lr}
 80060c2:	4e0e      	ldr	r6, [pc, #56]	; (80060fc <sbrk_aligned+0x3c>)
 80060c4:	460c      	mov	r4, r1
 80060c6:	6831      	ldr	r1, [r6, #0]
 80060c8:	4605      	mov	r5, r0
 80060ca:	b911      	cbnz	r1, 80060d2 <sbrk_aligned+0x12>
 80060cc:	f000 fd60 	bl	8006b90 <_sbrk_r>
 80060d0:	6030      	str	r0, [r6, #0]
 80060d2:	4621      	mov	r1, r4
 80060d4:	4628      	mov	r0, r5
 80060d6:	f000 fd5b 	bl	8006b90 <_sbrk_r>
 80060da:	1c43      	adds	r3, r0, #1
 80060dc:	d00a      	beq.n	80060f4 <sbrk_aligned+0x34>
 80060de:	1cc4      	adds	r4, r0, #3
 80060e0:	f024 0403 	bic.w	r4, r4, #3
 80060e4:	42a0      	cmp	r0, r4
 80060e6:	d007      	beq.n	80060f8 <sbrk_aligned+0x38>
 80060e8:	1a21      	subs	r1, r4, r0
 80060ea:	4628      	mov	r0, r5
 80060ec:	f000 fd50 	bl	8006b90 <_sbrk_r>
 80060f0:	3001      	adds	r0, #1
 80060f2:	d101      	bne.n	80060f8 <sbrk_aligned+0x38>
 80060f4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80060f8:	4620      	mov	r0, r4
 80060fa:	bd70      	pop	{r4, r5, r6, pc}
 80060fc:	200043c8 	.word	0x200043c8

08006100 <_malloc_r>:
 8006100:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006104:	1ccd      	adds	r5, r1, #3
 8006106:	f025 0503 	bic.w	r5, r5, #3
 800610a:	3508      	adds	r5, #8
 800610c:	2d0c      	cmp	r5, #12
 800610e:	bf38      	it	cc
 8006110:	250c      	movcc	r5, #12
 8006112:	2d00      	cmp	r5, #0
 8006114:	4607      	mov	r7, r0
 8006116:	db01      	blt.n	800611c <_malloc_r+0x1c>
 8006118:	42a9      	cmp	r1, r5
 800611a:	d905      	bls.n	8006128 <_malloc_r+0x28>
 800611c:	230c      	movs	r3, #12
 800611e:	603b      	str	r3, [r7, #0]
 8006120:	2600      	movs	r6, #0
 8006122:	4630      	mov	r0, r6
 8006124:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006128:	4e2e      	ldr	r6, [pc, #184]	; (80061e4 <_malloc_r+0xe4>)
 800612a:	f001 fd23 	bl	8007b74 <__malloc_lock>
 800612e:	6833      	ldr	r3, [r6, #0]
 8006130:	461c      	mov	r4, r3
 8006132:	bb34      	cbnz	r4, 8006182 <_malloc_r+0x82>
 8006134:	4629      	mov	r1, r5
 8006136:	4638      	mov	r0, r7
 8006138:	f7ff ffc2 	bl	80060c0 <sbrk_aligned>
 800613c:	1c43      	adds	r3, r0, #1
 800613e:	4604      	mov	r4, r0
 8006140:	d14d      	bne.n	80061de <_malloc_r+0xde>
 8006142:	6834      	ldr	r4, [r6, #0]
 8006144:	4626      	mov	r6, r4
 8006146:	2e00      	cmp	r6, #0
 8006148:	d140      	bne.n	80061cc <_malloc_r+0xcc>
 800614a:	6823      	ldr	r3, [r4, #0]
 800614c:	4631      	mov	r1, r6
 800614e:	4638      	mov	r0, r7
 8006150:	eb04 0803 	add.w	r8, r4, r3
 8006154:	f000 fd1c 	bl	8006b90 <_sbrk_r>
 8006158:	4580      	cmp	r8, r0
 800615a:	d13a      	bne.n	80061d2 <_malloc_r+0xd2>
 800615c:	6821      	ldr	r1, [r4, #0]
 800615e:	3503      	adds	r5, #3
 8006160:	1a6d      	subs	r5, r5, r1
 8006162:	f025 0503 	bic.w	r5, r5, #3
 8006166:	3508      	adds	r5, #8
 8006168:	2d0c      	cmp	r5, #12
 800616a:	bf38      	it	cc
 800616c:	250c      	movcc	r5, #12
 800616e:	4629      	mov	r1, r5
 8006170:	4638      	mov	r0, r7
 8006172:	f7ff ffa5 	bl	80060c0 <sbrk_aligned>
 8006176:	3001      	adds	r0, #1
 8006178:	d02b      	beq.n	80061d2 <_malloc_r+0xd2>
 800617a:	6823      	ldr	r3, [r4, #0]
 800617c:	442b      	add	r3, r5
 800617e:	6023      	str	r3, [r4, #0]
 8006180:	e00e      	b.n	80061a0 <_malloc_r+0xa0>
 8006182:	6822      	ldr	r2, [r4, #0]
 8006184:	1b52      	subs	r2, r2, r5
 8006186:	d41e      	bmi.n	80061c6 <_malloc_r+0xc6>
 8006188:	2a0b      	cmp	r2, #11
 800618a:	d916      	bls.n	80061ba <_malloc_r+0xba>
 800618c:	1961      	adds	r1, r4, r5
 800618e:	42a3      	cmp	r3, r4
 8006190:	6025      	str	r5, [r4, #0]
 8006192:	bf18      	it	ne
 8006194:	6059      	strne	r1, [r3, #4]
 8006196:	6863      	ldr	r3, [r4, #4]
 8006198:	bf08      	it	eq
 800619a:	6031      	streq	r1, [r6, #0]
 800619c:	5162      	str	r2, [r4, r5]
 800619e:	604b      	str	r3, [r1, #4]
 80061a0:	4638      	mov	r0, r7
 80061a2:	f104 060b 	add.w	r6, r4, #11
 80061a6:	f001 fceb 	bl	8007b80 <__malloc_unlock>
 80061aa:	f026 0607 	bic.w	r6, r6, #7
 80061ae:	1d23      	adds	r3, r4, #4
 80061b0:	1af2      	subs	r2, r6, r3
 80061b2:	d0b6      	beq.n	8006122 <_malloc_r+0x22>
 80061b4:	1b9b      	subs	r3, r3, r6
 80061b6:	50a3      	str	r3, [r4, r2]
 80061b8:	e7b3      	b.n	8006122 <_malloc_r+0x22>
 80061ba:	6862      	ldr	r2, [r4, #4]
 80061bc:	42a3      	cmp	r3, r4
 80061be:	bf0c      	ite	eq
 80061c0:	6032      	streq	r2, [r6, #0]
 80061c2:	605a      	strne	r2, [r3, #4]
 80061c4:	e7ec      	b.n	80061a0 <_malloc_r+0xa0>
 80061c6:	4623      	mov	r3, r4
 80061c8:	6864      	ldr	r4, [r4, #4]
 80061ca:	e7b2      	b.n	8006132 <_malloc_r+0x32>
 80061cc:	4634      	mov	r4, r6
 80061ce:	6876      	ldr	r6, [r6, #4]
 80061d0:	e7b9      	b.n	8006146 <_malloc_r+0x46>
 80061d2:	230c      	movs	r3, #12
 80061d4:	603b      	str	r3, [r7, #0]
 80061d6:	4638      	mov	r0, r7
 80061d8:	f001 fcd2 	bl	8007b80 <__malloc_unlock>
 80061dc:	e7a1      	b.n	8006122 <_malloc_r+0x22>
 80061de:	6025      	str	r5, [r4, #0]
 80061e0:	e7de      	b.n	80061a0 <_malloc_r+0xa0>
 80061e2:	bf00      	nop
 80061e4:	200043c4 	.word	0x200043c4

080061e8 <__cvt>:
 80061e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80061ec:	ec55 4b10 	vmov	r4, r5, d0
 80061f0:	2d00      	cmp	r5, #0
 80061f2:	460e      	mov	r6, r1
 80061f4:	4619      	mov	r1, r3
 80061f6:	462b      	mov	r3, r5
 80061f8:	bfbb      	ittet	lt
 80061fa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80061fe:	461d      	movlt	r5, r3
 8006200:	2300      	movge	r3, #0
 8006202:	232d      	movlt	r3, #45	; 0x2d
 8006204:	700b      	strb	r3, [r1, #0]
 8006206:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006208:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800620c:	4691      	mov	r9, r2
 800620e:	f023 0820 	bic.w	r8, r3, #32
 8006212:	bfbc      	itt	lt
 8006214:	4622      	movlt	r2, r4
 8006216:	4614      	movlt	r4, r2
 8006218:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800621c:	d005      	beq.n	800622a <__cvt+0x42>
 800621e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006222:	d100      	bne.n	8006226 <__cvt+0x3e>
 8006224:	3601      	adds	r6, #1
 8006226:	2102      	movs	r1, #2
 8006228:	e000      	b.n	800622c <__cvt+0x44>
 800622a:	2103      	movs	r1, #3
 800622c:	ab03      	add	r3, sp, #12
 800622e:	9301      	str	r3, [sp, #4]
 8006230:	ab02      	add	r3, sp, #8
 8006232:	9300      	str	r3, [sp, #0]
 8006234:	ec45 4b10 	vmov	d0, r4, r5
 8006238:	4653      	mov	r3, sl
 800623a:	4632      	mov	r2, r6
 800623c:	f000 fdcc 	bl	8006dd8 <_dtoa_r>
 8006240:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006244:	4607      	mov	r7, r0
 8006246:	d102      	bne.n	800624e <__cvt+0x66>
 8006248:	f019 0f01 	tst.w	r9, #1
 800624c:	d022      	beq.n	8006294 <__cvt+0xac>
 800624e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006252:	eb07 0906 	add.w	r9, r7, r6
 8006256:	d110      	bne.n	800627a <__cvt+0x92>
 8006258:	783b      	ldrb	r3, [r7, #0]
 800625a:	2b30      	cmp	r3, #48	; 0x30
 800625c:	d10a      	bne.n	8006274 <__cvt+0x8c>
 800625e:	2200      	movs	r2, #0
 8006260:	2300      	movs	r3, #0
 8006262:	4620      	mov	r0, r4
 8006264:	4629      	mov	r1, r5
 8006266:	f7fa fc37 	bl	8000ad8 <__aeabi_dcmpeq>
 800626a:	b918      	cbnz	r0, 8006274 <__cvt+0x8c>
 800626c:	f1c6 0601 	rsb	r6, r6, #1
 8006270:	f8ca 6000 	str.w	r6, [sl]
 8006274:	f8da 3000 	ldr.w	r3, [sl]
 8006278:	4499      	add	r9, r3
 800627a:	2200      	movs	r2, #0
 800627c:	2300      	movs	r3, #0
 800627e:	4620      	mov	r0, r4
 8006280:	4629      	mov	r1, r5
 8006282:	f7fa fc29 	bl	8000ad8 <__aeabi_dcmpeq>
 8006286:	b108      	cbz	r0, 800628c <__cvt+0xa4>
 8006288:	f8cd 900c 	str.w	r9, [sp, #12]
 800628c:	2230      	movs	r2, #48	; 0x30
 800628e:	9b03      	ldr	r3, [sp, #12]
 8006290:	454b      	cmp	r3, r9
 8006292:	d307      	bcc.n	80062a4 <__cvt+0xbc>
 8006294:	9b03      	ldr	r3, [sp, #12]
 8006296:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006298:	1bdb      	subs	r3, r3, r7
 800629a:	4638      	mov	r0, r7
 800629c:	6013      	str	r3, [r2, #0]
 800629e:	b004      	add	sp, #16
 80062a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062a4:	1c59      	adds	r1, r3, #1
 80062a6:	9103      	str	r1, [sp, #12]
 80062a8:	701a      	strb	r2, [r3, #0]
 80062aa:	e7f0      	b.n	800628e <__cvt+0xa6>

080062ac <__exponent>:
 80062ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80062ae:	4603      	mov	r3, r0
 80062b0:	2900      	cmp	r1, #0
 80062b2:	bfb8      	it	lt
 80062b4:	4249      	neglt	r1, r1
 80062b6:	f803 2b02 	strb.w	r2, [r3], #2
 80062ba:	bfb4      	ite	lt
 80062bc:	222d      	movlt	r2, #45	; 0x2d
 80062be:	222b      	movge	r2, #43	; 0x2b
 80062c0:	2909      	cmp	r1, #9
 80062c2:	7042      	strb	r2, [r0, #1]
 80062c4:	dd2a      	ble.n	800631c <__exponent+0x70>
 80062c6:	f10d 0407 	add.w	r4, sp, #7
 80062ca:	46a4      	mov	ip, r4
 80062cc:	270a      	movs	r7, #10
 80062ce:	46a6      	mov	lr, r4
 80062d0:	460a      	mov	r2, r1
 80062d2:	fb91 f6f7 	sdiv	r6, r1, r7
 80062d6:	fb07 1516 	mls	r5, r7, r6, r1
 80062da:	3530      	adds	r5, #48	; 0x30
 80062dc:	2a63      	cmp	r2, #99	; 0x63
 80062de:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80062e2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80062e6:	4631      	mov	r1, r6
 80062e8:	dcf1      	bgt.n	80062ce <__exponent+0x22>
 80062ea:	3130      	adds	r1, #48	; 0x30
 80062ec:	f1ae 0502 	sub.w	r5, lr, #2
 80062f0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80062f4:	1c44      	adds	r4, r0, #1
 80062f6:	4629      	mov	r1, r5
 80062f8:	4561      	cmp	r1, ip
 80062fa:	d30a      	bcc.n	8006312 <__exponent+0x66>
 80062fc:	f10d 0209 	add.w	r2, sp, #9
 8006300:	eba2 020e 	sub.w	r2, r2, lr
 8006304:	4565      	cmp	r5, ip
 8006306:	bf88      	it	hi
 8006308:	2200      	movhi	r2, #0
 800630a:	4413      	add	r3, r2
 800630c:	1a18      	subs	r0, r3, r0
 800630e:	b003      	add	sp, #12
 8006310:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006312:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006316:	f804 2f01 	strb.w	r2, [r4, #1]!
 800631a:	e7ed      	b.n	80062f8 <__exponent+0x4c>
 800631c:	2330      	movs	r3, #48	; 0x30
 800631e:	3130      	adds	r1, #48	; 0x30
 8006320:	7083      	strb	r3, [r0, #2]
 8006322:	70c1      	strb	r1, [r0, #3]
 8006324:	1d03      	adds	r3, r0, #4
 8006326:	e7f1      	b.n	800630c <__exponent+0x60>

08006328 <_printf_float>:
 8006328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800632c:	ed2d 8b02 	vpush	{d8}
 8006330:	b08d      	sub	sp, #52	; 0x34
 8006332:	460c      	mov	r4, r1
 8006334:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006338:	4616      	mov	r6, r2
 800633a:	461f      	mov	r7, r3
 800633c:	4605      	mov	r5, r0
 800633e:	f001 fbfb 	bl	8007b38 <_localeconv_r>
 8006342:	f8d0 a000 	ldr.w	sl, [r0]
 8006346:	4650      	mov	r0, sl
 8006348:	f7f9 ff4a 	bl	80001e0 <strlen>
 800634c:	2300      	movs	r3, #0
 800634e:	930a      	str	r3, [sp, #40]	; 0x28
 8006350:	6823      	ldr	r3, [r4, #0]
 8006352:	9305      	str	r3, [sp, #20]
 8006354:	f8d8 3000 	ldr.w	r3, [r8]
 8006358:	f894 b018 	ldrb.w	fp, [r4, #24]
 800635c:	3307      	adds	r3, #7
 800635e:	f023 0307 	bic.w	r3, r3, #7
 8006362:	f103 0208 	add.w	r2, r3, #8
 8006366:	f8c8 2000 	str.w	r2, [r8]
 800636a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800636e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006372:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006376:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800637a:	9307      	str	r3, [sp, #28]
 800637c:	f8cd 8018 	str.w	r8, [sp, #24]
 8006380:	ee08 0a10 	vmov	s16, r0
 8006384:	4b9f      	ldr	r3, [pc, #636]	; (8006604 <_printf_float+0x2dc>)
 8006386:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800638a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800638e:	f7fa fbd5 	bl	8000b3c <__aeabi_dcmpun>
 8006392:	bb88      	cbnz	r0, 80063f8 <_printf_float+0xd0>
 8006394:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006398:	4b9a      	ldr	r3, [pc, #616]	; (8006604 <_printf_float+0x2dc>)
 800639a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800639e:	f7fa fbaf 	bl	8000b00 <__aeabi_dcmple>
 80063a2:	bb48      	cbnz	r0, 80063f8 <_printf_float+0xd0>
 80063a4:	2200      	movs	r2, #0
 80063a6:	2300      	movs	r3, #0
 80063a8:	4640      	mov	r0, r8
 80063aa:	4649      	mov	r1, r9
 80063ac:	f7fa fb9e 	bl	8000aec <__aeabi_dcmplt>
 80063b0:	b110      	cbz	r0, 80063b8 <_printf_float+0x90>
 80063b2:	232d      	movs	r3, #45	; 0x2d
 80063b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80063b8:	4b93      	ldr	r3, [pc, #588]	; (8006608 <_printf_float+0x2e0>)
 80063ba:	4894      	ldr	r0, [pc, #592]	; (800660c <_printf_float+0x2e4>)
 80063bc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80063c0:	bf94      	ite	ls
 80063c2:	4698      	movls	r8, r3
 80063c4:	4680      	movhi	r8, r0
 80063c6:	2303      	movs	r3, #3
 80063c8:	6123      	str	r3, [r4, #16]
 80063ca:	9b05      	ldr	r3, [sp, #20]
 80063cc:	f023 0204 	bic.w	r2, r3, #4
 80063d0:	6022      	str	r2, [r4, #0]
 80063d2:	f04f 0900 	mov.w	r9, #0
 80063d6:	9700      	str	r7, [sp, #0]
 80063d8:	4633      	mov	r3, r6
 80063da:	aa0b      	add	r2, sp, #44	; 0x2c
 80063dc:	4621      	mov	r1, r4
 80063de:	4628      	mov	r0, r5
 80063e0:	f000 f9d8 	bl	8006794 <_printf_common>
 80063e4:	3001      	adds	r0, #1
 80063e6:	f040 8090 	bne.w	800650a <_printf_float+0x1e2>
 80063ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80063ee:	b00d      	add	sp, #52	; 0x34
 80063f0:	ecbd 8b02 	vpop	{d8}
 80063f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063f8:	4642      	mov	r2, r8
 80063fa:	464b      	mov	r3, r9
 80063fc:	4640      	mov	r0, r8
 80063fe:	4649      	mov	r1, r9
 8006400:	f7fa fb9c 	bl	8000b3c <__aeabi_dcmpun>
 8006404:	b140      	cbz	r0, 8006418 <_printf_float+0xf0>
 8006406:	464b      	mov	r3, r9
 8006408:	2b00      	cmp	r3, #0
 800640a:	bfbc      	itt	lt
 800640c:	232d      	movlt	r3, #45	; 0x2d
 800640e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006412:	487f      	ldr	r0, [pc, #508]	; (8006610 <_printf_float+0x2e8>)
 8006414:	4b7f      	ldr	r3, [pc, #508]	; (8006614 <_printf_float+0x2ec>)
 8006416:	e7d1      	b.n	80063bc <_printf_float+0x94>
 8006418:	6863      	ldr	r3, [r4, #4]
 800641a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800641e:	9206      	str	r2, [sp, #24]
 8006420:	1c5a      	adds	r2, r3, #1
 8006422:	d13f      	bne.n	80064a4 <_printf_float+0x17c>
 8006424:	2306      	movs	r3, #6
 8006426:	6063      	str	r3, [r4, #4]
 8006428:	9b05      	ldr	r3, [sp, #20]
 800642a:	6861      	ldr	r1, [r4, #4]
 800642c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006430:	2300      	movs	r3, #0
 8006432:	9303      	str	r3, [sp, #12]
 8006434:	ab0a      	add	r3, sp, #40	; 0x28
 8006436:	e9cd b301 	strd	fp, r3, [sp, #4]
 800643a:	ab09      	add	r3, sp, #36	; 0x24
 800643c:	ec49 8b10 	vmov	d0, r8, r9
 8006440:	9300      	str	r3, [sp, #0]
 8006442:	6022      	str	r2, [r4, #0]
 8006444:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006448:	4628      	mov	r0, r5
 800644a:	f7ff fecd 	bl	80061e8 <__cvt>
 800644e:	9b06      	ldr	r3, [sp, #24]
 8006450:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006452:	2b47      	cmp	r3, #71	; 0x47
 8006454:	4680      	mov	r8, r0
 8006456:	d108      	bne.n	800646a <_printf_float+0x142>
 8006458:	1cc8      	adds	r0, r1, #3
 800645a:	db02      	blt.n	8006462 <_printf_float+0x13a>
 800645c:	6863      	ldr	r3, [r4, #4]
 800645e:	4299      	cmp	r1, r3
 8006460:	dd41      	ble.n	80064e6 <_printf_float+0x1be>
 8006462:	f1ab 0b02 	sub.w	fp, fp, #2
 8006466:	fa5f fb8b 	uxtb.w	fp, fp
 800646a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800646e:	d820      	bhi.n	80064b2 <_printf_float+0x18a>
 8006470:	3901      	subs	r1, #1
 8006472:	465a      	mov	r2, fp
 8006474:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006478:	9109      	str	r1, [sp, #36]	; 0x24
 800647a:	f7ff ff17 	bl	80062ac <__exponent>
 800647e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006480:	1813      	adds	r3, r2, r0
 8006482:	2a01      	cmp	r2, #1
 8006484:	4681      	mov	r9, r0
 8006486:	6123      	str	r3, [r4, #16]
 8006488:	dc02      	bgt.n	8006490 <_printf_float+0x168>
 800648a:	6822      	ldr	r2, [r4, #0]
 800648c:	07d2      	lsls	r2, r2, #31
 800648e:	d501      	bpl.n	8006494 <_printf_float+0x16c>
 8006490:	3301      	adds	r3, #1
 8006492:	6123      	str	r3, [r4, #16]
 8006494:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006498:	2b00      	cmp	r3, #0
 800649a:	d09c      	beq.n	80063d6 <_printf_float+0xae>
 800649c:	232d      	movs	r3, #45	; 0x2d
 800649e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80064a2:	e798      	b.n	80063d6 <_printf_float+0xae>
 80064a4:	9a06      	ldr	r2, [sp, #24]
 80064a6:	2a47      	cmp	r2, #71	; 0x47
 80064a8:	d1be      	bne.n	8006428 <_printf_float+0x100>
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d1bc      	bne.n	8006428 <_printf_float+0x100>
 80064ae:	2301      	movs	r3, #1
 80064b0:	e7b9      	b.n	8006426 <_printf_float+0xfe>
 80064b2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80064b6:	d118      	bne.n	80064ea <_printf_float+0x1c2>
 80064b8:	2900      	cmp	r1, #0
 80064ba:	6863      	ldr	r3, [r4, #4]
 80064bc:	dd0b      	ble.n	80064d6 <_printf_float+0x1ae>
 80064be:	6121      	str	r1, [r4, #16]
 80064c0:	b913      	cbnz	r3, 80064c8 <_printf_float+0x1a0>
 80064c2:	6822      	ldr	r2, [r4, #0]
 80064c4:	07d0      	lsls	r0, r2, #31
 80064c6:	d502      	bpl.n	80064ce <_printf_float+0x1a6>
 80064c8:	3301      	adds	r3, #1
 80064ca:	440b      	add	r3, r1
 80064cc:	6123      	str	r3, [r4, #16]
 80064ce:	65a1      	str	r1, [r4, #88]	; 0x58
 80064d0:	f04f 0900 	mov.w	r9, #0
 80064d4:	e7de      	b.n	8006494 <_printf_float+0x16c>
 80064d6:	b913      	cbnz	r3, 80064de <_printf_float+0x1b6>
 80064d8:	6822      	ldr	r2, [r4, #0]
 80064da:	07d2      	lsls	r2, r2, #31
 80064dc:	d501      	bpl.n	80064e2 <_printf_float+0x1ba>
 80064de:	3302      	adds	r3, #2
 80064e0:	e7f4      	b.n	80064cc <_printf_float+0x1a4>
 80064e2:	2301      	movs	r3, #1
 80064e4:	e7f2      	b.n	80064cc <_printf_float+0x1a4>
 80064e6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80064ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064ec:	4299      	cmp	r1, r3
 80064ee:	db05      	blt.n	80064fc <_printf_float+0x1d4>
 80064f0:	6823      	ldr	r3, [r4, #0]
 80064f2:	6121      	str	r1, [r4, #16]
 80064f4:	07d8      	lsls	r0, r3, #31
 80064f6:	d5ea      	bpl.n	80064ce <_printf_float+0x1a6>
 80064f8:	1c4b      	adds	r3, r1, #1
 80064fa:	e7e7      	b.n	80064cc <_printf_float+0x1a4>
 80064fc:	2900      	cmp	r1, #0
 80064fe:	bfd4      	ite	le
 8006500:	f1c1 0202 	rsble	r2, r1, #2
 8006504:	2201      	movgt	r2, #1
 8006506:	4413      	add	r3, r2
 8006508:	e7e0      	b.n	80064cc <_printf_float+0x1a4>
 800650a:	6823      	ldr	r3, [r4, #0]
 800650c:	055a      	lsls	r2, r3, #21
 800650e:	d407      	bmi.n	8006520 <_printf_float+0x1f8>
 8006510:	6923      	ldr	r3, [r4, #16]
 8006512:	4642      	mov	r2, r8
 8006514:	4631      	mov	r1, r6
 8006516:	4628      	mov	r0, r5
 8006518:	47b8      	blx	r7
 800651a:	3001      	adds	r0, #1
 800651c:	d12c      	bne.n	8006578 <_printf_float+0x250>
 800651e:	e764      	b.n	80063ea <_printf_float+0xc2>
 8006520:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006524:	f240 80e0 	bls.w	80066e8 <_printf_float+0x3c0>
 8006528:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800652c:	2200      	movs	r2, #0
 800652e:	2300      	movs	r3, #0
 8006530:	f7fa fad2 	bl	8000ad8 <__aeabi_dcmpeq>
 8006534:	2800      	cmp	r0, #0
 8006536:	d034      	beq.n	80065a2 <_printf_float+0x27a>
 8006538:	4a37      	ldr	r2, [pc, #220]	; (8006618 <_printf_float+0x2f0>)
 800653a:	2301      	movs	r3, #1
 800653c:	4631      	mov	r1, r6
 800653e:	4628      	mov	r0, r5
 8006540:	47b8      	blx	r7
 8006542:	3001      	adds	r0, #1
 8006544:	f43f af51 	beq.w	80063ea <_printf_float+0xc2>
 8006548:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800654c:	429a      	cmp	r2, r3
 800654e:	db02      	blt.n	8006556 <_printf_float+0x22e>
 8006550:	6823      	ldr	r3, [r4, #0]
 8006552:	07d8      	lsls	r0, r3, #31
 8006554:	d510      	bpl.n	8006578 <_printf_float+0x250>
 8006556:	ee18 3a10 	vmov	r3, s16
 800655a:	4652      	mov	r2, sl
 800655c:	4631      	mov	r1, r6
 800655e:	4628      	mov	r0, r5
 8006560:	47b8      	blx	r7
 8006562:	3001      	adds	r0, #1
 8006564:	f43f af41 	beq.w	80063ea <_printf_float+0xc2>
 8006568:	f04f 0800 	mov.w	r8, #0
 800656c:	f104 091a 	add.w	r9, r4, #26
 8006570:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006572:	3b01      	subs	r3, #1
 8006574:	4543      	cmp	r3, r8
 8006576:	dc09      	bgt.n	800658c <_printf_float+0x264>
 8006578:	6823      	ldr	r3, [r4, #0]
 800657a:	079b      	lsls	r3, r3, #30
 800657c:	f100 8105 	bmi.w	800678a <_printf_float+0x462>
 8006580:	68e0      	ldr	r0, [r4, #12]
 8006582:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006584:	4298      	cmp	r0, r3
 8006586:	bfb8      	it	lt
 8006588:	4618      	movlt	r0, r3
 800658a:	e730      	b.n	80063ee <_printf_float+0xc6>
 800658c:	2301      	movs	r3, #1
 800658e:	464a      	mov	r2, r9
 8006590:	4631      	mov	r1, r6
 8006592:	4628      	mov	r0, r5
 8006594:	47b8      	blx	r7
 8006596:	3001      	adds	r0, #1
 8006598:	f43f af27 	beq.w	80063ea <_printf_float+0xc2>
 800659c:	f108 0801 	add.w	r8, r8, #1
 80065a0:	e7e6      	b.n	8006570 <_printf_float+0x248>
 80065a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	dc39      	bgt.n	800661c <_printf_float+0x2f4>
 80065a8:	4a1b      	ldr	r2, [pc, #108]	; (8006618 <_printf_float+0x2f0>)
 80065aa:	2301      	movs	r3, #1
 80065ac:	4631      	mov	r1, r6
 80065ae:	4628      	mov	r0, r5
 80065b0:	47b8      	blx	r7
 80065b2:	3001      	adds	r0, #1
 80065b4:	f43f af19 	beq.w	80063ea <_printf_float+0xc2>
 80065b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80065bc:	4313      	orrs	r3, r2
 80065be:	d102      	bne.n	80065c6 <_printf_float+0x29e>
 80065c0:	6823      	ldr	r3, [r4, #0]
 80065c2:	07d9      	lsls	r1, r3, #31
 80065c4:	d5d8      	bpl.n	8006578 <_printf_float+0x250>
 80065c6:	ee18 3a10 	vmov	r3, s16
 80065ca:	4652      	mov	r2, sl
 80065cc:	4631      	mov	r1, r6
 80065ce:	4628      	mov	r0, r5
 80065d0:	47b8      	blx	r7
 80065d2:	3001      	adds	r0, #1
 80065d4:	f43f af09 	beq.w	80063ea <_printf_float+0xc2>
 80065d8:	f04f 0900 	mov.w	r9, #0
 80065dc:	f104 0a1a 	add.w	sl, r4, #26
 80065e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065e2:	425b      	negs	r3, r3
 80065e4:	454b      	cmp	r3, r9
 80065e6:	dc01      	bgt.n	80065ec <_printf_float+0x2c4>
 80065e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065ea:	e792      	b.n	8006512 <_printf_float+0x1ea>
 80065ec:	2301      	movs	r3, #1
 80065ee:	4652      	mov	r2, sl
 80065f0:	4631      	mov	r1, r6
 80065f2:	4628      	mov	r0, r5
 80065f4:	47b8      	blx	r7
 80065f6:	3001      	adds	r0, #1
 80065f8:	f43f aef7 	beq.w	80063ea <_printf_float+0xc2>
 80065fc:	f109 0901 	add.w	r9, r9, #1
 8006600:	e7ee      	b.n	80065e0 <_printf_float+0x2b8>
 8006602:	bf00      	nop
 8006604:	7fefffff 	.word	0x7fefffff
 8006608:	08008f9c 	.word	0x08008f9c
 800660c:	08008fa0 	.word	0x08008fa0
 8006610:	08008fa8 	.word	0x08008fa8
 8006614:	08008fa4 	.word	0x08008fa4
 8006618:	08008fac 	.word	0x08008fac
 800661c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800661e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006620:	429a      	cmp	r2, r3
 8006622:	bfa8      	it	ge
 8006624:	461a      	movge	r2, r3
 8006626:	2a00      	cmp	r2, #0
 8006628:	4691      	mov	r9, r2
 800662a:	dc37      	bgt.n	800669c <_printf_float+0x374>
 800662c:	f04f 0b00 	mov.w	fp, #0
 8006630:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006634:	f104 021a 	add.w	r2, r4, #26
 8006638:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800663a:	9305      	str	r3, [sp, #20]
 800663c:	eba3 0309 	sub.w	r3, r3, r9
 8006640:	455b      	cmp	r3, fp
 8006642:	dc33      	bgt.n	80066ac <_printf_float+0x384>
 8006644:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006648:	429a      	cmp	r2, r3
 800664a:	db3b      	blt.n	80066c4 <_printf_float+0x39c>
 800664c:	6823      	ldr	r3, [r4, #0]
 800664e:	07da      	lsls	r2, r3, #31
 8006650:	d438      	bmi.n	80066c4 <_printf_float+0x39c>
 8006652:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006654:	9a05      	ldr	r2, [sp, #20]
 8006656:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006658:	1a9a      	subs	r2, r3, r2
 800665a:	eba3 0901 	sub.w	r9, r3, r1
 800665e:	4591      	cmp	r9, r2
 8006660:	bfa8      	it	ge
 8006662:	4691      	movge	r9, r2
 8006664:	f1b9 0f00 	cmp.w	r9, #0
 8006668:	dc35      	bgt.n	80066d6 <_printf_float+0x3ae>
 800666a:	f04f 0800 	mov.w	r8, #0
 800666e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006672:	f104 0a1a 	add.w	sl, r4, #26
 8006676:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800667a:	1a9b      	subs	r3, r3, r2
 800667c:	eba3 0309 	sub.w	r3, r3, r9
 8006680:	4543      	cmp	r3, r8
 8006682:	f77f af79 	ble.w	8006578 <_printf_float+0x250>
 8006686:	2301      	movs	r3, #1
 8006688:	4652      	mov	r2, sl
 800668a:	4631      	mov	r1, r6
 800668c:	4628      	mov	r0, r5
 800668e:	47b8      	blx	r7
 8006690:	3001      	adds	r0, #1
 8006692:	f43f aeaa 	beq.w	80063ea <_printf_float+0xc2>
 8006696:	f108 0801 	add.w	r8, r8, #1
 800669a:	e7ec      	b.n	8006676 <_printf_float+0x34e>
 800669c:	4613      	mov	r3, r2
 800669e:	4631      	mov	r1, r6
 80066a0:	4642      	mov	r2, r8
 80066a2:	4628      	mov	r0, r5
 80066a4:	47b8      	blx	r7
 80066a6:	3001      	adds	r0, #1
 80066a8:	d1c0      	bne.n	800662c <_printf_float+0x304>
 80066aa:	e69e      	b.n	80063ea <_printf_float+0xc2>
 80066ac:	2301      	movs	r3, #1
 80066ae:	4631      	mov	r1, r6
 80066b0:	4628      	mov	r0, r5
 80066b2:	9205      	str	r2, [sp, #20]
 80066b4:	47b8      	blx	r7
 80066b6:	3001      	adds	r0, #1
 80066b8:	f43f ae97 	beq.w	80063ea <_printf_float+0xc2>
 80066bc:	9a05      	ldr	r2, [sp, #20]
 80066be:	f10b 0b01 	add.w	fp, fp, #1
 80066c2:	e7b9      	b.n	8006638 <_printf_float+0x310>
 80066c4:	ee18 3a10 	vmov	r3, s16
 80066c8:	4652      	mov	r2, sl
 80066ca:	4631      	mov	r1, r6
 80066cc:	4628      	mov	r0, r5
 80066ce:	47b8      	blx	r7
 80066d0:	3001      	adds	r0, #1
 80066d2:	d1be      	bne.n	8006652 <_printf_float+0x32a>
 80066d4:	e689      	b.n	80063ea <_printf_float+0xc2>
 80066d6:	9a05      	ldr	r2, [sp, #20]
 80066d8:	464b      	mov	r3, r9
 80066da:	4442      	add	r2, r8
 80066dc:	4631      	mov	r1, r6
 80066de:	4628      	mov	r0, r5
 80066e0:	47b8      	blx	r7
 80066e2:	3001      	adds	r0, #1
 80066e4:	d1c1      	bne.n	800666a <_printf_float+0x342>
 80066e6:	e680      	b.n	80063ea <_printf_float+0xc2>
 80066e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80066ea:	2a01      	cmp	r2, #1
 80066ec:	dc01      	bgt.n	80066f2 <_printf_float+0x3ca>
 80066ee:	07db      	lsls	r3, r3, #31
 80066f0:	d538      	bpl.n	8006764 <_printf_float+0x43c>
 80066f2:	2301      	movs	r3, #1
 80066f4:	4642      	mov	r2, r8
 80066f6:	4631      	mov	r1, r6
 80066f8:	4628      	mov	r0, r5
 80066fa:	47b8      	blx	r7
 80066fc:	3001      	adds	r0, #1
 80066fe:	f43f ae74 	beq.w	80063ea <_printf_float+0xc2>
 8006702:	ee18 3a10 	vmov	r3, s16
 8006706:	4652      	mov	r2, sl
 8006708:	4631      	mov	r1, r6
 800670a:	4628      	mov	r0, r5
 800670c:	47b8      	blx	r7
 800670e:	3001      	adds	r0, #1
 8006710:	f43f ae6b 	beq.w	80063ea <_printf_float+0xc2>
 8006714:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006718:	2200      	movs	r2, #0
 800671a:	2300      	movs	r3, #0
 800671c:	f7fa f9dc 	bl	8000ad8 <__aeabi_dcmpeq>
 8006720:	b9d8      	cbnz	r0, 800675a <_printf_float+0x432>
 8006722:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006724:	f108 0201 	add.w	r2, r8, #1
 8006728:	3b01      	subs	r3, #1
 800672a:	4631      	mov	r1, r6
 800672c:	4628      	mov	r0, r5
 800672e:	47b8      	blx	r7
 8006730:	3001      	adds	r0, #1
 8006732:	d10e      	bne.n	8006752 <_printf_float+0x42a>
 8006734:	e659      	b.n	80063ea <_printf_float+0xc2>
 8006736:	2301      	movs	r3, #1
 8006738:	4652      	mov	r2, sl
 800673a:	4631      	mov	r1, r6
 800673c:	4628      	mov	r0, r5
 800673e:	47b8      	blx	r7
 8006740:	3001      	adds	r0, #1
 8006742:	f43f ae52 	beq.w	80063ea <_printf_float+0xc2>
 8006746:	f108 0801 	add.w	r8, r8, #1
 800674a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800674c:	3b01      	subs	r3, #1
 800674e:	4543      	cmp	r3, r8
 8006750:	dcf1      	bgt.n	8006736 <_printf_float+0x40e>
 8006752:	464b      	mov	r3, r9
 8006754:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006758:	e6dc      	b.n	8006514 <_printf_float+0x1ec>
 800675a:	f04f 0800 	mov.w	r8, #0
 800675e:	f104 0a1a 	add.w	sl, r4, #26
 8006762:	e7f2      	b.n	800674a <_printf_float+0x422>
 8006764:	2301      	movs	r3, #1
 8006766:	4642      	mov	r2, r8
 8006768:	e7df      	b.n	800672a <_printf_float+0x402>
 800676a:	2301      	movs	r3, #1
 800676c:	464a      	mov	r2, r9
 800676e:	4631      	mov	r1, r6
 8006770:	4628      	mov	r0, r5
 8006772:	47b8      	blx	r7
 8006774:	3001      	adds	r0, #1
 8006776:	f43f ae38 	beq.w	80063ea <_printf_float+0xc2>
 800677a:	f108 0801 	add.w	r8, r8, #1
 800677e:	68e3      	ldr	r3, [r4, #12]
 8006780:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006782:	1a5b      	subs	r3, r3, r1
 8006784:	4543      	cmp	r3, r8
 8006786:	dcf0      	bgt.n	800676a <_printf_float+0x442>
 8006788:	e6fa      	b.n	8006580 <_printf_float+0x258>
 800678a:	f04f 0800 	mov.w	r8, #0
 800678e:	f104 0919 	add.w	r9, r4, #25
 8006792:	e7f4      	b.n	800677e <_printf_float+0x456>

08006794 <_printf_common>:
 8006794:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006798:	4616      	mov	r6, r2
 800679a:	4699      	mov	r9, r3
 800679c:	688a      	ldr	r2, [r1, #8]
 800679e:	690b      	ldr	r3, [r1, #16]
 80067a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80067a4:	4293      	cmp	r3, r2
 80067a6:	bfb8      	it	lt
 80067a8:	4613      	movlt	r3, r2
 80067aa:	6033      	str	r3, [r6, #0]
 80067ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80067b0:	4607      	mov	r7, r0
 80067b2:	460c      	mov	r4, r1
 80067b4:	b10a      	cbz	r2, 80067ba <_printf_common+0x26>
 80067b6:	3301      	adds	r3, #1
 80067b8:	6033      	str	r3, [r6, #0]
 80067ba:	6823      	ldr	r3, [r4, #0]
 80067bc:	0699      	lsls	r1, r3, #26
 80067be:	bf42      	ittt	mi
 80067c0:	6833      	ldrmi	r3, [r6, #0]
 80067c2:	3302      	addmi	r3, #2
 80067c4:	6033      	strmi	r3, [r6, #0]
 80067c6:	6825      	ldr	r5, [r4, #0]
 80067c8:	f015 0506 	ands.w	r5, r5, #6
 80067cc:	d106      	bne.n	80067dc <_printf_common+0x48>
 80067ce:	f104 0a19 	add.w	sl, r4, #25
 80067d2:	68e3      	ldr	r3, [r4, #12]
 80067d4:	6832      	ldr	r2, [r6, #0]
 80067d6:	1a9b      	subs	r3, r3, r2
 80067d8:	42ab      	cmp	r3, r5
 80067da:	dc26      	bgt.n	800682a <_printf_common+0x96>
 80067dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80067e0:	1e13      	subs	r3, r2, #0
 80067e2:	6822      	ldr	r2, [r4, #0]
 80067e4:	bf18      	it	ne
 80067e6:	2301      	movne	r3, #1
 80067e8:	0692      	lsls	r2, r2, #26
 80067ea:	d42b      	bmi.n	8006844 <_printf_common+0xb0>
 80067ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80067f0:	4649      	mov	r1, r9
 80067f2:	4638      	mov	r0, r7
 80067f4:	47c0      	blx	r8
 80067f6:	3001      	adds	r0, #1
 80067f8:	d01e      	beq.n	8006838 <_printf_common+0xa4>
 80067fa:	6823      	ldr	r3, [r4, #0]
 80067fc:	68e5      	ldr	r5, [r4, #12]
 80067fe:	6832      	ldr	r2, [r6, #0]
 8006800:	f003 0306 	and.w	r3, r3, #6
 8006804:	2b04      	cmp	r3, #4
 8006806:	bf08      	it	eq
 8006808:	1aad      	subeq	r5, r5, r2
 800680a:	68a3      	ldr	r3, [r4, #8]
 800680c:	6922      	ldr	r2, [r4, #16]
 800680e:	bf0c      	ite	eq
 8006810:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006814:	2500      	movne	r5, #0
 8006816:	4293      	cmp	r3, r2
 8006818:	bfc4      	itt	gt
 800681a:	1a9b      	subgt	r3, r3, r2
 800681c:	18ed      	addgt	r5, r5, r3
 800681e:	2600      	movs	r6, #0
 8006820:	341a      	adds	r4, #26
 8006822:	42b5      	cmp	r5, r6
 8006824:	d11a      	bne.n	800685c <_printf_common+0xc8>
 8006826:	2000      	movs	r0, #0
 8006828:	e008      	b.n	800683c <_printf_common+0xa8>
 800682a:	2301      	movs	r3, #1
 800682c:	4652      	mov	r2, sl
 800682e:	4649      	mov	r1, r9
 8006830:	4638      	mov	r0, r7
 8006832:	47c0      	blx	r8
 8006834:	3001      	adds	r0, #1
 8006836:	d103      	bne.n	8006840 <_printf_common+0xac>
 8006838:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800683c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006840:	3501      	adds	r5, #1
 8006842:	e7c6      	b.n	80067d2 <_printf_common+0x3e>
 8006844:	18e1      	adds	r1, r4, r3
 8006846:	1c5a      	adds	r2, r3, #1
 8006848:	2030      	movs	r0, #48	; 0x30
 800684a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800684e:	4422      	add	r2, r4
 8006850:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006854:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006858:	3302      	adds	r3, #2
 800685a:	e7c7      	b.n	80067ec <_printf_common+0x58>
 800685c:	2301      	movs	r3, #1
 800685e:	4622      	mov	r2, r4
 8006860:	4649      	mov	r1, r9
 8006862:	4638      	mov	r0, r7
 8006864:	47c0      	blx	r8
 8006866:	3001      	adds	r0, #1
 8006868:	d0e6      	beq.n	8006838 <_printf_common+0xa4>
 800686a:	3601      	adds	r6, #1
 800686c:	e7d9      	b.n	8006822 <_printf_common+0x8e>
	...

08006870 <_printf_i>:
 8006870:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006874:	7e0f      	ldrb	r7, [r1, #24]
 8006876:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006878:	2f78      	cmp	r7, #120	; 0x78
 800687a:	4691      	mov	r9, r2
 800687c:	4680      	mov	r8, r0
 800687e:	460c      	mov	r4, r1
 8006880:	469a      	mov	sl, r3
 8006882:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006886:	d807      	bhi.n	8006898 <_printf_i+0x28>
 8006888:	2f62      	cmp	r7, #98	; 0x62
 800688a:	d80a      	bhi.n	80068a2 <_printf_i+0x32>
 800688c:	2f00      	cmp	r7, #0
 800688e:	f000 80d8 	beq.w	8006a42 <_printf_i+0x1d2>
 8006892:	2f58      	cmp	r7, #88	; 0x58
 8006894:	f000 80a3 	beq.w	80069de <_printf_i+0x16e>
 8006898:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800689c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80068a0:	e03a      	b.n	8006918 <_printf_i+0xa8>
 80068a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80068a6:	2b15      	cmp	r3, #21
 80068a8:	d8f6      	bhi.n	8006898 <_printf_i+0x28>
 80068aa:	a101      	add	r1, pc, #4	; (adr r1, 80068b0 <_printf_i+0x40>)
 80068ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80068b0:	08006909 	.word	0x08006909
 80068b4:	0800691d 	.word	0x0800691d
 80068b8:	08006899 	.word	0x08006899
 80068bc:	08006899 	.word	0x08006899
 80068c0:	08006899 	.word	0x08006899
 80068c4:	08006899 	.word	0x08006899
 80068c8:	0800691d 	.word	0x0800691d
 80068cc:	08006899 	.word	0x08006899
 80068d0:	08006899 	.word	0x08006899
 80068d4:	08006899 	.word	0x08006899
 80068d8:	08006899 	.word	0x08006899
 80068dc:	08006a29 	.word	0x08006a29
 80068e0:	0800694d 	.word	0x0800694d
 80068e4:	08006a0b 	.word	0x08006a0b
 80068e8:	08006899 	.word	0x08006899
 80068ec:	08006899 	.word	0x08006899
 80068f0:	08006a4b 	.word	0x08006a4b
 80068f4:	08006899 	.word	0x08006899
 80068f8:	0800694d 	.word	0x0800694d
 80068fc:	08006899 	.word	0x08006899
 8006900:	08006899 	.word	0x08006899
 8006904:	08006a13 	.word	0x08006a13
 8006908:	682b      	ldr	r3, [r5, #0]
 800690a:	1d1a      	adds	r2, r3, #4
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	602a      	str	r2, [r5, #0]
 8006910:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006914:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006918:	2301      	movs	r3, #1
 800691a:	e0a3      	b.n	8006a64 <_printf_i+0x1f4>
 800691c:	6820      	ldr	r0, [r4, #0]
 800691e:	6829      	ldr	r1, [r5, #0]
 8006920:	0606      	lsls	r6, r0, #24
 8006922:	f101 0304 	add.w	r3, r1, #4
 8006926:	d50a      	bpl.n	800693e <_printf_i+0xce>
 8006928:	680e      	ldr	r6, [r1, #0]
 800692a:	602b      	str	r3, [r5, #0]
 800692c:	2e00      	cmp	r6, #0
 800692e:	da03      	bge.n	8006938 <_printf_i+0xc8>
 8006930:	232d      	movs	r3, #45	; 0x2d
 8006932:	4276      	negs	r6, r6
 8006934:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006938:	485e      	ldr	r0, [pc, #376]	; (8006ab4 <_printf_i+0x244>)
 800693a:	230a      	movs	r3, #10
 800693c:	e019      	b.n	8006972 <_printf_i+0x102>
 800693e:	680e      	ldr	r6, [r1, #0]
 8006940:	602b      	str	r3, [r5, #0]
 8006942:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006946:	bf18      	it	ne
 8006948:	b236      	sxthne	r6, r6
 800694a:	e7ef      	b.n	800692c <_printf_i+0xbc>
 800694c:	682b      	ldr	r3, [r5, #0]
 800694e:	6820      	ldr	r0, [r4, #0]
 8006950:	1d19      	adds	r1, r3, #4
 8006952:	6029      	str	r1, [r5, #0]
 8006954:	0601      	lsls	r1, r0, #24
 8006956:	d501      	bpl.n	800695c <_printf_i+0xec>
 8006958:	681e      	ldr	r6, [r3, #0]
 800695a:	e002      	b.n	8006962 <_printf_i+0xf2>
 800695c:	0646      	lsls	r6, r0, #25
 800695e:	d5fb      	bpl.n	8006958 <_printf_i+0xe8>
 8006960:	881e      	ldrh	r6, [r3, #0]
 8006962:	4854      	ldr	r0, [pc, #336]	; (8006ab4 <_printf_i+0x244>)
 8006964:	2f6f      	cmp	r7, #111	; 0x6f
 8006966:	bf0c      	ite	eq
 8006968:	2308      	moveq	r3, #8
 800696a:	230a      	movne	r3, #10
 800696c:	2100      	movs	r1, #0
 800696e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006972:	6865      	ldr	r5, [r4, #4]
 8006974:	60a5      	str	r5, [r4, #8]
 8006976:	2d00      	cmp	r5, #0
 8006978:	bfa2      	ittt	ge
 800697a:	6821      	ldrge	r1, [r4, #0]
 800697c:	f021 0104 	bicge.w	r1, r1, #4
 8006980:	6021      	strge	r1, [r4, #0]
 8006982:	b90e      	cbnz	r6, 8006988 <_printf_i+0x118>
 8006984:	2d00      	cmp	r5, #0
 8006986:	d04d      	beq.n	8006a24 <_printf_i+0x1b4>
 8006988:	4615      	mov	r5, r2
 800698a:	fbb6 f1f3 	udiv	r1, r6, r3
 800698e:	fb03 6711 	mls	r7, r3, r1, r6
 8006992:	5dc7      	ldrb	r7, [r0, r7]
 8006994:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006998:	4637      	mov	r7, r6
 800699a:	42bb      	cmp	r3, r7
 800699c:	460e      	mov	r6, r1
 800699e:	d9f4      	bls.n	800698a <_printf_i+0x11a>
 80069a0:	2b08      	cmp	r3, #8
 80069a2:	d10b      	bne.n	80069bc <_printf_i+0x14c>
 80069a4:	6823      	ldr	r3, [r4, #0]
 80069a6:	07de      	lsls	r6, r3, #31
 80069a8:	d508      	bpl.n	80069bc <_printf_i+0x14c>
 80069aa:	6923      	ldr	r3, [r4, #16]
 80069ac:	6861      	ldr	r1, [r4, #4]
 80069ae:	4299      	cmp	r1, r3
 80069b0:	bfde      	ittt	le
 80069b2:	2330      	movle	r3, #48	; 0x30
 80069b4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80069b8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80069bc:	1b52      	subs	r2, r2, r5
 80069be:	6122      	str	r2, [r4, #16]
 80069c0:	f8cd a000 	str.w	sl, [sp]
 80069c4:	464b      	mov	r3, r9
 80069c6:	aa03      	add	r2, sp, #12
 80069c8:	4621      	mov	r1, r4
 80069ca:	4640      	mov	r0, r8
 80069cc:	f7ff fee2 	bl	8006794 <_printf_common>
 80069d0:	3001      	adds	r0, #1
 80069d2:	d14c      	bne.n	8006a6e <_printf_i+0x1fe>
 80069d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80069d8:	b004      	add	sp, #16
 80069da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069de:	4835      	ldr	r0, [pc, #212]	; (8006ab4 <_printf_i+0x244>)
 80069e0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80069e4:	6829      	ldr	r1, [r5, #0]
 80069e6:	6823      	ldr	r3, [r4, #0]
 80069e8:	f851 6b04 	ldr.w	r6, [r1], #4
 80069ec:	6029      	str	r1, [r5, #0]
 80069ee:	061d      	lsls	r5, r3, #24
 80069f0:	d514      	bpl.n	8006a1c <_printf_i+0x1ac>
 80069f2:	07df      	lsls	r7, r3, #31
 80069f4:	bf44      	itt	mi
 80069f6:	f043 0320 	orrmi.w	r3, r3, #32
 80069fa:	6023      	strmi	r3, [r4, #0]
 80069fc:	b91e      	cbnz	r6, 8006a06 <_printf_i+0x196>
 80069fe:	6823      	ldr	r3, [r4, #0]
 8006a00:	f023 0320 	bic.w	r3, r3, #32
 8006a04:	6023      	str	r3, [r4, #0]
 8006a06:	2310      	movs	r3, #16
 8006a08:	e7b0      	b.n	800696c <_printf_i+0xfc>
 8006a0a:	6823      	ldr	r3, [r4, #0]
 8006a0c:	f043 0320 	orr.w	r3, r3, #32
 8006a10:	6023      	str	r3, [r4, #0]
 8006a12:	2378      	movs	r3, #120	; 0x78
 8006a14:	4828      	ldr	r0, [pc, #160]	; (8006ab8 <_printf_i+0x248>)
 8006a16:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006a1a:	e7e3      	b.n	80069e4 <_printf_i+0x174>
 8006a1c:	0659      	lsls	r1, r3, #25
 8006a1e:	bf48      	it	mi
 8006a20:	b2b6      	uxthmi	r6, r6
 8006a22:	e7e6      	b.n	80069f2 <_printf_i+0x182>
 8006a24:	4615      	mov	r5, r2
 8006a26:	e7bb      	b.n	80069a0 <_printf_i+0x130>
 8006a28:	682b      	ldr	r3, [r5, #0]
 8006a2a:	6826      	ldr	r6, [r4, #0]
 8006a2c:	6961      	ldr	r1, [r4, #20]
 8006a2e:	1d18      	adds	r0, r3, #4
 8006a30:	6028      	str	r0, [r5, #0]
 8006a32:	0635      	lsls	r5, r6, #24
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	d501      	bpl.n	8006a3c <_printf_i+0x1cc>
 8006a38:	6019      	str	r1, [r3, #0]
 8006a3a:	e002      	b.n	8006a42 <_printf_i+0x1d2>
 8006a3c:	0670      	lsls	r0, r6, #25
 8006a3e:	d5fb      	bpl.n	8006a38 <_printf_i+0x1c8>
 8006a40:	8019      	strh	r1, [r3, #0]
 8006a42:	2300      	movs	r3, #0
 8006a44:	6123      	str	r3, [r4, #16]
 8006a46:	4615      	mov	r5, r2
 8006a48:	e7ba      	b.n	80069c0 <_printf_i+0x150>
 8006a4a:	682b      	ldr	r3, [r5, #0]
 8006a4c:	1d1a      	adds	r2, r3, #4
 8006a4e:	602a      	str	r2, [r5, #0]
 8006a50:	681d      	ldr	r5, [r3, #0]
 8006a52:	6862      	ldr	r2, [r4, #4]
 8006a54:	2100      	movs	r1, #0
 8006a56:	4628      	mov	r0, r5
 8006a58:	f7f9 fbca 	bl	80001f0 <memchr>
 8006a5c:	b108      	cbz	r0, 8006a62 <_printf_i+0x1f2>
 8006a5e:	1b40      	subs	r0, r0, r5
 8006a60:	6060      	str	r0, [r4, #4]
 8006a62:	6863      	ldr	r3, [r4, #4]
 8006a64:	6123      	str	r3, [r4, #16]
 8006a66:	2300      	movs	r3, #0
 8006a68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a6c:	e7a8      	b.n	80069c0 <_printf_i+0x150>
 8006a6e:	6923      	ldr	r3, [r4, #16]
 8006a70:	462a      	mov	r2, r5
 8006a72:	4649      	mov	r1, r9
 8006a74:	4640      	mov	r0, r8
 8006a76:	47d0      	blx	sl
 8006a78:	3001      	adds	r0, #1
 8006a7a:	d0ab      	beq.n	80069d4 <_printf_i+0x164>
 8006a7c:	6823      	ldr	r3, [r4, #0]
 8006a7e:	079b      	lsls	r3, r3, #30
 8006a80:	d413      	bmi.n	8006aaa <_printf_i+0x23a>
 8006a82:	68e0      	ldr	r0, [r4, #12]
 8006a84:	9b03      	ldr	r3, [sp, #12]
 8006a86:	4298      	cmp	r0, r3
 8006a88:	bfb8      	it	lt
 8006a8a:	4618      	movlt	r0, r3
 8006a8c:	e7a4      	b.n	80069d8 <_printf_i+0x168>
 8006a8e:	2301      	movs	r3, #1
 8006a90:	4632      	mov	r2, r6
 8006a92:	4649      	mov	r1, r9
 8006a94:	4640      	mov	r0, r8
 8006a96:	47d0      	blx	sl
 8006a98:	3001      	adds	r0, #1
 8006a9a:	d09b      	beq.n	80069d4 <_printf_i+0x164>
 8006a9c:	3501      	adds	r5, #1
 8006a9e:	68e3      	ldr	r3, [r4, #12]
 8006aa0:	9903      	ldr	r1, [sp, #12]
 8006aa2:	1a5b      	subs	r3, r3, r1
 8006aa4:	42ab      	cmp	r3, r5
 8006aa6:	dcf2      	bgt.n	8006a8e <_printf_i+0x21e>
 8006aa8:	e7eb      	b.n	8006a82 <_printf_i+0x212>
 8006aaa:	2500      	movs	r5, #0
 8006aac:	f104 0619 	add.w	r6, r4, #25
 8006ab0:	e7f5      	b.n	8006a9e <_printf_i+0x22e>
 8006ab2:	bf00      	nop
 8006ab4:	08008fae 	.word	0x08008fae
 8006ab8:	08008fbf 	.word	0x08008fbf

08006abc <cleanup_glue>:
 8006abc:	b538      	push	{r3, r4, r5, lr}
 8006abe:	460c      	mov	r4, r1
 8006ac0:	6809      	ldr	r1, [r1, #0]
 8006ac2:	4605      	mov	r5, r0
 8006ac4:	b109      	cbz	r1, 8006aca <cleanup_glue+0xe>
 8006ac6:	f7ff fff9 	bl	8006abc <cleanup_glue>
 8006aca:	4621      	mov	r1, r4
 8006acc:	4628      	mov	r0, r5
 8006ace:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006ad2:	f001 bbf5 	b.w	80082c0 <_free_r>
	...

08006ad8 <_reclaim_reent>:
 8006ad8:	4b2c      	ldr	r3, [pc, #176]	; (8006b8c <_reclaim_reent+0xb4>)
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4283      	cmp	r3, r0
 8006ade:	b570      	push	{r4, r5, r6, lr}
 8006ae0:	4604      	mov	r4, r0
 8006ae2:	d051      	beq.n	8006b88 <_reclaim_reent+0xb0>
 8006ae4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006ae6:	b143      	cbz	r3, 8006afa <_reclaim_reent+0x22>
 8006ae8:	68db      	ldr	r3, [r3, #12]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d14a      	bne.n	8006b84 <_reclaim_reent+0xac>
 8006aee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006af0:	6819      	ldr	r1, [r3, #0]
 8006af2:	b111      	cbz	r1, 8006afa <_reclaim_reent+0x22>
 8006af4:	4620      	mov	r0, r4
 8006af6:	f001 fbe3 	bl	80082c0 <_free_r>
 8006afa:	6961      	ldr	r1, [r4, #20]
 8006afc:	b111      	cbz	r1, 8006b04 <_reclaim_reent+0x2c>
 8006afe:	4620      	mov	r0, r4
 8006b00:	f001 fbde 	bl	80082c0 <_free_r>
 8006b04:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006b06:	b111      	cbz	r1, 8006b0e <_reclaim_reent+0x36>
 8006b08:	4620      	mov	r0, r4
 8006b0a:	f001 fbd9 	bl	80082c0 <_free_r>
 8006b0e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006b10:	b111      	cbz	r1, 8006b18 <_reclaim_reent+0x40>
 8006b12:	4620      	mov	r0, r4
 8006b14:	f001 fbd4 	bl	80082c0 <_free_r>
 8006b18:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006b1a:	b111      	cbz	r1, 8006b22 <_reclaim_reent+0x4a>
 8006b1c:	4620      	mov	r0, r4
 8006b1e:	f001 fbcf 	bl	80082c0 <_free_r>
 8006b22:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006b24:	b111      	cbz	r1, 8006b2c <_reclaim_reent+0x54>
 8006b26:	4620      	mov	r0, r4
 8006b28:	f001 fbca 	bl	80082c0 <_free_r>
 8006b2c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8006b2e:	b111      	cbz	r1, 8006b36 <_reclaim_reent+0x5e>
 8006b30:	4620      	mov	r0, r4
 8006b32:	f001 fbc5 	bl	80082c0 <_free_r>
 8006b36:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006b38:	b111      	cbz	r1, 8006b40 <_reclaim_reent+0x68>
 8006b3a:	4620      	mov	r0, r4
 8006b3c:	f001 fbc0 	bl	80082c0 <_free_r>
 8006b40:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006b42:	b111      	cbz	r1, 8006b4a <_reclaim_reent+0x72>
 8006b44:	4620      	mov	r0, r4
 8006b46:	f001 fbbb 	bl	80082c0 <_free_r>
 8006b4a:	69a3      	ldr	r3, [r4, #24]
 8006b4c:	b1e3      	cbz	r3, 8006b88 <_reclaim_reent+0xb0>
 8006b4e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006b50:	4620      	mov	r0, r4
 8006b52:	4798      	blx	r3
 8006b54:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006b56:	b1b9      	cbz	r1, 8006b88 <_reclaim_reent+0xb0>
 8006b58:	4620      	mov	r0, r4
 8006b5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006b5e:	f7ff bfad 	b.w	8006abc <cleanup_glue>
 8006b62:	5949      	ldr	r1, [r1, r5]
 8006b64:	b941      	cbnz	r1, 8006b78 <_reclaim_reent+0xa0>
 8006b66:	3504      	adds	r5, #4
 8006b68:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006b6a:	2d80      	cmp	r5, #128	; 0x80
 8006b6c:	68d9      	ldr	r1, [r3, #12]
 8006b6e:	d1f8      	bne.n	8006b62 <_reclaim_reent+0x8a>
 8006b70:	4620      	mov	r0, r4
 8006b72:	f001 fba5 	bl	80082c0 <_free_r>
 8006b76:	e7ba      	b.n	8006aee <_reclaim_reent+0x16>
 8006b78:	680e      	ldr	r6, [r1, #0]
 8006b7a:	4620      	mov	r0, r4
 8006b7c:	f001 fba0 	bl	80082c0 <_free_r>
 8006b80:	4631      	mov	r1, r6
 8006b82:	e7ef      	b.n	8006b64 <_reclaim_reent+0x8c>
 8006b84:	2500      	movs	r5, #0
 8006b86:	e7ef      	b.n	8006b68 <_reclaim_reent+0x90>
 8006b88:	bd70      	pop	{r4, r5, r6, pc}
 8006b8a:	bf00      	nop
 8006b8c:	20000010 	.word	0x20000010

08006b90 <_sbrk_r>:
 8006b90:	b538      	push	{r3, r4, r5, lr}
 8006b92:	4d06      	ldr	r5, [pc, #24]	; (8006bac <_sbrk_r+0x1c>)
 8006b94:	2300      	movs	r3, #0
 8006b96:	4604      	mov	r4, r0
 8006b98:	4608      	mov	r0, r1
 8006b9a:	602b      	str	r3, [r5, #0]
 8006b9c:	f7fb f864 	bl	8001c68 <_sbrk>
 8006ba0:	1c43      	adds	r3, r0, #1
 8006ba2:	d102      	bne.n	8006baa <_sbrk_r+0x1a>
 8006ba4:	682b      	ldr	r3, [r5, #0]
 8006ba6:	b103      	cbz	r3, 8006baa <_sbrk_r+0x1a>
 8006ba8:	6023      	str	r3, [r4, #0]
 8006baa:	bd38      	pop	{r3, r4, r5, pc}
 8006bac:	200043cc 	.word	0x200043cc

08006bb0 <siprintf>:
 8006bb0:	b40e      	push	{r1, r2, r3}
 8006bb2:	b500      	push	{lr}
 8006bb4:	b09c      	sub	sp, #112	; 0x70
 8006bb6:	ab1d      	add	r3, sp, #116	; 0x74
 8006bb8:	9002      	str	r0, [sp, #8]
 8006bba:	9006      	str	r0, [sp, #24]
 8006bbc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006bc0:	4809      	ldr	r0, [pc, #36]	; (8006be8 <siprintf+0x38>)
 8006bc2:	9107      	str	r1, [sp, #28]
 8006bc4:	9104      	str	r1, [sp, #16]
 8006bc6:	4909      	ldr	r1, [pc, #36]	; (8006bec <siprintf+0x3c>)
 8006bc8:	f853 2b04 	ldr.w	r2, [r3], #4
 8006bcc:	9105      	str	r1, [sp, #20]
 8006bce:	6800      	ldr	r0, [r0, #0]
 8006bd0:	9301      	str	r3, [sp, #4]
 8006bd2:	a902      	add	r1, sp, #8
 8006bd4:	f001 fc1c 	bl	8008410 <_svfiprintf_r>
 8006bd8:	9b02      	ldr	r3, [sp, #8]
 8006bda:	2200      	movs	r2, #0
 8006bdc:	701a      	strb	r2, [r3, #0]
 8006bde:	b01c      	add	sp, #112	; 0x70
 8006be0:	f85d eb04 	ldr.w	lr, [sp], #4
 8006be4:	b003      	add	sp, #12
 8006be6:	4770      	bx	lr
 8006be8:	20000010 	.word	0x20000010
 8006bec:	ffff0208 	.word	0xffff0208

08006bf0 <__sread>:
 8006bf0:	b510      	push	{r4, lr}
 8006bf2:	460c      	mov	r4, r1
 8006bf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bf8:	f001 fe64 	bl	80088c4 <_read_r>
 8006bfc:	2800      	cmp	r0, #0
 8006bfe:	bfab      	itete	ge
 8006c00:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006c02:	89a3      	ldrhlt	r3, [r4, #12]
 8006c04:	181b      	addge	r3, r3, r0
 8006c06:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006c0a:	bfac      	ite	ge
 8006c0c:	6563      	strge	r3, [r4, #84]	; 0x54
 8006c0e:	81a3      	strhlt	r3, [r4, #12]
 8006c10:	bd10      	pop	{r4, pc}

08006c12 <__swrite>:
 8006c12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c16:	461f      	mov	r7, r3
 8006c18:	898b      	ldrh	r3, [r1, #12]
 8006c1a:	05db      	lsls	r3, r3, #23
 8006c1c:	4605      	mov	r5, r0
 8006c1e:	460c      	mov	r4, r1
 8006c20:	4616      	mov	r6, r2
 8006c22:	d505      	bpl.n	8006c30 <__swrite+0x1e>
 8006c24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c28:	2302      	movs	r3, #2
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	f000 ff88 	bl	8007b40 <_lseek_r>
 8006c30:	89a3      	ldrh	r3, [r4, #12]
 8006c32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006c36:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006c3a:	81a3      	strh	r3, [r4, #12]
 8006c3c:	4632      	mov	r2, r6
 8006c3e:	463b      	mov	r3, r7
 8006c40:	4628      	mov	r0, r5
 8006c42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006c46:	f000 b817 	b.w	8006c78 <_write_r>

08006c4a <__sseek>:
 8006c4a:	b510      	push	{r4, lr}
 8006c4c:	460c      	mov	r4, r1
 8006c4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c52:	f000 ff75 	bl	8007b40 <_lseek_r>
 8006c56:	1c43      	adds	r3, r0, #1
 8006c58:	89a3      	ldrh	r3, [r4, #12]
 8006c5a:	bf15      	itete	ne
 8006c5c:	6560      	strne	r0, [r4, #84]	; 0x54
 8006c5e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006c62:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006c66:	81a3      	strheq	r3, [r4, #12]
 8006c68:	bf18      	it	ne
 8006c6a:	81a3      	strhne	r3, [r4, #12]
 8006c6c:	bd10      	pop	{r4, pc}

08006c6e <__sclose>:
 8006c6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c72:	f000 b813 	b.w	8006c9c <_close_r>
	...

08006c78 <_write_r>:
 8006c78:	b538      	push	{r3, r4, r5, lr}
 8006c7a:	4d07      	ldr	r5, [pc, #28]	; (8006c98 <_write_r+0x20>)
 8006c7c:	4604      	mov	r4, r0
 8006c7e:	4608      	mov	r0, r1
 8006c80:	4611      	mov	r1, r2
 8006c82:	2200      	movs	r2, #0
 8006c84:	602a      	str	r2, [r5, #0]
 8006c86:	461a      	mov	r2, r3
 8006c88:	f7fa ff9d 	bl	8001bc6 <_write>
 8006c8c:	1c43      	adds	r3, r0, #1
 8006c8e:	d102      	bne.n	8006c96 <_write_r+0x1e>
 8006c90:	682b      	ldr	r3, [r5, #0]
 8006c92:	b103      	cbz	r3, 8006c96 <_write_r+0x1e>
 8006c94:	6023      	str	r3, [r4, #0]
 8006c96:	bd38      	pop	{r3, r4, r5, pc}
 8006c98:	200043cc 	.word	0x200043cc

08006c9c <_close_r>:
 8006c9c:	b538      	push	{r3, r4, r5, lr}
 8006c9e:	4d06      	ldr	r5, [pc, #24]	; (8006cb8 <_close_r+0x1c>)
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	4604      	mov	r4, r0
 8006ca4:	4608      	mov	r0, r1
 8006ca6:	602b      	str	r3, [r5, #0]
 8006ca8:	f7fa ffa9 	bl	8001bfe <_close>
 8006cac:	1c43      	adds	r3, r0, #1
 8006cae:	d102      	bne.n	8006cb6 <_close_r+0x1a>
 8006cb0:	682b      	ldr	r3, [r5, #0]
 8006cb2:	b103      	cbz	r3, 8006cb6 <_close_r+0x1a>
 8006cb4:	6023      	str	r3, [r4, #0]
 8006cb6:	bd38      	pop	{r3, r4, r5, pc}
 8006cb8:	200043cc 	.word	0x200043cc

08006cbc <quorem>:
 8006cbc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cc0:	6903      	ldr	r3, [r0, #16]
 8006cc2:	690c      	ldr	r4, [r1, #16]
 8006cc4:	42a3      	cmp	r3, r4
 8006cc6:	4607      	mov	r7, r0
 8006cc8:	f2c0 8081 	blt.w	8006dce <quorem+0x112>
 8006ccc:	3c01      	subs	r4, #1
 8006cce:	f101 0814 	add.w	r8, r1, #20
 8006cd2:	f100 0514 	add.w	r5, r0, #20
 8006cd6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006cda:	9301      	str	r3, [sp, #4]
 8006cdc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006ce0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006ce4:	3301      	adds	r3, #1
 8006ce6:	429a      	cmp	r2, r3
 8006ce8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006cec:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006cf0:	fbb2 f6f3 	udiv	r6, r2, r3
 8006cf4:	d331      	bcc.n	8006d5a <quorem+0x9e>
 8006cf6:	f04f 0e00 	mov.w	lr, #0
 8006cfa:	4640      	mov	r0, r8
 8006cfc:	46ac      	mov	ip, r5
 8006cfe:	46f2      	mov	sl, lr
 8006d00:	f850 2b04 	ldr.w	r2, [r0], #4
 8006d04:	b293      	uxth	r3, r2
 8006d06:	fb06 e303 	mla	r3, r6, r3, lr
 8006d0a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006d0e:	b29b      	uxth	r3, r3
 8006d10:	ebaa 0303 	sub.w	r3, sl, r3
 8006d14:	f8dc a000 	ldr.w	sl, [ip]
 8006d18:	0c12      	lsrs	r2, r2, #16
 8006d1a:	fa13 f38a 	uxtah	r3, r3, sl
 8006d1e:	fb06 e202 	mla	r2, r6, r2, lr
 8006d22:	9300      	str	r3, [sp, #0]
 8006d24:	9b00      	ldr	r3, [sp, #0]
 8006d26:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006d2a:	b292      	uxth	r2, r2
 8006d2c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006d30:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006d34:	f8bd 3000 	ldrh.w	r3, [sp]
 8006d38:	4581      	cmp	r9, r0
 8006d3a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006d3e:	f84c 3b04 	str.w	r3, [ip], #4
 8006d42:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006d46:	d2db      	bcs.n	8006d00 <quorem+0x44>
 8006d48:	f855 300b 	ldr.w	r3, [r5, fp]
 8006d4c:	b92b      	cbnz	r3, 8006d5a <quorem+0x9e>
 8006d4e:	9b01      	ldr	r3, [sp, #4]
 8006d50:	3b04      	subs	r3, #4
 8006d52:	429d      	cmp	r5, r3
 8006d54:	461a      	mov	r2, r3
 8006d56:	d32e      	bcc.n	8006db6 <quorem+0xfa>
 8006d58:	613c      	str	r4, [r7, #16]
 8006d5a:	4638      	mov	r0, r7
 8006d5c:	f001 f998 	bl	8008090 <__mcmp>
 8006d60:	2800      	cmp	r0, #0
 8006d62:	db24      	blt.n	8006dae <quorem+0xf2>
 8006d64:	3601      	adds	r6, #1
 8006d66:	4628      	mov	r0, r5
 8006d68:	f04f 0c00 	mov.w	ip, #0
 8006d6c:	f858 2b04 	ldr.w	r2, [r8], #4
 8006d70:	f8d0 e000 	ldr.w	lr, [r0]
 8006d74:	b293      	uxth	r3, r2
 8006d76:	ebac 0303 	sub.w	r3, ip, r3
 8006d7a:	0c12      	lsrs	r2, r2, #16
 8006d7c:	fa13 f38e 	uxtah	r3, r3, lr
 8006d80:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006d84:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006d88:	b29b      	uxth	r3, r3
 8006d8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006d8e:	45c1      	cmp	r9, r8
 8006d90:	f840 3b04 	str.w	r3, [r0], #4
 8006d94:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006d98:	d2e8      	bcs.n	8006d6c <quorem+0xb0>
 8006d9a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006d9e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006da2:	b922      	cbnz	r2, 8006dae <quorem+0xf2>
 8006da4:	3b04      	subs	r3, #4
 8006da6:	429d      	cmp	r5, r3
 8006da8:	461a      	mov	r2, r3
 8006daa:	d30a      	bcc.n	8006dc2 <quorem+0x106>
 8006dac:	613c      	str	r4, [r7, #16]
 8006dae:	4630      	mov	r0, r6
 8006db0:	b003      	add	sp, #12
 8006db2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006db6:	6812      	ldr	r2, [r2, #0]
 8006db8:	3b04      	subs	r3, #4
 8006dba:	2a00      	cmp	r2, #0
 8006dbc:	d1cc      	bne.n	8006d58 <quorem+0x9c>
 8006dbe:	3c01      	subs	r4, #1
 8006dc0:	e7c7      	b.n	8006d52 <quorem+0x96>
 8006dc2:	6812      	ldr	r2, [r2, #0]
 8006dc4:	3b04      	subs	r3, #4
 8006dc6:	2a00      	cmp	r2, #0
 8006dc8:	d1f0      	bne.n	8006dac <quorem+0xf0>
 8006dca:	3c01      	subs	r4, #1
 8006dcc:	e7eb      	b.n	8006da6 <quorem+0xea>
 8006dce:	2000      	movs	r0, #0
 8006dd0:	e7ee      	b.n	8006db0 <quorem+0xf4>
 8006dd2:	0000      	movs	r0, r0
 8006dd4:	0000      	movs	r0, r0
	...

08006dd8 <_dtoa_r>:
 8006dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ddc:	ed2d 8b04 	vpush	{d8-d9}
 8006de0:	ec57 6b10 	vmov	r6, r7, d0
 8006de4:	b093      	sub	sp, #76	; 0x4c
 8006de6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006de8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006dec:	9106      	str	r1, [sp, #24]
 8006dee:	ee10 aa10 	vmov	sl, s0
 8006df2:	4604      	mov	r4, r0
 8006df4:	9209      	str	r2, [sp, #36]	; 0x24
 8006df6:	930c      	str	r3, [sp, #48]	; 0x30
 8006df8:	46bb      	mov	fp, r7
 8006dfa:	b975      	cbnz	r5, 8006e1a <_dtoa_r+0x42>
 8006dfc:	2010      	movs	r0, #16
 8006dfe:	f000 feb1 	bl	8007b64 <malloc>
 8006e02:	4602      	mov	r2, r0
 8006e04:	6260      	str	r0, [r4, #36]	; 0x24
 8006e06:	b920      	cbnz	r0, 8006e12 <_dtoa_r+0x3a>
 8006e08:	4ba7      	ldr	r3, [pc, #668]	; (80070a8 <_dtoa_r+0x2d0>)
 8006e0a:	21ea      	movs	r1, #234	; 0xea
 8006e0c:	48a7      	ldr	r0, [pc, #668]	; (80070ac <_dtoa_r+0x2d4>)
 8006e0e:	f001 fe2b 	bl	8008a68 <__assert_func>
 8006e12:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006e16:	6005      	str	r5, [r0, #0]
 8006e18:	60c5      	str	r5, [r0, #12]
 8006e1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006e1c:	6819      	ldr	r1, [r3, #0]
 8006e1e:	b151      	cbz	r1, 8006e36 <_dtoa_r+0x5e>
 8006e20:	685a      	ldr	r2, [r3, #4]
 8006e22:	604a      	str	r2, [r1, #4]
 8006e24:	2301      	movs	r3, #1
 8006e26:	4093      	lsls	r3, r2
 8006e28:	608b      	str	r3, [r1, #8]
 8006e2a:	4620      	mov	r0, r4
 8006e2c:	f000 feee 	bl	8007c0c <_Bfree>
 8006e30:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006e32:	2200      	movs	r2, #0
 8006e34:	601a      	str	r2, [r3, #0]
 8006e36:	1e3b      	subs	r3, r7, #0
 8006e38:	bfaa      	itet	ge
 8006e3a:	2300      	movge	r3, #0
 8006e3c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8006e40:	f8c8 3000 	strge.w	r3, [r8]
 8006e44:	4b9a      	ldr	r3, [pc, #616]	; (80070b0 <_dtoa_r+0x2d8>)
 8006e46:	bfbc      	itt	lt
 8006e48:	2201      	movlt	r2, #1
 8006e4a:	f8c8 2000 	strlt.w	r2, [r8]
 8006e4e:	ea33 030b 	bics.w	r3, r3, fp
 8006e52:	d11b      	bne.n	8006e8c <_dtoa_r+0xb4>
 8006e54:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006e56:	f242 730f 	movw	r3, #9999	; 0x270f
 8006e5a:	6013      	str	r3, [r2, #0]
 8006e5c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006e60:	4333      	orrs	r3, r6
 8006e62:	f000 8592 	beq.w	800798a <_dtoa_r+0xbb2>
 8006e66:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006e68:	b963      	cbnz	r3, 8006e84 <_dtoa_r+0xac>
 8006e6a:	4b92      	ldr	r3, [pc, #584]	; (80070b4 <_dtoa_r+0x2dc>)
 8006e6c:	e022      	b.n	8006eb4 <_dtoa_r+0xdc>
 8006e6e:	4b92      	ldr	r3, [pc, #584]	; (80070b8 <_dtoa_r+0x2e0>)
 8006e70:	9301      	str	r3, [sp, #4]
 8006e72:	3308      	adds	r3, #8
 8006e74:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006e76:	6013      	str	r3, [r2, #0]
 8006e78:	9801      	ldr	r0, [sp, #4]
 8006e7a:	b013      	add	sp, #76	; 0x4c
 8006e7c:	ecbd 8b04 	vpop	{d8-d9}
 8006e80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e84:	4b8b      	ldr	r3, [pc, #556]	; (80070b4 <_dtoa_r+0x2dc>)
 8006e86:	9301      	str	r3, [sp, #4]
 8006e88:	3303      	adds	r3, #3
 8006e8a:	e7f3      	b.n	8006e74 <_dtoa_r+0x9c>
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	2300      	movs	r3, #0
 8006e90:	4650      	mov	r0, sl
 8006e92:	4659      	mov	r1, fp
 8006e94:	f7f9 fe20 	bl	8000ad8 <__aeabi_dcmpeq>
 8006e98:	ec4b ab19 	vmov	d9, sl, fp
 8006e9c:	4680      	mov	r8, r0
 8006e9e:	b158      	cbz	r0, 8006eb8 <_dtoa_r+0xe0>
 8006ea0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006ea2:	2301      	movs	r3, #1
 8006ea4:	6013      	str	r3, [r2, #0]
 8006ea6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	f000 856b 	beq.w	8007984 <_dtoa_r+0xbac>
 8006eae:	4883      	ldr	r0, [pc, #524]	; (80070bc <_dtoa_r+0x2e4>)
 8006eb0:	6018      	str	r0, [r3, #0]
 8006eb2:	1e43      	subs	r3, r0, #1
 8006eb4:	9301      	str	r3, [sp, #4]
 8006eb6:	e7df      	b.n	8006e78 <_dtoa_r+0xa0>
 8006eb8:	ec4b ab10 	vmov	d0, sl, fp
 8006ebc:	aa10      	add	r2, sp, #64	; 0x40
 8006ebe:	a911      	add	r1, sp, #68	; 0x44
 8006ec0:	4620      	mov	r0, r4
 8006ec2:	f001 f98b 	bl	80081dc <__d2b>
 8006ec6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8006eca:	ee08 0a10 	vmov	s16, r0
 8006ece:	2d00      	cmp	r5, #0
 8006ed0:	f000 8084 	beq.w	8006fdc <_dtoa_r+0x204>
 8006ed4:	ee19 3a90 	vmov	r3, s19
 8006ed8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006edc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006ee0:	4656      	mov	r6, sl
 8006ee2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006ee6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006eea:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8006eee:	4b74      	ldr	r3, [pc, #464]	; (80070c0 <_dtoa_r+0x2e8>)
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	4630      	mov	r0, r6
 8006ef4:	4639      	mov	r1, r7
 8006ef6:	f7f9 f9cf 	bl	8000298 <__aeabi_dsub>
 8006efa:	a365      	add	r3, pc, #404	; (adr r3, 8007090 <_dtoa_r+0x2b8>)
 8006efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f00:	f7f9 fb82 	bl	8000608 <__aeabi_dmul>
 8006f04:	a364      	add	r3, pc, #400	; (adr r3, 8007098 <_dtoa_r+0x2c0>)
 8006f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f0a:	f7f9 f9c7 	bl	800029c <__adddf3>
 8006f0e:	4606      	mov	r6, r0
 8006f10:	4628      	mov	r0, r5
 8006f12:	460f      	mov	r7, r1
 8006f14:	f7f9 fb0e 	bl	8000534 <__aeabi_i2d>
 8006f18:	a361      	add	r3, pc, #388	; (adr r3, 80070a0 <_dtoa_r+0x2c8>)
 8006f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f1e:	f7f9 fb73 	bl	8000608 <__aeabi_dmul>
 8006f22:	4602      	mov	r2, r0
 8006f24:	460b      	mov	r3, r1
 8006f26:	4630      	mov	r0, r6
 8006f28:	4639      	mov	r1, r7
 8006f2a:	f7f9 f9b7 	bl	800029c <__adddf3>
 8006f2e:	4606      	mov	r6, r0
 8006f30:	460f      	mov	r7, r1
 8006f32:	f7f9 fe19 	bl	8000b68 <__aeabi_d2iz>
 8006f36:	2200      	movs	r2, #0
 8006f38:	9000      	str	r0, [sp, #0]
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	4630      	mov	r0, r6
 8006f3e:	4639      	mov	r1, r7
 8006f40:	f7f9 fdd4 	bl	8000aec <__aeabi_dcmplt>
 8006f44:	b150      	cbz	r0, 8006f5c <_dtoa_r+0x184>
 8006f46:	9800      	ldr	r0, [sp, #0]
 8006f48:	f7f9 faf4 	bl	8000534 <__aeabi_i2d>
 8006f4c:	4632      	mov	r2, r6
 8006f4e:	463b      	mov	r3, r7
 8006f50:	f7f9 fdc2 	bl	8000ad8 <__aeabi_dcmpeq>
 8006f54:	b910      	cbnz	r0, 8006f5c <_dtoa_r+0x184>
 8006f56:	9b00      	ldr	r3, [sp, #0]
 8006f58:	3b01      	subs	r3, #1
 8006f5a:	9300      	str	r3, [sp, #0]
 8006f5c:	9b00      	ldr	r3, [sp, #0]
 8006f5e:	2b16      	cmp	r3, #22
 8006f60:	d85a      	bhi.n	8007018 <_dtoa_r+0x240>
 8006f62:	9a00      	ldr	r2, [sp, #0]
 8006f64:	4b57      	ldr	r3, [pc, #348]	; (80070c4 <_dtoa_r+0x2ec>)
 8006f66:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f6e:	ec51 0b19 	vmov	r0, r1, d9
 8006f72:	f7f9 fdbb 	bl	8000aec <__aeabi_dcmplt>
 8006f76:	2800      	cmp	r0, #0
 8006f78:	d050      	beq.n	800701c <_dtoa_r+0x244>
 8006f7a:	9b00      	ldr	r3, [sp, #0]
 8006f7c:	3b01      	subs	r3, #1
 8006f7e:	9300      	str	r3, [sp, #0]
 8006f80:	2300      	movs	r3, #0
 8006f82:	930b      	str	r3, [sp, #44]	; 0x2c
 8006f84:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006f86:	1b5d      	subs	r5, r3, r5
 8006f88:	1e6b      	subs	r3, r5, #1
 8006f8a:	9305      	str	r3, [sp, #20]
 8006f8c:	bf45      	ittet	mi
 8006f8e:	f1c5 0301 	rsbmi	r3, r5, #1
 8006f92:	9304      	strmi	r3, [sp, #16]
 8006f94:	2300      	movpl	r3, #0
 8006f96:	2300      	movmi	r3, #0
 8006f98:	bf4c      	ite	mi
 8006f9a:	9305      	strmi	r3, [sp, #20]
 8006f9c:	9304      	strpl	r3, [sp, #16]
 8006f9e:	9b00      	ldr	r3, [sp, #0]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	db3d      	blt.n	8007020 <_dtoa_r+0x248>
 8006fa4:	9b05      	ldr	r3, [sp, #20]
 8006fa6:	9a00      	ldr	r2, [sp, #0]
 8006fa8:	920a      	str	r2, [sp, #40]	; 0x28
 8006faa:	4413      	add	r3, r2
 8006fac:	9305      	str	r3, [sp, #20]
 8006fae:	2300      	movs	r3, #0
 8006fb0:	9307      	str	r3, [sp, #28]
 8006fb2:	9b06      	ldr	r3, [sp, #24]
 8006fb4:	2b09      	cmp	r3, #9
 8006fb6:	f200 8089 	bhi.w	80070cc <_dtoa_r+0x2f4>
 8006fba:	2b05      	cmp	r3, #5
 8006fbc:	bfc4      	itt	gt
 8006fbe:	3b04      	subgt	r3, #4
 8006fc0:	9306      	strgt	r3, [sp, #24]
 8006fc2:	9b06      	ldr	r3, [sp, #24]
 8006fc4:	f1a3 0302 	sub.w	r3, r3, #2
 8006fc8:	bfcc      	ite	gt
 8006fca:	2500      	movgt	r5, #0
 8006fcc:	2501      	movle	r5, #1
 8006fce:	2b03      	cmp	r3, #3
 8006fd0:	f200 8087 	bhi.w	80070e2 <_dtoa_r+0x30a>
 8006fd4:	e8df f003 	tbb	[pc, r3]
 8006fd8:	59383a2d 	.word	0x59383a2d
 8006fdc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006fe0:	441d      	add	r5, r3
 8006fe2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006fe6:	2b20      	cmp	r3, #32
 8006fe8:	bfc1      	itttt	gt
 8006fea:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006fee:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006ff2:	fa0b f303 	lslgt.w	r3, fp, r3
 8006ff6:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006ffa:	bfda      	itte	le
 8006ffc:	f1c3 0320 	rsble	r3, r3, #32
 8007000:	fa06 f003 	lslle.w	r0, r6, r3
 8007004:	4318      	orrgt	r0, r3
 8007006:	f7f9 fa85 	bl	8000514 <__aeabi_ui2d>
 800700a:	2301      	movs	r3, #1
 800700c:	4606      	mov	r6, r0
 800700e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007012:	3d01      	subs	r5, #1
 8007014:	930e      	str	r3, [sp, #56]	; 0x38
 8007016:	e76a      	b.n	8006eee <_dtoa_r+0x116>
 8007018:	2301      	movs	r3, #1
 800701a:	e7b2      	b.n	8006f82 <_dtoa_r+0x1aa>
 800701c:	900b      	str	r0, [sp, #44]	; 0x2c
 800701e:	e7b1      	b.n	8006f84 <_dtoa_r+0x1ac>
 8007020:	9b04      	ldr	r3, [sp, #16]
 8007022:	9a00      	ldr	r2, [sp, #0]
 8007024:	1a9b      	subs	r3, r3, r2
 8007026:	9304      	str	r3, [sp, #16]
 8007028:	4253      	negs	r3, r2
 800702a:	9307      	str	r3, [sp, #28]
 800702c:	2300      	movs	r3, #0
 800702e:	930a      	str	r3, [sp, #40]	; 0x28
 8007030:	e7bf      	b.n	8006fb2 <_dtoa_r+0x1da>
 8007032:	2300      	movs	r3, #0
 8007034:	9308      	str	r3, [sp, #32]
 8007036:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007038:	2b00      	cmp	r3, #0
 800703a:	dc55      	bgt.n	80070e8 <_dtoa_r+0x310>
 800703c:	2301      	movs	r3, #1
 800703e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007042:	461a      	mov	r2, r3
 8007044:	9209      	str	r2, [sp, #36]	; 0x24
 8007046:	e00c      	b.n	8007062 <_dtoa_r+0x28a>
 8007048:	2301      	movs	r3, #1
 800704a:	e7f3      	b.n	8007034 <_dtoa_r+0x25c>
 800704c:	2300      	movs	r3, #0
 800704e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007050:	9308      	str	r3, [sp, #32]
 8007052:	9b00      	ldr	r3, [sp, #0]
 8007054:	4413      	add	r3, r2
 8007056:	9302      	str	r3, [sp, #8]
 8007058:	3301      	adds	r3, #1
 800705a:	2b01      	cmp	r3, #1
 800705c:	9303      	str	r3, [sp, #12]
 800705e:	bfb8      	it	lt
 8007060:	2301      	movlt	r3, #1
 8007062:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007064:	2200      	movs	r2, #0
 8007066:	6042      	str	r2, [r0, #4]
 8007068:	2204      	movs	r2, #4
 800706a:	f102 0614 	add.w	r6, r2, #20
 800706e:	429e      	cmp	r6, r3
 8007070:	6841      	ldr	r1, [r0, #4]
 8007072:	d93d      	bls.n	80070f0 <_dtoa_r+0x318>
 8007074:	4620      	mov	r0, r4
 8007076:	f000 fd89 	bl	8007b8c <_Balloc>
 800707a:	9001      	str	r0, [sp, #4]
 800707c:	2800      	cmp	r0, #0
 800707e:	d13b      	bne.n	80070f8 <_dtoa_r+0x320>
 8007080:	4b11      	ldr	r3, [pc, #68]	; (80070c8 <_dtoa_r+0x2f0>)
 8007082:	4602      	mov	r2, r0
 8007084:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007088:	e6c0      	b.n	8006e0c <_dtoa_r+0x34>
 800708a:	2301      	movs	r3, #1
 800708c:	e7df      	b.n	800704e <_dtoa_r+0x276>
 800708e:	bf00      	nop
 8007090:	636f4361 	.word	0x636f4361
 8007094:	3fd287a7 	.word	0x3fd287a7
 8007098:	8b60c8b3 	.word	0x8b60c8b3
 800709c:	3fc68a28 	.word	0x3fc68a28
 80070a0:	509f79fb 	.word	0x509f79fb
 80070a4:	3fd34413 	.word	0x3fd34413
 80070a8:	08008fdd 	.word	0x08008fdd
 80070ac:	08008ff4 	.word	0x08008ff4
 80070b0:	7ff00000 	.word	0x7ff00000
 80070b4:	08008fd9 	.word	0x08008fd9
 80070b8:	08008fd0 	.word	0x08008fd0
 80070bc:	08008fad 	.word	0x08008fad
 80070c0:	3ff80000 	.word	0x3ff80000
 80070c4:	080090e8 	.word	0x080090e8
 80070c8:	0800904f 	.word	0x0800904f
 80070cc:	2501      	movs	r5, #1
 80070ce:	2300      	movs	r3, #0
 80070d0:	9306      	str	r3, [sp, #24]
 80070d2:	9508      	str	r5, [sp, #32]
 80070d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80070d8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80070dc:	2200      	movs	r2, #0
 80070de:	2312      	movs	r3, #18
 80070e0:	e7b0      	b.n	8007044 <_dtoa_r+0x26c>
 80070e2:	2301      	movs	r3, #1
 80070e4:	9308      	str	r3, [sp, #32]
 80070e6:	e7f5      	b.n	80070d4 <_dtoa_r+0x2fc>
 80070e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070ea:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80070ee:	e7b8      	b.n	8007062 <_dtoa_r+0x28a>
 80070f0:	3101      	adds	r1, #1
 80070f2:	6041      	str	r1, [r0, #4]
 80070f4:	0052      	lsls	r2, r2, #1
 80070f6:	e7b8      	b.n	800706a <_dtoa_r+0x292>
 80070f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80070fa:	9a01      	ldr	r2, [sp, #4]
 80070fc:	601a      	str	r2, [r3, #0]
 80070fe:	9b03      	ldr	r3, [sp, #12]
 8007100:	2b0e      	cmp	r3, #14
 8007102:	f200 809d 	bhi.w	8007240 <_dtoa_r+0x468>
 8007106:	2d00      	cmp	r5, #0
 8007108:	f000 809a 	beq.w	8007240 <_dtoa_r+0x468>
 800710c:	9b00      	ldr	r3, [sp, #0]
 800710e:	2b00      	cmp	r3, #0
 8007110:	dd32      	ble.n	8007178 <_dtoa_r+0x3a0>
 8007112:	4ab7      	ldr	r2, [pc, #732]	; (80073f0 <_dtoa_r+0x618>)
 8007114:	f003 030f 	and.w	r3, r3, #15
 8007118:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800711c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007120:	9b00      	ldr	r3, [sp, #0]
 8007122:	05d8      	lsls	r0, r3, #23
 8007124:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007128:	d516      	bpl.n	8007158 <_dtoa_r+0x380>
 800712a:	4bb2      	ldr	r3, [pc, #712]	; (80073f4 <_dtoa_r+0x61c>)
 800712c:	ec51 0b19 	vmov	r0, r1, d9
 8007130:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007134:	f7f9 fb92 	bl	800085c <__aeabi_ddiv>
 8007138:	f007 070f 	and.w	r7, r7, #15
 800713c:	4682      	mov	sl, r0
 800713e:	468b      	mov	fp, r1
 8007140:	2503      	movs	r5, #3
 8007142:	4eac      	ldr	r6, [pc, #688]	; (80073f4 <_dtoa_r+0x61c>)
 8007144:	b957      	cbnz	r7, 800715c <_dtoa_r+0x384>
 8007146:	4642      	mov	r2, r8
 8007148:	464b      	mov	r3, r9
 800714a:	4650      	mov	r0, sl
 800714c:	4659      	mov	r1, fp
 800714e:	f7f9 fb85 	bl	800085c <__aeabi_ddiv>
 8007152:	4682      	mov	sl, r0
 8007154:	468b      	mov	fp, r1
 8007156:	e028      	b.n	80071aa <_dtoa_r+0x3d2>
 8007158:	2502      	movs	r5, #2
 800715a:	e7f2      	b.n	8007142 <_dtoa_r+0x36a>
 800715c:	07f9      	lsls	r1, r7, #31
 800715e:	d508      	bpl.n	8007172 <_dtoa_r+0x39a>
 8007160:	4640      	mov	r0, r8
 8007162:	4649      	mov	r1, r9
 8007164:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007168:	f7f9 fa4e 	bl	8000608 <__aeabi_dmul>
 800716c:	3501      	adds	r5, #1
 800716e:	4680      	mov	r8, r0
 8007170:	4689      	mov	r9, r1
 8007172:	107f      	asrs	r7, r7, #1
 8007174:	3608      	adds	r6, #8
 8007176:	e7e5      	b.n	8007144 <_dtoa_r+0x36c>
 8007178:	f000 809b 	beq.w	80072b2 <_dtoa_r+0x4da>
 800717c:	9b00      	ldr	r3, [sp, #0]
 800717e:	4f9d      	ldr	r7, [pc, #628]	; (80073f4 <_dtoa_r+0x61c>)
 8007180:	425e      	negs	r6, r3
 8007182:	4b9b      	ldr	r3, [pc, #620]	; (80073f0 <_dtoa_r+0x618>)
 8007184:	f006 020f 	and.w	r2, r6, #15
 8007188:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800718c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007190:	ec51 0b19 	vmov	r0, r1, d9
 8007194:	f7f9 fa38 	bl	8000608 <__aeabi_dmul>
 8007198:	1136      	asrs	r6, r6, #4
 800719a:	4682      	mov	sl, r0
 800719c:	468b      	mov	fp, r1
 800719e:	2300      	movs	r3, #0
 80071a0:	2502      	movs	r5, #2
 80071a2:	2e00      	cmp	r6, #0
 80071a4:	d17a      	bne.n	800729c <_dtoa_r+0x4c4>
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d1d3      	bne.n	8007152 <_dtoa_r+0x37a>
 80071aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	f000 8082 	beq.w	80072b6 <_dtoa_r+0x4de>
 80071b2:	4b91      	ldr	r3, [pc, #580]	; (80073f8 <_dtoa_r+0x620>)
 80071b4:	2200      	movs	r2, #0
 80071b6:	4650      	mov	r0, sl
 80071b8:	4659      	mov	r1, fp
 80071ba:	f7f9 fc97 	bl	8000aec <__aeabi_dcmplt>
 80071be:	2800      	cmp	r0, #0
 80071c0:	d079      	beq.n	80072b6 <_dtoa_r+0x4de>
 80071c2:	9b03      	ldr	r3, [sp, #12]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d076      	beq.n	80072b6 <_dtoa_r+0x4de>
 80071c8:	9b02      	ldr	r3, [sp, #8]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	dd36      	ble.n	800723c <_dtoa_r+0x464>
 80071ce:	9b00      	ldr	r3, [sp, #0]
 80071d0:	4650      	mov	r0, sl
 80071d2:	4659      	mov	r1, fp
 80071d4:	1e5f      	subs	r7, r3, #1
 80071d6:	2200      	movs	r2, #0
 80071d8:	4b88      	ldr	r3, [pc, #544]	; (80073fc <_dtoa_r+0x624>)
 80071da:	f7f9 fa15 	bl	8000608 <__aeabi_dmul>
 80071de:	9e02      	ldr	r6, [sp, #8]
 80071e0:	4682      	mov	sl, r0
 80071e2:	468b      	mov	fp, r1
 80071e4:	3501      	adds	r5, #1
 80071e6:	4628      	mov	r0, r5
 80071e8:	f7f9 f9a4 	bl	8000534 <__aeabi_i2d>
 80071ec:	4652      	mov	r2, sl
 80071ee:	465b      	mov	r3, fp
 80071f0:	f7f9 fa0a 	bl	8000608 <__aeabi_dmul>
 80071f4:	4b82      	ldr	r3, [pc, #520]	; (8007400 <_dtoa_r+0x628>)
 80071f6:	2200      	movs	r2, #0
 80071f8:	f7f9 f850 	bl	800029c <__adddf3>
 80071fc:	46d0      	mov	r8, sl
 80071fe:	46d9      	mov	r9, fp
 8007200:	4682      	mov	sl, r0
 8007202:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8007206:	2e00      	cmp	r6, #0
 8007208:	d158      	bne.n	80072bc <_dtoa_r+0x4e4>
 800720a:	4b7e      	ldr	r3, [pc, #504]	; (8007404 <_dtoa_r+0x62c>)
 800720c:	2200      	movs	r2, #0
 800720e:	4640      	mov	r0, r8
 8007210:	4649      	mov	r1, r9
 8007212:	f7f9 f841 	bl	8000298 <__aeabi_dsub>
 8007216:	4652      	mov	r2, sl
 8007218:	465b      	mov	r3, fp
 800721a:	4680      	mov	r8, r0
 800721c:	4689      	mov	r9, r1
 800721e:	f7f9 fc83 	bl	8000b28 <__aeabi_dcmpgt>
 8007222:	2800      	cmp	r0, #0
 8007224:	f040 8295 	bne.w	8007752 <_dtoa_r+0x97a>
 8007228:	4652      	mov	r2, sl
 800722a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800722e:	4640      	mov	r0, r8
 8007230:	4649      	mov	r1, r9
 8007232:	f7f9 fc5b 	bl	8000aec <__aeabi_dcmplt>
 8007236:	2800      	cmp	r0, #0
 8007238:	f040 8289 	bne.w	800774e <_dtoa_r+0x976>
 800723c:	ec5b ab19 	vmov	sl, fp, d9
 8007240:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007242:	2b00      	cmp	r3, #0
 8007244:	f2c0 8148 	blt.w	80074d8 <_dtoa_r+0x700>
 8007248:	9a00      	ldr	r2, [sp, #0]
 800724a:	2a0e      	cmp	r2, #14
 800724c:	f300 8144 	bgt.w	80074d8 <_dtoa_r+0x700>
 8007250:	4b67      	ldr	r3, [pc, #412]	; (80073f0 <_dtoa_r+0x618>)
 8007252:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007256:	e9d3 8900 	ldrd	r8, r9, [r3]
 800725a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800725c:	2b00      	cmp	r3, #0
 800725e:	f280 80d5 	bge.w	800740c <_dtoa_r+0x634>
 8007262:	9b03      	ldr	r3, [sp, #12]
 8007264:	2b00      	cmp	r3, #0
 8007266:	f300 80d1 	bgt.w	800740c <_dtoa_r+0x634>
 800726a:	f040 826f 	bne.w	800774c <_dtoa_r+0x974>
 800726e:	4b65      	ldr	r3, [pc, #404]	; (8007404 <_dtoa_r+0x62c>)
 8007270:	2200      	movs	r2, #0
 8007272:	4640      	mov	r0, r8
 8007274:	4649      	mov	r1, r9
 8007276:	f7f9 f9c7 	bl	8000608 <__aeabi_dmul>
 800727a:	4652      	mov	r2, sl
 800727c:	465b      	mov	r3, fp
 800727e:	f7f9 fc49 	bl	8000b14 <__aeabi_dcmpge>
 8007282:	9e03      	ldr	r6, [sp, #12]
 8007284:	4637      	mov	r7, r6
 8007286:	2800      	cmp	r0, #0
 8007288:	f040 8245 	bne.w	8007716 <_dtoa_r+0x93e>
 800728c:	9d01      	ldr	r5, [sp, #4]
 800728e:	2331      	movs	r3, #49	; 0x31
 8007290:	f805 3b01 	strb.w	r3, [r5], #1
 8007294:	9b00      	ldr	r3, [sp, #0]
 8007296:	3301      	adds	r3, #1
 8007298:	9300      	str	r3, [sp, #0]
 800729a:	e240      	b.n	800771e <_dtoa_r+0x946>
 800729c:	07f2      	lsls	r2, r6, #31
 800729e:	d505      	bpl.n	80072ac <_dtoa_r+0x4d4>
 80072a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80072a4:	f7f9 f9b0 	bl	8000608 <__aeabi_dmul>
 80072a8:	3501      	adds	r5, #1
 80072aa:	2301      	movs	r3, #1
 80072ac:	1076      	asrs	r6, r6, #1
 80072ae:	3708      	adds	r7, #8
 80072b0:	e777      	b.n	80071a2 <_dtoa_r+0x3ca>
 80072b2:	2502      	movs	r5, #2
 80072b4:	e779      	b.n	80071aa <_dtoa_r+0x3d2>
 80072b6:	9f00      	ldr	r7, [sp, #0]
 80072b8:	9e03      	ldr	r6, [sp, #12]
 80072ba:	e794      	b.n	80071e6 <_dtoa_r+0x40e>
 80072bc:	9901      	ldr	r1, [sp, #4]
 80072be:	4b4c      	ldr	r3, [pc, #304]	; (80073f0 <_dtoa_r+0x618>)
 80072c0:	4431      	add	r1, r6
 80072c2:	910d      	str	r1, [sp, #52]	; 0x34
 80072c4:	9908      	ldr	r1, [sp, #32]
 80072c6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80072ca:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80072ce:	2900      	cmp	r1, #0
 80072d0:	d043      	beq.n	800735a <_dtoa_r+0x582>
 80072d2:	494d      	ldr	r1, [pc, #308]	; (8007408 <_dtoa_r+0x630>)
 80072d4:	2000      	movs	r0, #0
 80072d6:	f7f9 fac1 	bl	800085c <__aeabi_ddiv>
 80072da:	4652      	mov	r2, sl
 80072dc:	465b      	mov	r3, fp
 80072de:	f7f8 ffdb 	bl	8000298 <__aeabi_dsub>
 80072e2:	9d01      	ldr	r5, [sp, #4]
 80072e4:	4682      	mov	sl, r0
 80072e6:	468b      	mov	fp, r1
 80072e8:	4649      	mov	r1, r9
 80072ea:	4640      	mov	r0, r8
 80072ec:	f7f9 fc3c 	bl	8000b68 <__aeabi_d2iz>
 80072f0:	4606      	mov	r6, r0
 80072f2:	f7f9 f91f 	bl	8000534 <__aeabi_i2d>
 80072f6:	4602      	mov	r2, r0
 80072f8:	460b      	mov	r3, r1
 80072fa:	4640      	mov	r0, r8
 80072fc:	4649      	mov	r1, r9
 80072fe:	f7f8 ffcb 	bl	8000298 <__aeabi_dsub>
 8007302:	3630      	adds	r6, #48	; 0x30
 8007304:	f805 6b01 	strb.w	r6, [r5], #1
 8007308:	4652      	mov	r2, sl
 800730a:	465b      	mov	r3, fp
 800730c:	4680      	mov	r8, r0
 800730e:	4689      	mov	r9, r1
 8007310:	f7f9 fbec 	bl	8000aec <__aeabi_dcmplt>
 8007314:	2800      	cmp	r0, #0
 8007316:	d163      	bne.n	80073e0 <_dtoa_r+0x608>
 8007318:	4642      	mov	r2, r8
 800731a:	464b      	mov	r3, r9
 800731c:	4936      	ldr	r1, [pc, #216]	; (80073f8 <_dtoa_r+0x620>)
 800731e:	2000      	movs	r0, #0
 8007320:	f7f8 ffba 	bl	8000298 <__aeabi_dsub>
 8007324:	4652      	mov	r2, sl
 8007326:	465b      	mov	r3, fp
 8007328:	f7f9 fbe0 	bl	8000aec <__aeabi_dcmplt>
 800732c:	2800      	cmp	r0, #0
 800732e:	f040 80b5 	bne.w	800749c <_dtoa_r+0x6c4>
 8007332:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007334:	429d      	cmp	r5, r3
 8007336:	d081      	beq.n	800723c <_dtoa_r+0x464>
 8007338:	4b30      	ldr	r3, [pc, #192]	; (80073fc <_dtoa_r+0x624>)
 800733a:	2200      	movs	r2, #0
 800733c:	4650      	mov	r0, sl
 800733e:	4659      	mov	r1, fp
 8007340:	f7f9 f962 	bl	8000608 <__aeabi_dmul>
 8007344:	4b2d      	ldr	r3, [pc, #180]	; (80073fc <_dtoa_r+0x624>)
 8007346:	4682      	mov	sl, r0
 8007348:	468b      	mov	fp, r1
 800734a:	4640      	mov	r0, r8
 800734c:	4649      	mov	r1, r9
 800734e:	2200      	movs	r2, #0
 8007350:	f7f9 f95a 	bl	8000608 <__aeabi_dmul>
 8007354:	4680      	mov	r8, r0
 8007356:	4689      	mov	r9, r1
 8007358:	e7c6      	b.n	80072e8 <_dtoa_r+0x510>
 800735a:	4650      	mov	r0, sl
 800735c:	4659      	mov	r1, fp
 800735e:	f7f9 f953 	bl	8000608 <__aeabi_dmul>
 8007362:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007364:	9d01      	ldr	r5, [sp, #4]
 8007366:	930f      	str	r3, [sp, #60]	; 0x3c
 8007368:	4682      	mov	sl, r0
 800736a:	468b      	mov	fp, r1
 800736c:	4649      	mov	r1, r9
 800736e:	4640      	mov	r0, r8
 8007370:	f7f9 fbfa 	bl	8000b68 <__aeabi_d2iz>
 8007374:	4606      	mov	r6, r0
 8007376:	f7f9 f8dd 	bl	8000534 <__aeabi_i2d>
 800737a:	3630      	adds	r6, #48	; 0x30
 800737c:	4602      	mov	r2, r0
 800737e:	460b      	mov	r3, r1
 8007380:	4640      	mov	r0, r8
 8007382:	4649      	mov	r1, r9
 8007384:	f7f8 ff88 	bl	8000298 <__aeabi_dsub>
 8007388:	f805 6b01 	strb.w	r6, [r5], #1
 800738c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800738e:	429d      	cmp	r5, r3
 8007390:	4680      	mov	r8, r0
 8007392:	4689      	mov	r9, r1
 8007394:	f04f 0200 	mov.w	r2, #0
 8007398:	d124      	bne.n	80073e4 <_dtoa_r+0x60c>
 800739a:	4b1b      	ldr	r3, [pc, #108]	; (8007408 <_dtoa_r+0x630>)
 800739c:	4650      	mov	r0, sl
 800739e:	4659      	mov	r1, fp
 80073a0:	f7f8 ff7c 	bl	800029c <__adddf3>
 80073a4:	4602      	mov	r2, r0
 80073a6:	460b      	mov	r3, r1
 80073a8:	4640      	mov	r0, r8
 80073aa:	4649      	mov	r1, r9
 80073ac:	f7f9 fbbc 	bl	8000b28 <__aeabi_dcmpgt>
 80073b0:	2800      	cmp	r0, #0
 80073b2:	d173      	bne.n	800749c <_dtoa_r+0x6c4>
 80073b4:	4652      	mov	r2, sl
 80073b6:	465b      	mov	r3, fp
 80073b8:	4913      	ldr	r1, [pc, #76]	; (8007408 <_dtoa_r+0x630>)
 80073ba:	2000      	movs	r0, #0
 80073bc:	f7f8 ff6c 	bl	8000298 <__aeabi_dsub>
 80073c0:	4602      	mov	r2, r0
 80073c2:	460b      	mov	r3, r1
 80073c4:	4640      	mov	r0, r8
 80073c6:	4649      	mov	r1, r9
 80073c8:	f7f9 fb90 	bl	8000aec <__aeabi_dcmplt>
 80073cc:	2800      	cmp	r0, #0
 80073ce:	f43f af35 	beq.w	800723c <_dtoa_r+0x464>
 80073d2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80073d4:	1e6b      	subs	r3, r5, #1
 80073d6:	930f      	str	r3, [sp, #60]	; 0x3c
 80073d8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80073dc:	2b30      	cmp	r3, #48	; 0x30
 80073de:	d0f8      	beq.n	80073d2 <_dtoa_r+0x5fa>
 80073e0:	9700      	str	r7, [sp, #0]
 80073e2:	e049      	b.n	8007478 <_dtoa_r+0x6a0>
 80073e4:	4b05      	ldr	r3, [pc, #20]	; (80073fc <_dtoa_r+0x624>)
 80073e6:	f7f9 f90f 	bl	8000608 <__aeabi_dmul>
 80073ea:	4680      	mov	r8, r0
 80073ec:	4689      	mov	r9, r1
 80073ee:	e7bd      	b.n	800736c <_dtoa_r+0x594>
 80073f0:	080090e8 	.word	0x080090e8
 80073f4:	080090c0 	.word	0x080090c0
 80073f8:	3ff00000 	.word	0x3ff00000
 80073fc:	40240000 	.word	0x40240000
 8007400:	401c0000 	.word	0x401c0000
 8007404:	40140000 	.word	0x40140000
 8007408:	3fe00000 	.word	0x3fe00000
 800740c:	9d01      	ldr	r5, [sp, #4]
 800740e:	4656      	mov	r6, sl
 8007410:	465f      	mov	r7, fp
 8007412:	4642      	mov	r2, r8
 8007414:	464b      	mov	r3, r9
 8007416:	4630      	mov	r0, r6
 8007418:	4639      	mov	r1, r7
 800741a:	f7f9 fa1f 	bl	800085c <__aeabi_ddiv>
 800741e:	f7f9 fba3 	bl	8000b68 <__aeabi_d2iz>
 8007422:	4682      	mov	sl, r0
 8007424:	f7f9 f886 	bl	8000534 <__aeabi_i2d>
 8007428:	4642      	mov	r2, r8
 800742a:	464b      	mov	r3, r9
 800742c:	f7f9 f8ec 	bl	8000608 <__aeabi_dmul>
 8007430:	4602      	mov	r2, r0
 8007432:	460b      	mov	r3, r1
 8007434:	4630      	mov	r0, r6
 8007436:	4639      	mov	r1, r7
 8007438:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800743c:	f7f8 ff2c 	bl	8000298 <__aeabi_dsub>
 8007440:	f805 6b01 	strb.w	r6, [r5], #1
 8007444:	9e01      	ldr	r6, [sp, #4]
 8007446:	9f03      	ldr	r7, [sp, #12]
 8007448:	1bae      	subs	r6, r5, r6
 800744a:	42b7      	cmp	r7, r6
 800744c:	4602      	mov	r2, r0
 800744e:	460b      	mov	r3, r1
 8007450:	d135      	bne.n	80074be <_dtoa_r+0x6e6>
 8007452:	f7f8 ff23 	bl	800029c <__adddf3>
 8007456:	4642      	mov	r2, r8
 8007458:	464b      	mov	r3, r9
 800745a:	4606      	mov	r6, r0
 800745c:	460f      	mov	r7, r1
 800745e:	f7f9 fb63 	bl	8000b28 <__aeabi_dcmpgt>
 8007462:	b9d0      	cbnz	r0, 800749a <_dtoa_r+0x6c2>
 8007464:	4642      	mov	r2, r8
 8007466:	464b      	mov	r3, r9
 8007468:	4630      	mov	r0, r6
 800746a:	4639      	mov	r1, r7
 800746c:	f7f9 fb34 	bl	8000ad8 <__aeabi_dcmpeq>
 8007470:	b110      	cbz	r0, 8007478 <_dtoa_r+0x6a0>
 8007472:	f01a 0f01 	tst.w	sl, #1
 8007476:	d110      	bne.n	800749a <_dtoa_r+0x6c2>
 8007478:	4620      	mov	r0, r4
 800747a:	ee18 1a10 	vmov	r1, s16
 800747e:	f000 fbc5 	bl	8007c0c <_Bfree>
 8007482:	2300      	movs	r3, #0
 8007484:	9800      	ldr	r0, [sp, #0]
 8007486:	702b      	strb	r3, [r5, #0]
 8007488:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800748a:	3001      	adds	r0, #1
 800748c:	6018      	str	r0, [r3, #0]
 800748e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007490:	2b00      	cmp	r3, #0
 8007492:	f43f acf1 	beq.w	8006e78 <_dtoa_r+0xa0>
 8007496:	601d      	str	r5, [r3, #0]
 8007498:	e4ee      	b.n	8006e78 <_dtoa_r+0xa0>
 800749a:	9f00      	ldr	r7, [sp, #0]
 800749c:	462b      	mov	r3, r5
 800749e:	461d      	mov	r5, r3
 80074a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80074a4:	2a39      	cmp	r2, #57	; 0x39
 80074a6:	d106      	bne.n	80074b6 <_dtoa_r+0x6de>
 80074a8:	9a01      	ldr	r2, [sp, #4]
 80074aa:	429a      	cmp	r2, r3
 80074ac:	d1f7      	bne.n	800749e <_dtoa_r+0x6c6>
 80074ae:	9901      	ldr	r1, [sp, #4]
 80074b0:	2230      	movs	r2, #48	; 0x30
 80074b2:	3701      	adds	r7, #1
 80074b4:	700a      	strb	r2, [r1, #0]
 80074b6:	781a      	ldrb	r2, [r3, #0]
 80074b8:	3201      	adds	r2, #1
 80074ba:	701a      	strb	r2, [r3, #0]
 80074bc:	e790      	b.n	80073e0 <_dtoa_r+0x608>
 80074be:	4ba6      	ldr	r3, [pc, #664]	; (8007758 <_dtoa_r+0x980>)
 80074c0:	2200      	movs	r2, #0
 80074c2:	f7f9 f8a1 	bl	8000608 <__aeabi_dmul>
 80074c6:	2200      	movs	r2, #0
 80074c8:	2300      	movs	r3, #0
 80074ca:	4606      	mov	r6, r0
 80074cc:	460f      	mov	r7, r1
 80074ce:	f7f9 fb03 	bl	8000ad8 <__aeabi_dcmpeq>
 80074d2:	2800      	cmp	r0, #0
 80074d4:	d09d      	beq.n	8007412 <_dtoa_r+0x63a>
 80074d6:	e7cf      	b.n	8007478 <_dtoa_r+0x6a0>
 80074d8:	9a08      	ldr	r2, [sp, #32]
 80074da:	2a00      	cmp	r2, #0
 80074dc:	f000 80d7 	beq.w	800768e <_dtoa_r+0x8b6>
 80074e0:	9a06      	ldr	r2, [sp, #24]
 80074e2:	2a01      	cmp	r2, #1
 80074e4:	f300 80ba 	bgt.w	800765c <_dtoa_r+0x884>
 80074e8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80074ea:	2a00      	cmp	r2, #0
 80074ec:	f000 80b2 	beq.w	8007654 <_dtoa_r+0x87c>
 80074f0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80074f4:	9e07      	ldr	r6, [sp, #28]
 80074f6:	9d04      	ldr	r5, [sp, #16]
 80074f8:	9a04      	ldr	r2, [sp, #16]
 80074fa:	441a      	add	r2, r3
 80074fc:	9204      	str	r2, [sp, #16]
 80074fe:	9a05      	ldr	r2, [sp, #20]
 8007500:	2101      	movs	r1, #1
 8007502:	441a      	add	r2, r3
 8007504:	4620      	mov	r0, r4
 8007506:	9205      	str	r2, [sp, #20]
 8007508:	f000 fc38 	bl	8007d7c <__i2b>
 800750c:	4607      	mov	r7, r0
 800750e:	2d00      	cmp	r5, #0
 8007510:	dd0c      	ble.n	800752c <_dtoa_r+0x754>
 8007512:	9b05      	ldr	r3, [sp, #20]
 8007514:	2b00      	cmp	r3, #0
 8007516:	dd09      	ble.n	800752c <_dtoa_r+0x754>
 8007518:	42ab      	cmp	r3, r5
 800751a:	9a04      	ldr	r2, [sp, #16]
 800751c:	bfa8      	it	ge
 800751e:	462b      	movge	r3, r5
 8007520:	1ad2      	subs	r2, r2, r3
 8007522:	9204      	str	r2, [sp, #16]
 8007524:	9a05      	ldr	r2, [sp, #20]
 8007526:	1aed      	subs	r5, r5, r3
 8007528:	1ad3      	subs	r3, r2, r3
 800752a:	9305      	str	r3, [sp, #20]
 800752c:	9b07      	ldr	r3, [sp, #28]
 800752e:	b31b      	cbz	r3, 8007578 <_dtoa_r+0x7a0>
 8007530:	9b08      	ldr	r3, [sp, #32]
 8007532:	2b00      	cmp	r3, #0
 8007534:	f000 80af 	beq.w	8007696 <_dtoa_r+0x8be>
 8007538:	2e00      	cmp	r6, #0
 800753a:	dd13      	ble.n	8007564 <_dtoa_r+0x78c>
 800753c:	4639      	mov	r1, r7
 800753e:	4632      	mov	r2, r6
 8007540:	4620      	mov	r0, r4
 8007542:	f000 fcdb 	bl	8007efc <__pow5mult>
 8007546:	ee18 2a10 	vmov	r2, s16
 800754a:	4601      	mov	r1, r0
 800754c:	4607      	mov	r7, r0
 800754e:	4620      	mov	r0, r4
 8007550:	f000 fc2a 	bl	8007da8 <__multiply>
 8007554:	ee18 1a10 	vmov	r1, s16
 8007558:	4680      	mov	r8, r0
 800755a:	4620      	mov	r0, r4
 800755c:	f000 fb56 	bl	8007c0c <_Bfree>
 8007560:	ee08 8a10 	vmov	s16, r8
 8007564:	9b07      	ldr	r3, [sp, #28]
 8007566:	1b9a      	subs	r2, r3, r6
 8007568:	d006      	beq.n	8007578 <_dtoa_r+0x7a0>
 800756a:	ee18 1a10 	vmov	r1, s16
 800756e:	4620      	mov	r0, r4
 8007570:	f000 fcc4 	bl	8007efc <__pow5mult>
 8007574:	ee08 0a10 	vmov	s16, r0
 8007578:	2101      	movs	r1, #1
 800757a:	4620      	mov	r0, r4
 800757c:	f000 fbfe 	bl	8007d7c <__i2b>
 8007580:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007582:	2b00      	cmp	r3, #0
 8007584:	4606      	mov	r6, r0
 8007586:	f340 8088 	ble.w	800769a <_dtoa_r+0x8c2>
 800758a:	461a      	mov	r2, r3
 800758c:	4601      	mov	r1, r0
 800758e:	4620      	mov	r0, r4
 8007590:	f000 fcb4 	bl	8007efc <__pow5mult>
 8007594:	9b06      	ldr	r3, [sp, #24]
 8007596:	2b01      	cmp	r3, #1
 8007598:	4606      	mov	r6, r0
 800759a:	f340 8081 	ble.w	80076a0 <_dtoa_r+0x8c8>
 800759e:	f04f 0800 	mov.w	r8, #0
 80075a2:	6933      	ldr	r3, [r6, #16]
 80075a4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80075a8:	6918      	ldr	r0, [r3, #16]
 80075aa:	f000 fb97 	bl	8007cdc <__hi0bits>
 80075ae:	f1c0 0020 	rsb	r0, r0, #32
 80075b2:	9b05      	ldr	r3, [sp, #20]
 80075b4:	4418      	add	r0, r3
 80075b6:	f010 001f 	ands.w	r0, r0, #31
 80075ba:	f000 8092 	beq.w	80076e2 <_dtoa_r+0x90a>
 80075be:	f1c0 0320 	rsb	r3, r0, #32
 80075c2:	2b04      	cmp	r3, #4
 80075c4:	f340 808a 	ble.w	80076dc <_dtoa_r+0x904>
 80075c8:	f1c0 001c 	rsb	r0, r0, #28
 80075cc:	9b04      	ldr	r3, [sp, #16]
 80075ce:	4403      	add	r3, r0
 80075d0:	9304      	str	r3, [sp, #16]
 80075d2:	9b05      	ldr	r3, [sp, #20]
 80075d4:	4403      	add	r3, r0
 80075d6:	4405      	add	r5, r0
 80075d8:	9305      	str	r3, [sp, #20]
 80075da:	9b04      	ldr	r3, [sp, #16]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	dd07      	ble.n	80075f0 <_dtoa_r+0x818>
 80075e0:	ee18 1a10 	vmov	r1, s16
 80075e4:	461a      	mov	r2, r3
 80075e6:	4620      	mov	r0, r4
 80075e8:	f000 fce2 	bl	8007fb0 <__lshift>
 80075ec:	ee08 0a10 	vmov	s16, r0
 80075f0:	9b05      	ldr	r3, [sp, #20]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	dd05      	ble.n	8007602 <_dtoa_r+0x82a>
 80075f6:	4631      	mov	r1, r6
 80075f8:	461a      	mov	r2, r3
 80075fa:	4620      	mov	r0, r4
 80075fc:	f000 fcd8 	bl	8007fb0 <__lshift>
 8007600:	4606      	mov	r6, r0
 8007602:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007604:	2b00      	cmp	r3, #0
 8007606:	d06e      	beq.n	80076e6 <_dtoa_r+0x90e>
 8007608:	ee18 0a10 	vmov	r0, s16
 800760c:	4631      	mov	r1, r6
 800760e:	f000 fd3f 	bl	8008090 <__mcmp>
 8007612:	2800      	cmp	r0, #0
 8007614:	da67      	bge.n	80076e6 <_dtoa_r+0x90e>
 8007616:	9b00      	ldr	r3, [sp, #0]
 8007618:	3b01      	subs	r3, #1
 800761a:	ee18 1a10 	vmov	r1, s16
 800761e:	9300      	str	r3, [sp, #0]
 8007620:	220a      	movs	r2, #10
 8007622:	2300      	movs	r3, #0
 8007624:	4620      	mov	r0, r4
 8007626:	f000 fb13 	bl	8007c50 <__multadd>
 800762a:	9b08      	ldr	r3, [sp, #32]
 800762c:	ee08 0a10 	vmov	s16, r0
 8007630:	2b00      	cmp	r3, #0
 8007632:	f000 81b1 	beq.w	8007998 <_dtoa_r+0xbc0>
 8007636:	2300      	movs	r3, #0
 8007638:	4639      	mov	r1, r7
 800763a:	220a      	movs	r2, #10
 800763c:	4620      	mov	r0, r4
 800763e:	f000 fb07 	bl	8007c50 <__multadd>
 8007642:	9b02      	ldr	r3, [sp, #8]
 8007644:	2b00      	cmp	r3, #0
 8007646:	4607      	mov	r7, r0
 8007648:	f300 808e 	bgt.w	8007768 <_dtoa_r+0x990>
 800764c:	9b06      	ldr	r3, [sp, #24]
 800764e:	2b02      	cmp	r3, #2
 8007650:	dc51      	bgt.n	80076f6 <_dtoa_r+0x91e>
 8007652:	e089      	b.n	8007768 <_dtoa_r+0x990>
 8007654:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007656:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800765a:	e74b      	b.n	80074f4 <_dtoa_r+0x71c>
 800765c:	9b03      	ldr	r3, [sp, #12]
 800765e:	1e5e      	subs	r6, r3, #1
 8007660:	9b07      	ldr	r3, [sp, #28]
 8007662:	42b3      	cmp	r3, r6
 8007664:	bfbf      	itttt	lt
 8007666:	9b07      	ldrlt	r3, [sp, #28]
 8007668:	9607      	strlt	r6, [sp, #28]
 800766a:	1af2      	sublt	r2, r6, r3
 800766c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800766e:	bfb6      	itet	lt
 8007670:	189b      	addlt	r3, r3, r2
 8007672:	1b9e      	subge	r6, r3, r6
 8007674:	930a      	strlt	r3, [sp, #40]	; 0x28
 8007676:	9b03      	ldr	r3, [sp, #12]
 8007678:	bfb8      	it	lt
 800767a:	2600      	movlt	r6, #0
 800767c:	2b00      	cmp	r3, #0
 800767e:	bfb7      	itett	lt
 8007680:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8007684:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007688:	1a9d      	sublt	r5, r3, r2
 800768a:	2300      	movlt	r3, #0
 800768c:	e734      	b.n	80074f8 <_dtoa_r+0x720>
 800768e:	9e07      	ldr	r6, [sp, #28]
 8007690:	9d04      	ldr	r5, [sp, #16]
 8007692:	9f08      	ldr	r7, [sp, #32]
 8007694:	e73b      	b.n	800750e <_dtoa_r+0x736>
 8007696:	9a07      	ldr	r2, [sp, #28]
 8007698:	e767      	b.n	800756a <_dtoa_r+0x792>
 800769a:	9b06      	ldr	r3, [sp, #24]
 800769c:	2b01      	cmp	r3, #1
 800769e:	dc18      	bgt.n	80076d2 <_dtoa_r+0x8fa>
 80076a0:	f1ba 0f00 	cmp.w	sl, #0
 80076a4:	d115      	bne.n	80076d2 <_dtoa_r+0x8fa>
 80076a6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80076aa:	b993      	cbnz	r3, 80076d2 <_dtoa_r+0x8fa>
 80076ac:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80076b0:	0d1b      	lsrs	r3, r3, #20
 80076b2:	051b      	lsls	r3, r3, #20
 80076b4:	b183      	cbz	r3, 80076d8 <_dtoa_r+0x900>
 80076b6:	9b04      	ldr	r3, [sp, #16]
 80076b8:	3301      	adds	r3, #1
 80076ba:	9304      	str	r3, [sp, #16]
 80076bc:	9b05      	ldr	r3, [sp, #20]
 80076be:	3301      	adds	r3, #1
 80076c0:	9305      	str	r3, [sp, #20]
 80076c2:	f04f 0801 	mov.w	r8, #1
 80076c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	f47f af6a 	bne.w	80075a2 <_dtoa_r+0x7ca>
 80076ce:	2001      	movs	r0, #1
 80076d0:	e76f      	b.n	80075b2 <_dtoa_r+0x7da>
 80076d2:	f04f 0800 	mov.w	r8, #0
 80076d6:	e7f6      	b.n	80076c6 <_dtoa_r+0x8ee>
 80076d8:	4698      	mov	r8, r3
 80076da:	e7f4      	b.n	80076c6 <_dtoa_r+0x8ee>
 80076dc:	f43f af7d 	beq.w	80075da <_dtoa_r+0x802>
 80076e0:	4618      	mov	r0, r3
 80076e2:	301c      	adds	r0, #28
 80076e4:	e772      	b.n	80075cc <_dtoa_r+0x7f4>
 80076e6:	9b03      	ldr	r3, [sp, #12]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	dc37      	bgt.n	800775c <_dtoa_r+0x984>
 80076ec:	9b06      	ldr	r3, [sp, #24]
 80076ee:	2b02      	cmp	r3, #2
 80076f0:	dd34      	ble.n	800775c <_dtoa_r+0x984>
 80076f2:	9b03      	ldr	r3, [sp, #12]
 80076f4:	9302      	str	r3, [sp, #8]
 80076f6:	9b02      	ldr	r3, [sp, #8]
 80076f8:	b96b      	cbnz	r3, 8007716 <_dtoa_r+0x93e>
 80076fa:	4631      	mov	r1, r6
 80076fc:	2205      	movs	r2, #5
 80076fe:	4620      	mov	r0, r4
 8007700:	f000 faa6 	bl	8007c50 <__multadd>
 8007704:	4601      	mov	r1, r0
 8007706:	4606      	mov	r6, r0
 8007708:	ee18 0a10 	vmov	r0, s16
 800770c:	f000 fcc0 	bl	8008090 <__mcmp>
 8007710:	2800      	cmp	r0, #0
 8007712:	f73f adbb 	bgt.w	800728c <_dtoa_r+0x4b4>
 8007716:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007718:	9d01      	ldr	r5, [sp, #4]
 800771a:	43db      	mvns	r3, r3
 800771c:	9300      	str	r3, [sp, #0]
 800771e:	f04f 0800 	mov.w	r8, #0
 8007722:	4631      	mov	r1, r6
 8007724:	4620      	mov	r0, r4
 8007726:	f000 fa71 	bl	8007c0c <_Bfree>
 800772a:	2f00      	cmp	r7, #0
 800772c:	f43f aea4 	beq.w	8007478 <_dtoa_r+0x6a0>
 8007730:	f1b8 0f00 	cmp.w	r8, #0
 8007734:	d005      	beq.n	8007742 <_dtoa_r+0x96a>
 8007736:	45b8      	cmp	r8, r7
 8007738:	d003      	beq.n	8007742 <_dtoa_r+0x96a>
 800773a:	4641      	mov	r1, r8
 800773c:	4620      	mov	r0, r4
 800773e:	f000 fa65 	bl	8007c0c <_Bfree>
 8007742:	4639      	mov	r1, r7
 8007744:	4620      	mov	r0, r4
 8007746:	f000 fa61 	bl	8007c0c <_Bfree>
 800774a:	e695      	b.n	8007478 <_dtoa_r+0x6a0>
 800774c:	2600      	movs	r6, #0
 800774e:	4637      	mov	r7, r6
 8007750:	e7e1      	b.n	8007716 <_dtoa_r+0x93e>
 8007752:	9700      	str	r7, [sp, #0]
 8007754:	4637      	mov	r7, r6
 8007756:	e599      	b.n	800728c <_dtoa_r+0x4b4>
 8007758:	40240000 	.word	0x40240000
 800775c:	9b08      	ldr	r3, [sp, #32]
 800775e:	2b00      	cmp	r3, #0
 8007760:	f000 80ca 	beq.w	80078f8 <_dtoa_r+0xb20>
 8007764:	9b03      	ldr	r3, [sp, #12]
 8007766:	9302      	str	r3, [sp, #8]
 8007768:	2d00      	cmp	r5, #0
 800776a:	dd05      	ble.n	8007778 <_dtoa_r+0x9a0>
 800776c:	4639      	mov	r1, r7
 800776e:	462a      	mov	r2, r5
 8007770:	4620      	mov	r0, r4
 8007772:	f000 fc1d 	bl	8007fb0 <__lshift>
 8007776:	4607      	mov	r7, r0
 8007778:	f1b8 0f00 	cmp.w	r8, #0
 800777c:	d05b      	beq.n	8007836 <_dtoa_r+0xa5e>
 800777e:	6879      	ldr	r1, [r7, #4]
 8007780:	4620      	mov	r0, r4
 8007782:	f000 fa03 	bl	8007b8c <_Balloc>
 8007786:	4605      	mov	r5, r0
 8007788:	b928      	cbnz	r0, 8007796 <_dtoa_r+0x9be>
 800778a:	4b87      	ldr	r3, [pc, #540]	; (80079a8 <_dtoa_r+0xbd0>)
 800778c:	4602      	mov	r2, r0
 800778e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007792:	f7ff bb3b 	b.w	8006e0c <_dtoa_r+0x34>
 8007796:	693a      	ldr	r2, [r7, #16]
 8007798:	3202      	adds	r2, #2
 800779a:	0092      	lsls	r2, r2, #2
 800779c:	f107 010c 	add.w	r1, r7, #12
 80077a0:	300c      	adds	r0, #12
 80077a2:	f7fe fc76 	bl	8006092 <memcpy>
 80077a6:	2201      	movs	r2, #1
 80077a8:	4629      	mov	r1, r5
 80077aa:	4620      	mov	r0, r4
 80077ac:	f000 fc00 	bl	8007fb0 <__lshift>
 80077b0:	9b01      	ldr	r3, [sp, #4]
 80077b2:	f103 0901 	add.w	r9, r3, #1
 80077b6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80077ba:	4413      	add	r3, r2
 80077bc:	9305      	str	r3, [sp, #20]
 80077be:	f00a 0301 	and.w	r3, sl, #1
 80077c2:	46b8      	mov	r8, r7
 80077c4:	9304      	str	r3, [sp, #16]
 80077c6:	4607      	mov	r7, r0
 80077c8:	4631      	mov	r1, r6
 80077ca:	ee18 0a10 	vmov	r0, s16
 80077ce:	f7ff fa75 	bl	8006cbc <quorem>
 80077d2:	4641      	mov	r1, r8
 80077d4:	9002      	str	r0, [sp, #8]
 80077d6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80077da:	ee18 0a10 	vmov	r0, s16
 80077de:	f000 fc57 	bl	8008090 <__mcmp>
 80077e2:	463a      	mov	r2, r7
 80077e4:	9003      	str	r0, [sp, #12]
 80077e6:	4631      	mov	r1, r6
 80077e8:	4620      	mov	r0, r4
 80077ea:	f000 fc6d 	bl	80080c8 <__mdiff>
 80077ee:	68c2      	ldr	r2, [r0, #12]
 80077f0:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 80077f4:	4605      	mov	r5, r0
 80077f6:	bb02      	cbnz	r2, 800783a <_dtoa_r+0xa62>
 80077f8:	4601      	mov	r1, r0
 80077fa:	ee18 0a10 	vmov	r0, s16
 80077fe:	f000 fc47 	bl	8008090 <__mcmp>
 8007802:	4602      	mov	r2, r0
 8007804:	4629      	mov	r1, r5
 8007806:	4620      	mov	r0, r4
 8007808:	9207      	str	r2, [sp, #28]
 800780a:	f000 f9ff 	bl	8007c0c <_Bfree>
 800780e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8007812:	ea43 0102 	orr.w	r1, r3, r2
 8007816:	9b04      	ldr	r3, [sp, #16]
 8007818:	430b      	orrs	r3, r1
 800781a:	464d      	mov	r5, r9
 800781c:	d10f      	bne.n	800783e <_dtoa_r+0xa66>
 800781e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007822:	d02a      	beq.n	800787a <_dtoa_r+0xaa2>
 8007824:	9b03      	ldr	r3, [sp, #12]
 8007826:	2b00      	cmp	r3, #0
 8007828:	dd02      	ble.n	8007830 <_dtoa_r+0xa58>
 800782a:	9b02      	ldr	r3, [sp, #8]
 800782c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007830:	f88b a000 	strb.w	sl, [fp]
 8007834:	e775      	b.n	8007722 <_dtoa_r+0x94a>
 8007836:	4638      	mov	r0, r7
 8007838:	e7ba      	b.n	80077b0 <_dtoa_r+0x9d8>
 800783a:	2201      	movs	r2, #1
 800783c:	e7e2      	b.n	8007804 <_dtoa_r+0xa2c>
 800783e:	9b03      	ldr	r3, [sp, #12]
 8007840:	2b00      	cmp	r3, #0
 8007842:	db04      	blt.n	800784e <_dtoa_r+0xa76>
 8007844:	9906      	ldr	r1, [sp, #24]
 8007846:	430b      	orrs	r3, r1
 8007848:	9904      	ldr	r1, [sp, #16]
 800784a:	430b      	orrs	r3, r1
 800784c:	d122      	bne.n	8007894 <_dtoa_r+0xabc>
 800784e:	2a00      	cmp	r2, #0
 8007850:	ddee      	ble.n	8007830 <_dtoa_r+0xa58>
 8007852:	ee18 1a10 	vmov	r1, s16
 8007856:	2201      	movs	r2, #1
 8007858:	4620      	mov	r0, r4
 800785a:	f000 fba9 	bl	8007fb0 <__lshift>
 800785e:	4631      	mov	r1, r6
 8007860:	ee08 0a10 	vmov	s16, r0
 8007864:	f000 fc14 	bl	8008090 <__mcmp>
 8007868:	2800      	cmp	r0, #0
 800786a:	dc03      	bgt.n	8007874 <_dtoa_r+0xa9c>
 800786c:	d1e0      	bne.n	8007830 <_dtoa_r+0xa58>
 800786e:	f01a 0f01 	tst.w	sl, #1
 8007872:	d0dd      	beq.n	8007830 <_dtoa_r+0xa58>
 8007874:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007878:	d1d7      	bne.n	800782a <_dtoa_r+0xa52>
 800787a:	2339      	movs	r3, #57	; 0x39
 800787c:	f88b 3000 	strb.w	r3, [fp]
 8007880:	462b      	mov	r3, r5
 8007882:	461d      	mov	r5, r3
 8007884:	3b01      	subs	r3, #1
 8007886:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800788a:	2a39      	cmp	r2, #57	; 0x39
 800788c:	d071      	beq.n	8007972 <_dtoa_r+0xb9a>
 800788e:	3201      	adds	r2, #1
 8007890:	701a      	strb	r2, [r3, #0]
 8007892:	e746      	b.n	8007722 <_dtoa_r+0x94a>
 8007894:	2a00      	cmp	r2, #0
 8007896:	dd07      	ble.n	80078a8 <_dtoa_r+0xad0>
 8007898:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800789c:	d0ed      	beq.n	800787a <_dtoa_r+0xaa2>
 800789e:	f10a 0301 	add.w	r3, sl, #1
 80078a2:	f88b 3000 	strb.w	r3, [fp]
 80078a6:	e73c      	b.n	8007722 <_dtoa_r+0x94a>
 80078a8:	9b05      	ldr	r3, [sp, #20]
 80078aa:	f809 ac01 	strb.w	sl, [r9, #-1]
 80078ae:	4599      	cmp	r9, r3
 80078b0:	d047      	beq.n	8007942 <_dtoa_r+0xb6a>
 80078b2:	ee18 1a10 	vmov	r1, s16
 80078b6:	2300      	movs	r3, #0
 80078b8:	220a      	movs	r2, #10
 80078ba:	4620      	mov	r0, r4
 80078bc:	f000 f9c8 	bl	8007c50 <__multadd>
 80078c0:	45b8      	cmp	r8, r7
 80078c2:	ee08 0a10 	vmov	s16, r0
 80078c6:	f04f 0300 	mov.w	r3, #0
 80078ca:	f04f 020a 	mov.w	r2, #10
 80078ce:	4641      	mov	r1, r8
 80078d0:	4620      	mov	r0, r4
 80078d2:	d106      	bne.n	80078e2 <_dtoa_r+0xb0a>
 80078d4:	f000 f9bc 	bl	8007c50 <__multadd>
 80078d8:	4680      	mov	r8, r0
 80078da:	4607      	mov	r7, r0
 80078dc:	f109 0901 	add.w	r9, r9, #1
 80078e0:	e772      	b.n	80077c8 <_dtoa_r+0x9f0>
 80078e2:	f000 f9b5 	bl	8007c50 <__multadd>
 80078e6:	4639      	mov	r1, r7
 80078e8:	4680      	mov	r8, r0
 80078ea:	2300      	movs	r3, #0
 80078ec:	220a      	movs	r2, #10
 80078ee:	4620      	mov	r0, r4
 80078f0:	f000 f9ae 	bl	8007c50 <__multadd>
 80078f4:	4607      	mov	r7, r0
 80078f6:	e7f1      	b.n	80078dc <_dtoa_r+0xb04>
 80078f8:	9b03      	ldr	r3, [sp, #12]
 80078fa:	9302      	str	r3, [sp, #8]
 80078fc:	9d01      	ldr	r5, [sp, #4]
 80078fe:	ee18 0a10 	vmov	r0, s16
 8007902:	4631      	mov	r1, r6
 8007904:	f7ff f9da 	bl	8006cbc <quorem>
 8007908:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800790c:	9b01      	ldr	r3, [sp, #4]
 800790e:	f805 ab01 	strb.w	sl, [r5], #1
 8007912:	1aea      	subs	r2, r5, r3
 8007914:	9b02      	ldr	r3, [sp, #8]
 8007916:	4293      	cmp	r3, r2
 8007918:	dd09      	ble.n	800792e <_dtoa_r+0xb56>
 800791a:	ee18 1a10 	vmov	r1, s16
 800791e:	2300      	movs	r3, #0
 8007920:	220a      	movs	r2, #10
 8007922:	4620      	mov	r0, r4
 8007924:	f000 f994 	bl	8007c50 <__multadd>
 8007928:	ee08 0a10 	vmov	s16, r0
 800792c:	e7e7      	b.n	80078fe <_dtoa_r+0xb26>
 800792e:	9b02      	ldr	r3, [sp, #8]
 8007930:	2b00      	cmp	r3, #0
 8007932:	bfc8      	it	gt
 8007934:	461d      	movgt	r5, r3
 8007936:	9b01      	ldr	r3, [sp, #4]
 8007938:	bfd8      	it	le
 800793a:	2501      	movle	r5, #1
 800793c:	441d      	add	r5, r3
 800793e:	f04f 0800 	mov.w	r8, #0
 8007942:	ee18 1a10 	vmov	r1, s16
 8007946:	2201      	movs	r2, #1
 8007948:	4620      	mov	r0, r4
 800794a:	f000 fb31 	bl	8007fb0 <__lshift>
 800794e:	4631      	mov	r1, r6
 8007950:	ee08 0a10 	vmov	s16, r0
 8007954:	f000 fb9c 	bl	8008090 <__mcmp>
 8007958:	2800      	cmp	r0, #0
 800795a:	dc91      	bgt.n	8007880 <_dtoa_r+0xaa8>
 800795c:	d102      	bne.n	8007964 <_dtoa_r+0xb8c>
 800795e:	f01a 0f01 	tst.w	sl, #1
 8007962:	d18d      	bne.n	8007880 <_dtoa_r+0xaa8>
 8007964:	462b      	mov	r3, r5
 8007966:	461d      	mov	r5, r3
 8007968:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800796c:	2a30      	cmp	r2, #48	; 0x30
 800796e:	d0fa      	beq.n	8007966 <_dtoa_r+0xb8e>
 8007970:	e6d7      	b.n	8007722 <_dtoa_r+0x94a>
 8007972:	9a01      	ldr	r2, [sp, #4]
 8007974:	429a      	cmp	r2, r3
 8007976:	d184      	bne.n	8007882 <_dtoa_r+0xaaa>
 8007978:	9b00      	ldr	r3, [sp, #0]
 800797a:	3301      	adds	r3, #1
 800797c:	9300      	str	r3, [sp, #0]
 800797e:	2331      	movs	r3, #49	; 0x31
 8007980:	7013      	strb	r3, [r2, #0]
 8007982:	e6ce      	b.n	8007722 <_dtoa_r+0x94a>
 8007984:	4b09      	ldr	r3, [pc, #36]	; (80079ac <_dtoa_r+0xbd4>)
 8007986:	f7ff ba95 	b.w	8006eb4 <_dtoa_r+0xdc>
 800798a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800798c:	2b00      	cmp	r3, #0
 800798e:	f47f aa6e 	bne.w	8006e6e <_dtoa_r+0x96>
 8007992:	4b07      	ldr	r3, [pc, #28]	; (80079b0 <_dtoa_r+0xbd8>)
 8007994:	f7ff ba8e 	b.w	8006eb4 <_dtoa_r+0xdc>
 8007998:	9b02      	ldr	r3, [sp, #8]
 800799a:	2b00      	cmp	r3, #0
 800799c:	dcae      	bgt.n	80078fc <_dtoa_r+0xb24>
 800799e:	9b06      	ldr	r3, [sp, #24]
 80079a0:	2b02      	cmp	r3, #2
 80079a2:	f73f aea8 	bgt.w	80076f6 <_dtoa_r+0x91e>
 80079a6:	e7a9      	b.n	80078fc <_dtoa_r+0xb24>
 80079a8:	0800904f 	.word	0x0800904f
 80079ac:	08008fac 	.word	0x08008fac
 80079b0:	08008fd0 	.word	0x08008fd0

080079b4 <__sflush_r>:
 80079b4:	898a      	ldrh	r2, [r1, #12]
 80079b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079ba:	4605      	mov	r5, r0
 80079bc:	0710      	lsls	r0, r2, #28
 80079be:	460c      	mov	r4, r1
 80079c0:	d458      	bmi.n	8007a74 <__sflush_r+0xc0>
 80079c2:	684b      	ldr	r3, [r1, #4]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	dc05      	bgt.n	80079d4 <__sflush_r+0x20>
 80079c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	dc02      	bgt.n	80079d4 <__sflush_r+0x20>
 80079ce:	2000      	movs	r0, #0
 80079d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80079d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80079d6:	2e00      	cmp	r6, #0
 80079d8:	d0f9      	beq.n	80079ce <__sflush_r+0x1a>
 80079da:	2300      	movs	r3, #0
 80079dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80079e0:	682f      	ldr	r7, [r5, #0]
 80079e2:	602b      	str	r3, [r5, #0]
 80079e4:	d032      	beq.n	8007a4c <__sflush_r+0x98>
 80079e6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80079e8:	89a3      	ldrh	r3, [r4, #12]
 80079ea:	075a      	lsls	r2, r3, #29
 80079ec:	d505      	bpl.n	80079fa <__sflush_r+0x46>
 80079ee:	6863      	ldr	r3, [r4, #4]
 80079f0:	1ac0      	subs	r0, r0, r3
 80079f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80079f4:	b10b      	cbz	r3, 80079fa <__sflush_r+0x46>
 80079f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80079f8:	1ac0      	subs	r0, r0, r3
 80079fa:	2300      	movs	r3, #0
 80079fc:	4602      	mov	r2, r0
 80079fe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007a00:	6a21      	ldr	r1, [r4, #32]
 8007a02:	4628      	mov	r0, r5
 8007a04:	47b0      	blx	r6
 8007a06:	1c43      	adds	r3, r0, #1
 8007a08:	89a3      	ldrh	r3, [r4, #12]
 8007a0a:	d106      	bne.n	8007a1a <__sflush_r+0x66>
 8007a0c:	6829      	ldr	r1, [r5, #0]
 8007a0e:	291d      	cmp	r1, #29
 8007a10:	d82c      	bhi.n	8007a6c <__sflush_r+0xb8>
 8007a12:	4a2a      	ldr	r2, [pc, #168]	; (8007abc <__sflush_r+0x108>)
 8007a14:	40ca      	lsrs	r2, r1
 8007a16:	07d6      	lsls	r6, r2, #31
 8007a18:	d528      	bpl.n	8007a6c <__sflush_r+0xb8>
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	6062      	str	r2, [r4, #4]
 8007a1e:	04d9      	lsls	r1, r3, #19
 8007a20:	6922      	ldr	r2, [r4, #16]
 8007a22:	6022      	str	r2, [r4, #0]
 8007a24:	d504      	bpl.n	8007a30 <__sflush_r+0x7c>
 8007a26:	1c42      	adds	r2, r0, #1
 8007a28:	d101      	bne.n	8007a2e <__sflush_r+0x7a>
 8007a2a:	682b      	ldr	r3, [r5, #0]
 8007a2c:	b903      	cbnz	r3, 8007a30 <__sflush_r+0x7c>
 8007a2e:	6560      	str	r0, [r4, #84]	; 0x54
 8007a30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007a32:	602f      	str	r7, [r5, #0]
 8007a34:	2900      	cmp	r1, #0
 8007a36:	d0ca      	beq.n	80079ce <__sflush_r+0x1a>
 8007a38:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007a3c:	4299      	cmp	r1, r3
 8007a3e:	d002      	beq.n	8007a46 <__sflush_r+0x92>
 8007a40:	4628      	mov	r0, r5
 8007a42:	f000 fc3d 	bl	80082c0 <_free_r>
 8007a46:	2000      	movs	r0, #0
 8007a48:	6360      	str	r0, [r4, #52]	; 0x34
 8007a4a:	e7c1      	b.n	80079d0 <__sflush_r+0x1c>
 8007a4c:	6a21      	ldr	r1, [r4, #32]
 8007a4e:	2301      	movs	r3, #1
 8007a50:	4628      	mov	r0, r5
 8007a52:	47b0      	blx	r6
 8007a54:	1c41      	adds	r1, r0, #1
 8007a56:	d1c7      	bne.n	80079e8 <__sflush_r+0x34>
 8007a58:	682b      	ldr	r3, [r5, #0]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d0c4      	beq.n	80079e8 <__sflush_r+0x34>
 8007a5e:	2b1d      	cmp	r3, #29
 8007a60:	d001      	beq.n	8007a66 <__sflush_r+0xb2>
 8007a62:	2b16      	cmp	r3, #22
 8007a64:	d101      	bne.n	8007a6a <__sflush_r+0xb6>
 8007a66:	602f      	str	r7, [r5, #0]
 8007a68:	e7b1      	b.n	80079ce <__sflush_r+0x1a>
 8007a6a:	89a3      	ldrh	r3, [r4, #12]
 8007a6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a70:	81a3      	strh	r3, [r4, #12]
 8007a72:	e7ad      	b.n	80079d0 <__sflush_r+0x1c>
 8007a74:	690f      	ldr	r7, [r1, #16]
 8007a76:	2f00      	cmp	r7, #0
 8007a78:	d0a9      	beq.n	80079ce <__sflush_r+0x1a>
 8007a7a:	0793      	lsls	r3, r2, #30
 8007a7c:	680e      	ldr	r6, [r1, #0]
 8007a7e:	bf08      	it	eq
 8007a80:	694b      	ldreq	r3, [r1, #20]
 8007a82:	600f      	str	r7, [r1, #0]
 8007a84:	bf18      	it	ne
 8007a86:	2300      	movne	r3, #0
 8007a88:	eba6 0807 	sub.w	r8, r6, r7
 8007a8c:	608b      	str	r3, [r1, #8]
 8007a8e:	f1b8 0f00 	cmp.w	r8, #0
 8007a92:	dd9c      	ble.n	80079ce <__sflush_r+0x1a>
 8007a94:	6a21      	ldr	r1, [r4, #32]
 8007a96:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007a98:	4643      	mov	r3, r8
 8007a9a:	463a      	mov	r2, r7
 8007a9c:	4628      	mov	r0, r5
 8007a9e:	47b0      	blx	r6
 8007aa0:	2800      	cmp	r0, #0
 8007aa2:	dc06      	bgt.n	8007ab2 <__sflush_r+0xfe>
 8007aa4:	89a3      	ldrh	r3, [r4, #12]
 8007aa6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007aaa:	81a3      	strh	r3, [r4, #12]
 8007aac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007ab0:	e78e      	b.n	80079d0 <__sflush_r+0x1c>
 8007ab2:	4407      	add	r7, r0
 8007ab4:	eba8 0800 	sub.w	r8, r8, r0
 8007ab8:	e7e9      	b.n	8007a8e <__sflush_r+0xda>
 8007aba:	bf00      	nop
 8007abc:	20400001 	.word	0x20400001

08007ac0 <_fflush_r>:
 8007ac0:	b538      	push	{r3, r4, r5, lr}
 8007ac2:	690b      	ldr	r3, [r1, #16]
 8007ac4:	4605      	mov	r5, r0
 8007ac6:	460c      	mov	r4, r1
 8007ac8:	b913      	cbnz	r3, 8007ad0 <_fflush_r+0x10>
 8007aca:	2500      	movs	r5, #0
 8007acc:	4628      	mov	r0, r5
 8007ace:	bd38      	pop	{r3, r4, r5, pc}
 8007ad0:	b118      	cbz	r0, 8007ada <_fflush_r+0x1a>
 8007ad2:	6983      	ldr	r3, [r0, #24]
 8007ad4:	b90b      	cbnz	r3, 8007ada <_fflush_r+0x1a>
 8007ad6:	f7fe fa17 	bl	8005f08 <__sinit>
 8007ada:	4b14      	ldr	r3, [pc, #80]	; (8007b2c <_fflush_r+0x6c>)
 8007adc:	429c      	cmp	r4, r3
 8007ade:	d11b      	bne.n	8007b18 <_fflush_r+0x58>
 8007ae0:	686c      	ldr	r4, [r5, #4]
 8007ae2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d0ef      	beq.n	8007aca <_fflush_r+0xa>
 8007aea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007aec:	07d0      	lsls	r0, r2, #31
 8007aee:	d404      	bmi.n	8007afa <_fflush_r+0x3a>
 8007af0:	0599      	lsls	r1, r3, #22
 8007af2:	d402      	bmi.n	8007afa <_fflush_r+0x3a>
 8007af4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007af6:	f7fe faca 	bl	800608e <__retarget_lock_acquire_recursive>
 8007afa:	4628      	mov	r0, r5
 8007afc:	4621      	mov	r1, r4
 8007afe:	f7ff ff59 	bl	80079b4 <__sflush_r>
 8007b02:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007b04:	07da      	lsls	r2, r3, #31
 8007b06:	4605      	mov	r5, r0
 8007b08:	d4e0      	bmi.n	8007acc <_fflush_r+0xc>
 8007b0a:	89a3      	ldrh	r3, [r4, #12]
 8007b0c:	059b      	lsls	r3, r3, #22
 8007b0e:	d4dd      	bmi.n	8007acc <_fflush_r+0xc>
 8007b10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007b12:	f7fe fabd 	bl	8006090 <__retarget_lock_release_recursive>
 8007b16:	e7d9      	b.n	8007acc <_fflush_r+0xc>
 8007b18:	4b05      	ldr	r3, [pc, #20]	; (8007b30 <_fflush_r+0x70>)
 8007b1a:	429c      	cmp	r4, r3
 8007b1c:	d101      	bne.n	8007b22 <_fflush_r+0x62>
 8007b1e:	68ac      	ldr	r4, [r5, #8]
 8007b20:	e7df      	b.n	8007ae2 <_fflush_r+0x22>
 8007b22:	4b04      	ldr	r3, [pc, #16]	; (8007b34 <_fflush_r+0x74>)
 8007b24:	429c      	cmp	r4, r3
 8007b26:	bf08      	it	eq
 8007b28:	68ec      	ldreq	r4, [r5, #12]
 8007b2a:	e7da      	b.n	8007ae2 <_fflush_r+0x22>
 8007b2c:	08008f58 	.word	0x08008f58
 8007b30:	08008f78 	.word	0x08008f78
 8007b34:	08008f38 	.word	0x08008f38

08007b38 <_localeconv_r>:
 8007b38:	4800      	ldr	r0, [pc, #0]	; (8007b3c <_localeconv_r+0x4>)
 8007b3a:	4770      	bx	lr
 8007b3c:	20000164 	.word	0x20000164

08007b40 <_lseek_r>:
 8007b40:	b538      	push	{r3, r4, r5, lr}
 8007b42:	4d07      	ldr	r5, [pc, #28]	; (8007b60 <_lseek_r+0x20>)
 8007b44:	4604      	mov	r4, r0
 8007b46:	4608      	mov	r0, r1
 8007b48:	4611      	mov	r1, r2
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	602a      	str	r2, [r5, #0]
 8007b4e:	461a      	mov	r2, r3
 8007b50:	f7fa f87c 	bl	8001c4c <_lseek>
 8007b54:	1c43      	adds	r3, r0, #1
 8007b56:	d102      	bne.n	8007b5e <_lseek_r+0x1e>
 8007b58:	682b      	ldr	r3, [r5, #0]
 8007b5a:	b103      	cbz	r3, 8007b5e <_lseek_r+0x1e>
 8007b5c:	6023      	str	r3, [r4, #0]
 8007b5e:	bd38      	pop	{r3, r4, r5, pc}
 8007b60:	200043cc 	.word	0x200043cc

08007b64 <malloc>:
 8007b64:	4b02      	ldr	r3, [pc, #8]	; (8007b70 <malloc+0xc>)
 8007b66:	4601      	mov	r1, r0
 8007b68:	6818      	ldr	r0, [r3, #0]
 8007b6a:	f7fe bac9 	b.w	8006100 <_malloc_r>
 8007b6e:	bf00      	nop
 8007b70:	20000010 	.word	0x20000010

08007b74 <__malloc_lock>:
 8007b74:	4801      	ldr	r0, [pc, #4]	; (8007b7c <__malloc_lock+0x8>)
 8007b76:	f7fe ba8a 	b.w	800608e <__retarget_lock_acquire_recursive>
 8007b7a:	bf00      	nop
 8007b7c:	200043c0 	.word	0x200043c0

08007b80 <__malloc_unlock>:
 8007b80:	4801      	ldr	r0, [pc, #4]	; (8007b88 <__malloc_unlock+0x8>)
 8007b82:	f7fe ba85 	b.w	8006090 <__retarget_lock_release_recursive>
 8007b86:	bf00      	nop
 8007b88:	200043c0 	.word	0x200043c0

08007b8c <_Balloc>:
 8007b8c:	b570      	push	{r4, r5, r6, lr}
 8007b8e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007b90:	4604      	mov	r4, r0
 8007b92:	460d      	mov	r5, r1
 8007b94:	b976      	cbnz	r6, 8007bb4 <_Balloc+0x28>
 8007b96:	2010      	movs	r0, #16
 8007b98:	f7ff ffe4 	bl	8007b64 <malloc>
 8007b9c:	4602      	mov	r2, r0
 8007b9e:	6260      	str	r0, [r4, #36]	; 0x24
 8007ba0:	b920      	cbnz	r0, 8007bac <_Balloc+0x20>
 8007ba2:	4b18      	ldr	r3, [pc, #96]	; (8007c04 <_Balloc+0x78>)
 8007ba4:	4818      	ldr	r0, [pc, #96]	; (8007c08 <_Balloc+0x7c>)
 8007ba6:	2166      	movs	r1, #102	; 0x66
 8007ba8:	f000 ff5e 	bl	8008a68 <__assert_func>
 8007bac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007bb0:	6006      	str	r6, [r0, #0]
 8007bb2:	60c6      	str	r6, [r0, #12]
 8007bb4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007bb6:	68f3      	ldr	r3, [r6, #12]
 8007bb8:	b183      	cbz	r3, 8007bdc <_Balloc+0x50>
 8007bba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007bbc:	68db      	ldr	r3, [r3, #12]
 8007bbe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007bc2:	b9b8      	cbnz	r0, 8007bf4 <_Balloc+0x68>
 8007bc4:	2101      	movs	r1, #1
 8007bc6:	fa01 f605 	lsl.w	r6, r1, r5
 8007bca:	1d72      	adds	r2, r6, #5
 8007bcc:	0092      	lsls	r2, r2, #2
 8007bce:	4620      	mov	r0, r4
 8007bd0:	f000 fb60 	bl	8008294 <_calloc_r>
 8007bd4:	b160      	cbz	r0, 8007bf0 <_Balloc+0x64>
 8007bd6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007bda:	e00e      	b.n	8007bfa <_Balloc+0x6e>
 8007bdc:	2221      	movs	r2, #33	; 0x21
 8007bde:	2104      	movs	r1, #4
 8007be0:	4620      	mov	r0, r4
 8007be2:	f000 fb57 	bl	8008294 <_calloc_r>
 8007be6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007be8:	60f0      	str	r0, [r6, #12]
 8007bea:	68db      	ldr	r3, [r3, #12]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d1e4      	bne.n	8007bba <_Balloc+0x2e>
 8007bf0:	2000      	movs	r0, #0
 8007bf2:	bd70      	pop	{r4, r5, r6, pc}
 8007bf4:	6802      	ldr	r2, [r0, #0]
 8007bf6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007c00:	e7f7      	b.n	8007bf2 <_Balloc+0x66>
 8007c02:	bf00      	nop
 8007c04:	08008fdd 	.word	0x08008fdd
 8007c08:	08009060 	.word	0x08009060

08007c0c <_Bfree>:
 8007c0c:	b570      	push	{r4, r5, r6, lr}
 8007c0e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007c10:	4605      	mov	r5, r0
 8007c12:	460c      	mov	r4, r1
 8007c14:	b976      	cbnz	r6, 8007c34 <_Bfree+0x28>
 8007c16:	2010      	movs	r0, #16
 8007c18:	f7ff ffa4 	bl	8007b64 <malloc>
 8007c1c:	4602      	mov	r2, r0
 8007c1e:	6268      	str	r0, [r5, #36]	; 0x24
 8007c20:	b920      	cbnz	r0, 8007c2c <_Bfree+0x20>
 8007c22:	4b09      	ldr	r3, [pc, #36]	; (8007c48 <_Bfree+0x3c>)
 8007c24:	4809      	ldr	r0, [pc, #36]	; (8007c4c <_Bfree+0x40>)
 8007c26:	218a      	movs	r1, #138	; 0x8a
 8007c28:	f000 ff1e 	bl	8008a68 <__assert_func>
 8007c2c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007c30:	6006      	str	r6, [r0, #0]
 8007c32:	60c6      	str	r6, [r0, #12]
 8007c34:	b13c      	cbz	r4, 8007c46 <_Bfree+0x3a>
 8007c36:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007c38:	6862      	ldr	r2, [r4, #4]
 8007c3a:	68db      	ldr	r3, [r3, #12]
 8007c3c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007c40:	6021      	str	r1, [r4, #0]
 8007c42:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007c46:	bd70      	pop	{r4, r5, r6, pc}
 8007c48:	08008fdd 	.word	0x08008fdd
 8007c4c:	08009060 	.word	0x08009060

08007c50 <__multadd>:
 8007c50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c54:	690d      	ldr	r5, [r1, #16]
 8007c56:	4607      	mov	r7, r0
 8007c58:	460c      	mov	r4, r1
 8007c5a:	461e      	mov	r6, r3
 8007c5c:	f101 0c14 	add.w	ip, r1, #20
 8007c60:	2000      	movs	r0, #0
 8007c62:	f8dc 3000 	ldr.w	r3, [ip]
 8007c66:	b299      	uxth	r1, r3
 8007c68:	fb02 6101 	mla	r1, r2, r1, r6
 8007c6c:	0c1e      	lsrs	r6, r3, #16
 8007c6e:	0c0b      	lsrs	r3, r1, #16
 8007c70:	fb02 3306 	mla	r3, r2, r6, r3
 8007c74:	b289      	uxth	r1, r1
 8007c76:	3001      	adds	r0, #1
 8007c78:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007c7c:	4285      	cmp	r5, r0
 8007c7e:	f84c 1b04 	str.w	r1, [ip], #4
 8007c82:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007c86:	dcec      	bgt.n	8007c62 <__multadd+0x12>
 8007c88:	b30e      	cbz	r6, 8007cce <__multadd+0x7e>
 8007c8a:	68a3      	ldr	r3, [r4, #8]
 8007c8c:	42ab      	cmp	r3, r5
 8007c8e:	dc19      	bgt.n	8007cc4 <__multadd+0x74>
 8007c90:	6861      	ldr	r1, [r4, #4]
 8007c92:	4638      	mov	r0, r7
 8007c94:	3101      	adds	r1, #1
 8007c96:	f7ff ff79 	bl	8007b8c <_Balloc>
 8007c9a:	4680      	mov	r8, r0
 8007c9c:	b928      	cbnz	r0, 8007caa <__multadd+0x5a>
 8007c9e:	4602      	mov	r2, r0
 8007ca0:	4b0c      	ldr	r3, [pc, #48]	; (8007cd4 <__multadd+0x84>)
 8007ca2:	480d      	ldr	r0, [pc, #52]	; (8007cd8 <__multadd+0x88>)
 8007ca4:	21b5      	movs	r1, #181	; 0xb5
 8007ca6:	f000 fedf 	bl	8008a68 <__assert_func>
 8007caa:	6922      	ldr	r2, [r4, #16]
 8007cac:	3202      	adds	r2, #2
 8007cae:	f104 010c 	add.w	r1, r4, #12
 8007cb2:	0092      	lsls	r2, r2, #2
 8007cb4:	300c      	adds	r0, #12
 8007cb6:	f7fe f9ec 	bl	8006092 <memcpy>
 8007cba:	4621      	mov	r1, r4
 8007cbc:	4638      	mov	r0, r7
 8007cbe:	f7ff ffa5 	bl	8007c0c <_Bfree>
 8007cc2:	4644      	mov	r4, r8
 8007cc4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007cc8:	3501      	adds	r5, #1
 8007cca:	615e      	str	r6, [r3, #20]
 8007ccc:	6125      	str	r5, [r4, #16]
 8007cce:	4620      	mov	r0, r4
 8007cd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007cd4:	0800904f 	.word	0x0800904f
 8007cd8:	08009060 	.word	0x08009060

08007cdc <__hi0bits>:
 8007cdc:	0c03      	lsrs	r3, r0, #16
 8007cde:	041b      	lsls	r3, r3, #16
 8007ce0:	b9d3      	cbnz	r3, 8007d18 <__hi0bits+0x3c>
 8007ce2:	0400      	lsls	r0, r0, #16
 8007ce4:	2310      	movs	r3, #16
 8007ce6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007cea:	bf04      	itt	eq
 8007cec:	0200      	lsleq	r0, r0, #8
 8007cee:	3308      	addeq	r3, #8
 8007cf0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007cf4:	bf04      	itt	eq
 8007cf6:	0100      	lsleq	r0, r0, #4
 8007cf8:	3304      	addeq	r3, #4
 8007cfa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007cfe:	bf04      	itt	eq
 8007d00:	0080      	lsleq	r0, r0, #2
 8007d02:	3302      	addeq	r3, #2
 8007d04:	2800      	cmp	r0, #0
 8007d06:	db05      	blt.n	8007d14 <__hi0bits+0x38>
 8007d08:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007d0c:	f103 0301 	add.w	r3, r3, #1
 8007d10:	bf08      	it	eq
 8007d12:	2320      	moveq	r3, #32
 8007d14:	4618      	mov	r0, r3
 8007d16:	4770      	bx	lr
 8007d18:	2300      	movs	r3, #0
 8007d1a:	e7e4      	b.n	8007ce6 <__hi0bits+0xa>

08007d1c <__lo0bits>:
 8007d1c:	6803      	ldr	r3, [r0, #0]
 8007d1e:	f013 0207 	ands.w	r2, r3, #7
 8007d22:	4601      	mov	r1, r0
 8007d24:	d00b      	beq.n	8007d3e <__lo0bits+0x22>
 8007d26:	07da      	lsls	r2, r3, #31
 8007d28:	d423      	bmi.n	8007d72 <__lo0bits+0x56>
 8007d2a:	0798      	lsls	r0, r3, #30
 8007d2c:	bf49      	itett	mi
 8007d2e:	085b      	lsrmi	r3, r3, #1
 8007d30:	089b      	lsrpl	r3, r3, #2
 8007d32:	2001      	movmi	r0, #1
 8007d34:	600b      	strmi	r3, [r1, #0]
 8007d36:	bf5c      	itt	pl
 8007d38:	600b      	strpl	r3, [r1, #0]
 8007d3a:	2002      	movpl	r0, #2
 8007d3c:	4770      	bx	lr
 8007d3e:	b298      	uxth	r0, r3
 8007d40:	b9a8      	cbnz	r0, 8007d6e <__lo0bits+0x52>
 8007d42:	0c1b      	lsrs	r3, r3, #16
 8007d44:	2010      	movs	r0, #16
 8007d46:	b2da      	uxtb	r2, r3
 8007d48:	b90a      	cbnz	r2, 8007d4e <__lo0bits+0x32>
 8007d4a:	3008      	adds	r0, #8
 8007d4c:	0a1b      	lsrs	r3, r3, #8
 8007d4e:	071a      	lsls	r2, r3, #28
 8007d50:	bf04      	itt	eq
 8007d52:	091b      	lsreq	r3, r3, #4
 8007d54:	3004      	addeq	r0, #4
 8007d56:	079a      	lsls	r2, r3, #30
 8007d58:	bf04      	itt	eq
 8007d5a:	089b      	lsreq	r3, r3, #2
 8007d5c:	3002      	addeq	r0, #2
 8007d5e:	07da      	lsls	r2, r3, #31
 8007d60:	d403      	bmi.n	8007d6a <__lo0bits+0x4e>
 8007d62:	085b      	lsrs	r3, r3, #1
 8007d64:	f100 0001 	add.w	r0, r0, #1
 8007d68:	d005      	beq.n	8007d76 <__lo0bits+0x5a>
 8007d6a:	600b      	str	r3, [r1, #0]
 8007d6c:	4770      	bx	lr
 8007d6e:	4610      	mov	r0, r2
 8007d70:	e7e9      	b.n	8007d46 <__lo0bits+0x2a>
 8007d72:	2000      	movs	r0, #0
 8007d74:	4770      	bx	lr
 8007d76:	2020      	movs	r0, #32
 8007d78:	4770      	bx	lr
	...

08007d7c <__i2b>:
 8007d7c:	b510      	push	{r4, lr}
 8007d7e:	460c      	mov	r4, r1
 8007d80:	2101      	movs	r1, #1
 8007d82:	f7ff ff03 	bl	8007b8c <_Balloc>
 8007d86:	4602      	mov	r2, r0
 8007d88:	b928      	cbnz	r0, 8007d96 <__i2b+0x1a>
 8007d8a:	4b05      	ldr	r3, [pc, #20]	; (8007da0 <__i2b+0x24>)
 8007d8c:	4805      	ldr	r0, [pc, #20]	; (8007da4 <__i2b+0x28>)
 8007d8e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007d92:	f000 fe69 	bl	8008a68 <__assert_func>
 8007d96:	2301      	movs	r3, #1
 8007d98:	6144      	str	r4, [r0, #20]
 8007d9a:	6103      	str	r3, [r0, #16]
 8007d9c:	bd10      	pop	{r4, pc}
 8007d9e:	bf00      	nop
 8007da0:	0800904f 	.word	0x0800904f
 8007da4:	08009060 	.word	0x08009060

08007da8 <__multiply>:
 8007da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dac:	4691      	mov	r9, r2
 8007dae:	690a      	ldr	r2, [r1, #16]
 8007db0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007db4:	429a      	cmp	r2, r3
 8007db6:	bfb8      	it	lt
 8007db8:	460b      	movlt	r3, r1
 8007dba:	460c      	mov	r4, r1
 8007dbc:	bfbc      	itt	lt
 8007dbe:	464c      	movlt	r4, r9
 8007dc0:	4699      	movlt	r9, r3
 8007dc2:	6927      	ldr	r7, [r4, #16]
 8007dc4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007dc8:	68a3      	ldr	r3, [r4, #8]
 8007dca:	6861      	ldr	r1, [r4, #4]
 8007dcc:	eb07 060a 	add.w	r6, r7, sl
 8007dd0:	42b3      	cmp	r3, r6
 8007dd2:	b085      	sub	sp, #20
 8007dd4:	bfb8      	it	lt
 8007dd6:	3101      	addlt	r1, #1
 8007dd8:	f7ff fed8 	bl	8007b8c <_Balloc>
 8007ddc:	b930      	cbnz	r0, 8007dec <__multiply+0x44>
 8007dde:	4602      	mov	r2, r0
 8007de0:	4b44      	ldr	r3, [pc, #272]	; (8007ef4 <__multiply+0x14c>)
 8007de2:	4845      	ldr	r0, [pc, #276]	; (8007ef8 <__multiply+0x150>)
 8007de4:	f240 115d 	movw	r1, #349	; 0x15d
 8007de8:	f000 fe3e 	bl	8008a68 <__assert_func>
 8007dec:	f100 0514 	add.w	r5, r0, #20
 8007df0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007df4:	462b      	mov	r3, r5
 8007df6:	2200      	movs	r2, #0
 8007df8:	4543      	cmp	r3, r8
 8007dfa:	d321      	bcc.n	8007e40 <__multiply+0x98>
 8007dfc:	f104 0314 	add.w	r3, r4, #20
 8007e00:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007e04:	f109 0314 	add.w	r3, r9, #20
 8007e08:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007e0c:	9202      	str	r2, [sp, #8]
 8007e0e:	1b3a      	subs	r2, r7, r4
 8007e10:	3a15      	subs	r2, #21
 8007e12:	f022 0203 	bic.w	r2, r2, #3
 8007e16:	3204      	adds	r2, #4
 8007e18:	f104 0115 	add.w	r1, r4, #21
 8007e1c:	428f      	cmp	r7, r1
 8007e1e:	bf38      	it	cc
 8007e20:	2204      	movcc	r2, #4
 8007e22:	9201      	str	r2, [sp, #4]
 8007e24:	9a02      	ldr	r2, [sp, #8]
 8007e26:	9303      	str	r3, [sp, #12]
 8007e28:	429a      	cmp	r2, r3
 8007e2a:	d80c      	bhi.n	8007e46 <__multiply+0x9e>
 8007e2c:	2e00      	cmp	r6, #0
 8007e2e:	dd03      	ble.n	8007e38 <__multiply+0x90>
 8007e30:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d05a      	beq.n	8007eee <__multiply+0x146>
 8007e38:	6106      	str	r6, [r0, #16]
 8007e3a:	b005      	add	sp, #20
 8007e3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e40:	f843 2b04 	str.w	r2, [r3], #4
 8007e44:	e7d8      	b.n	8007df8 <__multiply+0x50>
 8007e46:	f8b3 a000 	ldrh.w	sl, [r3]
 8007e4a:	f1ba 0f00 	cmp.w	sl, #0
 8007e4e:	d024      	beq.n	8007e9a <__multiply+0xf2>
 8007e50:	f104 0e14 	add.w	lr, r4, #20
 8007e54:	46a9      	mov	r9, r5
 8007e56:	f04f 0c00 	mov.w	ip, #0
 8007e5a:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007e5e:	f8d9 1000 	ldr.w	r1, [r9]
 8007e62:	fa1f fb82 	uxth.w	fp, r2
 8007e66:	b289      	uxth	r1, r1
 8007e68:	fb0a 110b 	mla	r1, sl, fp, r1
 8007e6c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007e70:	f8d9 2000 	ldr.w	r2, [r9]
 8007e74:	4461      	add	r1, ip
 8007e76:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007e7a:	fb0a c20b 	mla	r2, sl, fp, ip
 8007e7e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007e82:	b289      	uxth	r1, r1
 8007e84:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007e88:	4577      	cmp	r7, lr
 8007e8a:	f849 1b04 	str.w	r1, [r9], #4
 8007e8e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007e92:	d8e2      	bhi.n	8007e5a <__multiply+0xb2>
 8007e94:	9a01      	ldr	r2, [sp, #4]
 8007e96:	f845 c002 	str.w	ip, [r5, r2]
 8007e9a:	9a03      	ldr	r2, [sp, #12]
 8007e9c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007ea0:	3304      	adds	r3, #4
 8007ea2:	f1b9 0f00 	cmp.w	r9, #0
 8007ea6:	d020      	beq.n	8007eea <__multiply+0x142>
 8007ea8:	6829      	ldr	r1, [r5, #0]
 8007eaa:	f104 0c14 	add.w	ip, r4, #20
 8007eae:	46ae      	mov	lr, r5
 8007eb0:	f04f 0a00 	mov.w	sl, #0
 8007eb4:	f8bc b000 	ldrh.w	fp, [ip]
 8007eb8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007ebc:	fb09 220b 	mla	r2, r9, fp, r2
 8007ec0:	4492      	add	sl, r2
 8007ec2:	b289      	uxth	r1, r1
 8007ec4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007ec8:	f84e 1b04 	str.w	r1, [lr], #4
 8007ecc:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007ed0:	f8be 1000 	ldrh.w	r1, [lr]
 8007ed4:	0c12      	lsrs	r2, r2, #16
 8007ed6:	fb09 1102 	mla	r1, r9, r2, r1
 8007eda:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007ede:	4567      	cmp	r7, ip
 8007ee0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007ee4:	d8e6      	bhi.n	8007eb4 <__multiply+0x10c>
 8007ee6:	9a01      	ldr	r2, [sp, #4]
 8007ee8:	50a9      	str	r1, [r5, r2]
 8007eea:	3504      	adds	r5, #4
 8007eec:	e79a      	b.n	8007e24 <__multiply+0x7c>
 8007eee:	3e01      	subs	r6, #1
 8007ef0:	e79c      	b.n	8007e2c <__multiply+0x84>
 8007ef2:	bf00      	nop
 8007ef4:	0800904f 	.word	0x0800904f
 8007ef8:	08009060 	.word	0x08009060

08007efc <__pow5mult>:
 8007efc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f00:	4615      	mov	r5, r2
 8007f02:	f012 0203 	ands.w	r2, r2, #3
 8007f06:	4606      	mov	r6, r0
 8007f08:	460f      	mov	r7, r1
 8007f0a:	d007      	beq.n	8007f1c <__pow5mult+0x20>
 8007f0c:	4c25      	ldr	r4, [pc, #148]	; (8007fa4 <__pow5mult+0xa8>)
 8007f0e:	3a01      	subs	r2, #1
 8007f10:	2300      	movs	r3, #0
 8007f12:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007f16:	f7ff fe9b 	bl	8007c50 <__multadd>
 8007f1a:	4607      	mov	r7, r0
 8007f1c:	10ad      	asrs	r5, r5, #2
 8007f1e:	d03d      	beq.n	8007f9c <__pow5mult+0xa0>
 8007f20:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007f22:	b97c      	cbnz	r4, 8007f44 <__pow5mult+0x48>
 8007f24:	2010      	movs	r0, #16
 8007f26:	f7ff fe1d 	bl	8007b64 <malloc>
 8007f2a:	4602      	mov	r2, r0
 8007f2c:	6270      	str	r0, [r6, #36]	; 0x24
 8007f2e:	b928      	cbnz	r0, 8007f3c <__pow5mult+0x40>
 8007f30:	4b1d      	ldr	r3, [pc, #116]	; (8007fa8 <__pow5mult+0xac>)
 8007f32:	481e      	ldr	r0, [pc, #120]	; (8007fac <__pow5mult+0xb0>)
 8007f34:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007f38:	f000 fd96 	bl	8008a68 <__assert_func>
 8007f3c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007f40:	6004      	str	r4, [r0, #0]
 8007f42:	60c4      	str	r4, [r0, #12]
 8007f44:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007f48:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007f4c:	b94c      	cbnz	r4, 8007f62 <__pow5mult+0x66>
 8007f4e:	f240 2171 	movw	r1, #625	; 0x271
 8007f52:	4630      	mov	r0, r6
 8007f54:	f7ff ff12 	bl	8007d7c <__i2b>
 8007f58:	2300      	movs	r3, #0
 8007f5a:	f8c8 0008 	str.w	r0, [r8, #8]
 8007f5e:	4604      	mov	r4, r0
 8007f60:	6003      	str	r3, [r0, #0]
 8007f62:	f04f 0900 	mov.w	r9, #0
 8007f66:	07eb      	lsls	r3, r5, #31
 8007f68:	d50a      	bpl.n	8007f80 <__pow5mult+0x84>
 8007f6a:	4639      	mov	r1, r7
 8007f6c:	4622      	mov	r2, r4
 8007f6e:	4630      	mov	r0, r6
 8007f70:	f7ff ff1a 	bl	8007da8 <__multiply>
 8007f74:	4639      	mov	r1, r7
 8007f76:	4680      	mov	r8, r0
 8007f78:	4630      	mov	r0, r6
 8007f7a:	f7ff fe47 	bl	8007c0c <_Bfree>
 8007f7e:	4647      	mov	r7, r8
 8007f80:	106d      	asrs	r5, r5, #1
 8007f82:	d00b      	beq.n	8007f9c <__pow5mult+0xa0>
 8007f84:	6820      	ldr	r0, [r4, #0]
 8007f86:	b938      	cbnz	r0, 8007f98 <__pow5mult+0x9c>
 8007f88:	4622      	mov	r2, r4
 8007f8a:	4621      	mov	r1, r4
 8007f8c:	4630      	mov	r0, r6
 8007f8e:	f7ff ff0b 	bl	8007da8 <__multiply>
 8007f92:	6020      	str	r0, [r4, #0]
 8007f94:	f8c0 9000 	str.w	r9, [r0]
 8007f98:	4604      	mov	r4, r0
 8007f9a:	e7e4      	b.n	8007f66 <__pow5mult+0x6a>
 8007f9c:	4638      	mov	r0, r7
 8007f9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007fa2:	bf00      	nop
 8007fa4:	080091b0 	.word	0x080091b0
 8007fa8:	08008fdd 	.word	0x08008fdd
 8007fac:	08009060 	.word	0x08009060

08007fb0 <__lshift>:
 8007fb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007fb4:	460c      	mov	r4, r1
 8007fb6:	6849      	ldr	r1, [r1, #4]
 8007fb8:	6923      	ldr	r3, [r4, #16]
 8007fba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007fbe:	68a3      	ldr	r3, [r4, #8]
 8007fc0:	4607      	mov	r7, r0
 8007fc2:	4691      	mov	r9, r2
 8007fc4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007fc8:	f108 0601 	add.w	r6, r8, #1
 8007fcc:	42b3      	cmp	r3, r6
 8007fce:	db0b      	blt.n	8007fe8 <__lshift+0x38>
 8007fd0:	4638      	mov	r0, r7
 8007fd2:	f7ff fddb 	bl	8007b8c <_Balloc>
 8007fd6:	4605      	mov	r5, r0
 8007fd8:	b948      	cbnz	r0, 8007fee <__lshift+0x3e>
 8007fda:	4602      	mov	r2, r0
 8007fdc:	4b2a      	ldr	r3, [pc, #168]	; (8008088 <__lshift+0xd8>)
 8007fde:	482b      	ldr	r0, [pc, #172]	; (800808c <__lshift+0xdc>)
 8007fe0:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007fe4:	f000 fd40 	bl	8008a68 <__assert_func>
 8007fe8:	3101      	adds	r1, #1
 8007fea:	005b      	lsls	r3, r3, #1
 8007fec:	e7ee      	b.n	8007fcc <__lshift+0x1c>
 8007fee:	2300      	movs	r3, #0
 8007ff0:	f100 0114 	add.w	r1, r0, #20
 8007ff4:	f100 0210 	add.w	r2, r0, #16
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	4553      	cmp	r3, sl
 8007ffc:	db37      	blt.n	800806e <__lshift+0xbe>
 8007ffe:	6920      	ldr	r0, [r4, #16]
 8008000:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008004:	f104 0314 	add.w	r3, r4, #20
 8008008:	f019 091f 	ands.w	r9, r9, #31
 800800c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008010:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008014:	d02f      	beq.n	8008076 <__lshift+0xc6>
 8008016:	f1c9 0e20 	rsb	lr, r9, #32
 800801a:	468a      	mov	sl, r1
 800801c:	f04f 0c00 	mov.w	ip, #0
 8008020:	681a      	ldr	r2, [r3, #0]
 8008022:	fa02 f209 	lsl.w	r2, r2, r9
 8008026:	ea42 020c 	orr.w	r2, r2, ip
 800802a:	f84a 2b04 	str.w	r2, [sl], #4
 800802e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008032:	4298      	cmp	r0, r3
 8008034:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008038:	d8f2      	bhi.n	8008020 <__lshift+0x70>
 800803a:	1b03      	subs	r3, r0, r4
 800803c:	3b15      	subs	r3, #21
 800803e:	f023 0303 	bic.w	r3, r3, #3
 8008042:	3304      	adds	r3, #4
 8008044:	f104 0215 	add.w	r2, r4, #21
 8008048:	4290      	cmp	r0, r2
 800804a:	bf38      	it	cc
 800804c:	2304      	movcc	r3, #4
 800804e:	f841 c003 	str.w	ip, [r1, r3]
 8008052:	f1bc 0f00 	cmp.w	ip, #0
 8008056:	d001      	beq.n	800805c <__lshift+0xac>
 8008058:	f108 0602 	add.w	r6, r8, #2
 800805c:	3e01      	subs	r6, #1
 800805e:	4638      	mov	r0, r7
 8008060:	612e      	str	r6, [r5, #16]
 8008062:	4621      	mov	r1, r4
 8008064:	f7ff fdd2 	bl	8007c0c <_Bfree>
 8008068:	4628      	mov	r0, r5
 800806a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800806e:	f842 0f04 	str.w	r0, [r2, #4]!
 8008072:	3301      	adds	r3, #1
 8008074:	e7c1      	b.n	8007ffa <__lshift+0x4a>
 8008076:	3904      	subs	r1, #4
 8008078:	f853 2b04 	ldr.w	r2, [r3], #4
 800807c:	f841 2f04 	str.w	r2, [r1, #4]!
 8008080:	4298      	cmp	r0, r3
 8008082:	d8f9      	bhi.n	8008078 <__lshift+0xc8>
 8008084:	e7ea      	b.n	800805c <__lshift+0xac>
 8008086:	bf00      	nop
 8008088:	0800904f 	.word	0x0800904f
 800808c:	08009060 	.word	0x08009060

08008090 <__mcmp>:
 8008090:	b530      	push	{r4, r5, lr}
 8008092:	6902      	ldr	r2, [r0, #16]
 8008094:	690c      	ldr	r4, [r1, #16]
 8008096:	1b12      	subs	r2, r2, r4
 8008098:	d10e      	bne.n	80080b8 <__mcmp+0x28>
 800809a:	f100 0314 	add.w	r3, r0, #20
 800809e:	3114      	adds	r1, #20
 80080a0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80080a4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80080a8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80080ac:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80080b0:	42a5      	cmp	r5, r4
 80080b2:	d003      	beq.n	80080bc <__mcmp+0x2c>
 80080b4:	d305      	bcc.n	80080c2 <__mcmp+0x32>
 80080b6:	2201      	movs	r2, #1
 80080b8:	4610      	mov	r0, r2
 80080ba:	bd30      	pop	{r4, r5, pc}
 80080bc:	4283      	cmp	r3, r0
 80080be:	d3f3      	bcc.n	80080a8 <__mcmp+0x18>
 80080c0:	e7fa      	b.n	80080b8 <__mcmp+0x28>
 80080c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80080c6:	e7f7      	b.n	80080b8 <__mcmp+0x28>

080080c8 <__mdiff>:
 80080c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080cc:	460c      	mov	r4, r1
 80080ce:	4606      	mov	r6, r0
 80080d0:	4611      	mov	r1, r2
 80080d2:	4620      	mov	r0, r4
 80080d4:	4690      	mov	r8, r2
 80080d6:	f7ff ffdb 	bl	8008090 <__mcmp>
 80080da:	1e05      	subs	r5, r0, #0
 80080dc:	d110      	bne.n	8008100 <__mdiff+0x38>
 80080de:	4629      	mov	r1, r5
 80080e0:	4630      	mov	r0, r6
 80080e2:	f7ff fd53 	bl	8007b8c <_Balloc>
 80080e6:	b930      	cbnz	r0, 80080f6 <__mdiff+0x2e>
 80080e8:	4b3a      	ldr	r3, [pc, #232]	; (80081d4 <__mdiff+0x10c>)
 80080ea:	4602      	mov	r2, r0
 80080ec:	f240 2132 	movw	r1, #562	; 0x232
 80080f0:	4839      	ldr	r0, [pc, #228]	; (80081d8 <__mdiff+0x110>)
 80080f2:	f000 fcb9 	bl	8008a68 <__assert_func>
 80080f6:	2301      	movs	r3, #1
 80080f8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80080fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008100:	bfa4      	itt	ge
 8008102:	4643      	movge	r3, r8
 8008104:	46a0      	movge	r8, r4
 8008106:	4630      	mov	r0, r6
 8008108:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800810c:	bfa6      	itte	ge
 800810e:	461c      	movge	r4, r3
 8008110:	2500      	movge	r5, #0
 8008112:	2501      	movlt	r5, #1
 8008114:	f7ff fd3a 	bl	8007b8c <_Balloc>
 8008118:	b920      	cbnz	r0, 8008124 <__mdiff+0x5c>
 800811a:	4b2e      	ldr	r3, [pc, #184]	; (80081d4 <__mdiff+0x10c>)
 800811c:	4602      	mov	r2, r0
 800811e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008122:	e7e5      	b.n	80080f0 <__mdiff+0x28>
 8008124:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008128:	6926      	ldr	r6, [r4, #16]
 800812a:	60c5      	str	r5, [r0, #12]
 800812c:	f104 0914 	add.w	r9, r4, #20
 8008130:	f108 0514 	add.w	r5, r8, #20
 8008134:	f100 0e14 	add.w	lr, r0, #20
 8008138:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800813c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008140:	f108 0210 	add.w	r2, r8, #16
 8008144:	46f2      	mov	sl, lr
 8008146:	2100      	movs	r1, #0
 8008148:	f859 3b04 	ldr.w	r3, [r9], #4
 800814c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008150:	fa1f f883 	uxth.w	r8, r3
 8008154:	fa11 f18b 	uxtah	r1, r1, fp
 8008158:	0c1b      	lsrs	r3, r3, #16
 800815a:	eba1 0808 	sub.w	r8, r1, r8
 800815e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008162:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008166:	fa1f f888 	uxth.w	r8, r8
 800816a:	1419      	asrs	r1, r3, #16
 800816c:	454e      	cmp	r6, r9
 800816e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008172:	f84a 3b04 	str.w	r3, [sl], #4
 8008176:	d8e7      	bhi.n	8008148 <__mdiff+0x80>
 8008178:	1b33      	subs	r3, r6, r4
 800817a:	3b15      	subs	r3, #21
 800817c:	f023 0303 	bic.w	r3, r3, #3
 8008180:	3304      	adds	r3, #4
 8008182:	3415      	adds	r4, #21
 8008184:	42a6      	cmp	r6, r4
 8008186:	bf38      	it	cc
 8008188:	2304      	movcc	r3, #4
 800818a:	441d      	add	r5, r3
 800818c:	4473      	add	r3, lr
 800818e:	469e      	mov	lr, r3
 8008190:	462e      	mov	r6, r5
 8008192:	4566      	cmp	r6, ip
 8008194:	d30e      	bcc.n	80081b4 <__mdiff+0xec>
 8008196:	f10c 0203 	add.w	r2, ip, #3
 800819a:	1b52      	subs	r2, r2, r5
 800819c:	f022 0203 	bic.w	r2, r2, #3
 80081a0:	3d03      	subs	r5, #3
 80081a2:	45ac      	cmp	ip, r5
 80081a4:	bf38      	it	cc
 80081a6:	2200      	movcc	r2, #0
 80081a8:	441a      	add	r2, r3
 80081aa:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80081ae:	b17b      	cbz	r3, 80081d0 <__mdiff+0x108>
 80081b0:	6107      	str	r7, [r0, #16]
 80081b2:	e7a3      	b.n	80080fc <__mdiff+0x34>
 80081b4:	f856 8b04 	ldr.w	r8, [r6], #4
 80081b8:	fa11 f288 	uxtah	r2, r1, r8
 80081bc:	1414      	asrs	r4, r2, #16
 80081be:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80081c2:	b292      	uxth	r2, r2
 80081c4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80081c8:	f84e 2b04 	str.w	r2, [lr], #4
 80081cc:	1421      	asrs	r1, r4, #16
 80081ce:	e7e0      	b.n	8008192 <__mdiff+0xca>
 80081d0:	3f01      	subs	r7, #1
 80081d2:	e7ea      	b.n	80081aa <__mdiff+0xe2>
 80081d4:	0800904f 	.word	0x0800904f
 80081d8:	08009060 	.word	0x08009060

080081dc <__d2b>:
 80081dc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80081e0:	4689      	mov	r9, r1
 80081e2:	2101      	movs	r1, #1
 80081e4:	ec57 6b10 	vmov	r6, r7, d0
 80081e8:	4690      	mov	r8, r2
 80081ea:	f7ff fccf 	bl	8007b8c <_Balloc>
 80081ee:	4604      	mov	r4, r0
 80081f0:	b930      	cbnz	r0, 8008200 <__d2b+0x24>
 80081f2:	4602      	mov	r2, r0
 80081f4:	4b25      	ldr	r3, [pc, #148]	; (800828c <__d2b+0xb0>)
 80081f6:	4826      	ldr	r0, [pc, #152]	; (8008290 <__d2b+0xb4>)
 80081f8:	f240 310a 	movw	r1, #778	; 0x30a
 80081fc:	f000 fc34 	bl	8008a68 <__assert_func>
 8008200:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008204:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008208:	bb35      	cbnz	r5, 8008258 <__d2b+0x7c>
 800820a:	2e00      	cmp	r6, #0
 800820c:	9301      	str	r3, [sp, #4]
 800820e:	d028      	beq.n	8008262 <__d2b+0x86>
 8008210:	4668      	mov	r0, sp
 8008212:	9600      	str	r6, [sp, #0]
 8008214:	f7ff fd82 	bl	8007d1c <__lo0bits>
 8008218:	9900      	ldr	r1, [sp, #0]
 800821a:	b300      	cbz	r0, 800825e <__d2b+0x82>
 800821c:	9a01      	ldr	r2, [sp, #4]
 800821e:	f1c0 0320 	rsb	r3, r0, #32
 8008222:	fa02 f303 	lsl.w	r3, r2, r3
 8008226:	430b      	orrs	r3, r1
 8008228:	40c2      	lsrs	r2, r0
 800822a:	6163      	str	r3, [r4, #20]
 800822c:	9201      	str	r2, [sp, #4]
 800822e:	9b01      	ldr	r3, [sp, #4]
 8008230:	61a3      	str	r3, [r4, #24]
 8008232:	2b00      	cmp	r3, #0
 8008234:	bf14      	ite	ne
 8008236:	2202      	movne	r2, #2
 8008238:	2201      	moveq	r2, #1
 800823a:	6122      	str	r2, [r4, #16]
 800823c:	b1d5      	cbz	r5, 8008274 <__d2b+0x98>
 800823e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008242:	4405      	add	r5, r0
 8008244:	f8c9 5000 	str.w	r5, [r9]
 8008248:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800824c:	f8c8 0000 	str.w	r0, [r8]
 8008250:	4620      	mov	r0, r4
 8008252:	b003      	add	sp, #12
 8008254:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008258:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800825c:	e7d5      	b.n	800820a <__d2b+0x2e>
 800825e:	6161      	str	r1, [r4, #20]
 8008260:	e7e5      	b.n	800822e <__d2b+0x52>
 8008262:	a801      	add	r0, sp, #4
 8008264:	f7ff fd5a 	bl	8007d1c <__lo0bits>
 8008268:	9b01      	ldr	r3, [sp, #4]
 800826a:	6163      	str	r3, [r4, #20]
 800826c:	2201      	movs	r2, #1
 800826e:	6122      	str	r2, [r4, #16]
 8008270:	3020      	adds	r0, #32
 8008272:	e7e3      	b.n	800823c <__d2b+0x60>
 8008274:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008278:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800827c:	f8c9 0000 	str.w	r0, [r9]
 8008280:	6918      	ldr	r0, [r3, #16]
 8008282:	f7ff fd2b 	bl	8007cdc <__hi0bits>
 8008286:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800828a:	e7df      	b.n	800824c <__d2b+0x70>
 800828c:	0800904f 	.word	0x0800904f
 8008290:	08009060 	.word	0x08009060

08008294 <_calloc_r>:
 8008294:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008296:	fba1 2402 	umull	r2, r4, r1, r2
 800829a:	b94c      	cbnz	r4, 80082b0 <_calloc_r+0x1c>
 800829c:	4611      	mov	r1, r2
 800829e:	9201      	str	r2, [sp, #4]
 80082a0:	f7fd ff2e 	bl	8006100 <_malloc_r>
 80082a4:	9a01      	ldr	r2, [sp, #4]
 80082a6:	4605      	mov	r5, r0
 80082a8:	b930      	cbnz	r0, 80082b8 <_calloc_r+0x24>
 80082aa:	4628      	mov	r0, r5
 80082ac:	b003      	add	sp, #12
 80082ae:	bd30      	pop	{r4, r5, pc}
 80082b0:	220c      	movs	r2, #12
 80082b2:	6002      	str	r2, [r0, #0]
 80082b4:	2500      	movs	r5, #0
 80082b6:	e7f8      	b.n	80082aa <_calloc_r+0x16>
 80082b8:	4621      	mov	r1, r4
 80082ba:	f7fd fef8 	bl	80060ae <memset>
 80082be:	e7f4      	b.n	80082aa <_calloc_r+0x16>

080082c0 <_free_r>:
 80082c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80082c2:	2900      	cmp	r1, #0
 80082c4:	d044      	beq.n	8008350 <_free_r+0x90>
 80082c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80082ca:	9001      	str	r0, [sp, #4]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	f1a1 0404 	sub.w	r4, r1, #4
 80082d2:	bfb8      	it	lt
 80082d4:	18e4      	addlt	r4, r4, r3
 80082d6:	f7ff fc4d 	bl	8007b74 <__malloc_lock>
 80082da:	4a1e      	ldr	r2, [pc, #120]	; (8008354 <_free_r+0x94>)
 80082dc:	9801      	ldr	r0, [sp, #4]
 80082de:	6813      	ldr	r3, [r2, #0]
 80082e0:	b933      	cbnz	r3, 80082f0 <_free_r+0x30>
 80082e2:	6063      	str	r3, [r4, #4]
 80082e4:	6014      	str	r4, [r2, #0]
 80082e6:	b003      	add	sp, #12
 80082e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80082ec:	f7ff bc48 	b.w	8007b80 <__malloc_unlock>
 80082f0:	42a3      	cmp	r3, r4
 80082f2:	d908      	bls.n	8008306 <_free_r+0x46>
 80082f4:	6825      	ldr	r5, [r4, #0]
 80082f6:	1961      	adds	r1, r4, r5
 80082f8:	428b      	cmp	r3, r1
 80082fa:	bf01      	itttt	eq
 80082fc:	6819      	ldreq	r1, [r3, #0]
 80082fe:	685b      	ldreq	r3, [r3, #4]
 8008300:	1949      	addeq	r1, r1, r5
 8008302:	6021      	streq	r1, [r4, #0]
 8008304:	e7ed      	b.n	80082e2 <_free_r+0x22>
 8008306:	461a      	mov	r2, r3
 8008308:	685b      	ldr	r3, [r3, #4]
 800830a:	b10b      	cbz	r3, 8008310 <_free_r+0x50>
 800830c:	42a3      	cmp	r3, r4
 800830e:	d9fa      	bls.n	8008306 <_free_r+0x46>
 8008310:	6811      	ldr	r1, [r2, #0]
 8008312:	1855      	adds	r5, r2, r1
 8008314:	42a5      	cmp	r5, r4
 8008316:	d10b      	bne.n	8008330 <_free_r+0x70>
 8008318:	6824      	ldr	r4, [r4, #0]
 800831a:	4421      	add	r1, r4
 800831c:	1854      	adds	r4, r2, r1
 800831e:	42a3      	cmp	r3, r4
 8008320:	6011      	str	r1, [r2, #0]
 8008322:	d1e0      	bne.n	80082e6 <_free_r+0x26>
 8008324:	681c      	ldr	r4, [r3, #0]
 8008326:	685b      	ldr	r3, [r3, #4]
 8008328:	6053      	str	r3, [r2, #4]
 800832a:	4421      	add	r1, r4
 800832c:	6011      	str	r1, [r2, #0]
 800832e:	e7da      	b.n	80082e6 <_free_r+0x26>
 8008330:	d902      	bls.n	8008338 <_free_r+0x78>
 8008332:	230c      	movs	r3, #12
 8008334:	6003      	str	r3, [r0, #0]
 8008336:	e7d6      	b.n	80082e6 <_free_r+0x26>
 8008338:	6825      	ldr	r5, [r4, #0]
 800833a:	1961      	adds	r1, r4, r5
 800833c:	428b      	cmp	r3, r1
 800833e:	bf04      	itt	eq
 8008340:	6819      	ldreq	r1, [r3, #0]
 8008342:	685b      	ldreq	r3, [r3, #4]
 8008344:	6063      	str	r3, [r4, #4]
 8008346:	bf04      	itt	eq
 8008348:	1949      	addeq	r1, r1, r5
 800834a:	6021      	streq	r1, [r4, #0]
 800834c:	6054      	str	r4, [r2, #4]
 800834e:	e7ca      	b.n	80082e6 <_free_r+0x26>
 8008350:	b003      	add	sp, #12
 8008352:	bd30      	pop	{r4, r5, pc}
 8008354:	200043c4 	.word	0x200043c4

08008358 <__ssputs_r>:
 8008358:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800835c:	688e      	ldr	r6, [r1, #8]
 800835e:	429e      	cmp	r6, r3
 8008360:	4682      	mov	sl, r0
 8008362:	460c      	mov	r4, r1
 8008364:	4690      	mov	r8, r2
 8008366:	461f      	mov	r7, r3
 8008368:	d838      	bhi.n	80083dc <__ssputs_r+0x84>
 800836a:	898a      	ldrh	r2, [r1, #12]
 800836c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008370:	d032      	beq.n	80083d8 <__ssputs_r+0x80>
 8008372:	6825      	ldr	r5, [r4, #0]
 8008374:	6909      	ldr	r1, [r1, #16]
 8008376:	eba5 0901 	sub.w	r9, r5, r1
 800837a:	6965      	ldr	r5, [r4, #20]
 800837c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008380:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008384:	3301      	adds	r3, #1
 8008386:	444b      	add	r3, r9
 8008388:	106d      	asrs	r5, r5, #1
 800838a:	429d      	cmp	r5, r3
 800838c:	bf38      	it	cc
 800838e:	461d      	movcc	r5, r3
 8008390:	0553      	lsls	r3, r2, #21
 8008392:	d531      	bpl.n	80083f8 <__ssputs_r+0xa0>
 8008394:	4629      	mov	r1, r5
 8008396:	f7fd feb3 	bl	8006100 <_malloc_r>
 800839a:	4606      	mov	r6, r0
 800839c:	b950      	cbnz	r0, 80083b4 <__ssputs_r+0x5c>
 800839e:	230c      	movs	r3, #12
 80083a0:	f8ca 3000 	str.w	r3, [sl]
 80083a4:	89a3      	ldrh	r3, [r4, #12]
 80083a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083aa:	81a3      	strh	r3, [r4, #12]
 80083ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80083b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083b4:	6921      	ldr	r1, [r4, #16]
 80083b6:	464a      	mov	r2, r9
 80083b8:	f7fd fe6b 	bl	8006092 <memcpy>
 80083bc:	89a3      	ldrh	r3, [r4, #12]
 80083be:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80083c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083c6:	81a3      	strh	r3, [r4, #12]
 80083c8:	6126      	str	r6, [r4, #16]
 80083ca:	6165      	str	r5, [r4, #20]
 80083cc:	444e      	add	r6, r9
 80083ce:	eba5 0509 	sub.w	r5, r5, r9
 80083d2:	6026      	str	r6, [r4, #0]
 80083d4:	60a5      	str	r5, [r4, #8]
 80083d6:	463e      	mov	r6, r7
 80083d8:	42be      	cmp	r6, r7
 80083da:	d900      	bls.n	80083de <__ssputs_r+0x86>
 80083dc:	463e      	mov	r6, r7
 80083de:	6820      	ldr	r0, [r4, #0]
 80083e0:	4632      	mov	r2, r6
 80083e2:	4641      	mov	r1, r8
 80083e4:	f000 fbe8 	bl	8008bb8 <memmove>
 80083e8:	68a3      	ldr	r3, [r4, #8]
 80083ea:	1b9b      	subs	r3, r3, r6
 80083ec:	60a3      	str	r3, [r4, #8]
 80083ee:	6823      	ldr	r3, [r4, #0]
 80083f0:	4433      	add	r3, r6
 80083f2:	6023      	str	r3, [r4, #0]
 80083f4:	2000      	movs	r0, #0
 80083f6:	e7db      	b.n	80083b0 <__ssputs_r+0x58>
 80083f8:	462a      	mov	r2, r5
 80083fa:	f000 fbf7 	bl	8008bec <_realloc_r>
 80083fe:	4606      	mov	r6, r0
 8008400:	2800      	cmp	r0, #0
 8008402:	d1e1      	bne.n	80083c8 <__ssputs_r+0x70>
 8008404:	6921      	ldr	r1, [r4, #16]
 8008406:	4650      	mov	r0, sl
 8008408:	f7ff ff5a 	bl	80082c0 <_free_r>
 800840c:	e7c7      	b.n	800839e <__ssputs_r+0x46>
	...

08008410 <_svfiprintf_r>:
 8008410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008414:	4698      	mov	r8, r3
 8008416:	898b      	ldrh	r3, [r1, #12]
 8008418:	061b      	lsls	r3, r3, #24
 800841a:	b09d      	sub	sp, #116	; 0x74
 800841c:	4607      	mov	r7, r0
 800841e:	460d      	mov	r5, r1
 8008420:	4614      	mov	r4, r2
 8008422:	d50e      	bpl.n	8008442 <_svfiprintf_r+0x32>
 8008424:	690b      	ldr	r3, [r1, #16]
 8008426:	b963      	cbnz	r3, 8008442 <_svfiprintf_r+0x32>
 8008428:	2140      	movs	r1, #64	; 0x40
 800842a:	f7fd fe69 	bl	8006100 <_malloc_r>
 800842e:	6028      	str	r0, [r5, #0]
 8008430:	6128      	str	r0, [r5, #16]
 8008432:	b920      	cbnz	r0, 800843e <_svfiprintf_r+0x2e>
 8008434:	230c      	movs	r3, #12
 8008436:	603b      	str	r3, [r7, #0]
 8008438:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800843c:	e0d1      	b.n	80085e2 <_svfiprintf_r+0x1d2>
 800843e:	2340      	movs	r3, #64	; 0x40
 8008440:	616b      	str	r3, [r5, #20]
 8008442:	2300      	movs	r3, #0
 8008444:	9309      	str	r3, [sp, #36]	; 0x24
 8008446:	2320      	movs	r3, #32
 8008448:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800844c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008450:	2330      	movs	r3, #48	; 0x30
 8008452:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80085fc <_svfiprintf_r+0x1ec>
 8008456:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800845a:	f04f 0901 	mov.w	r9, #1
 800845e:	4623      	mov	r3, r4
 8008460:	469a      	mov	sl, r3
 8008462:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008466:	b10a      	cbz	r2, 800846c <_svfiprintf_r+0x5c>
 8008468:	2a25      	cmp	r2, #37	; 0x25
 800846a:	d1f9      	bne.n	8008460 <_svfiprintf_r+0x50>
 800846c:	ebba 0b04 	subs.w	fp, sl, r4
 8008470:	d00b      	beq.n	800848a <_svfiprintf_r+0x7a>
 8008472:	465b      	mov	r3, fp
 8008474:	4622      	mov	r2, r4
 8008476:	4629      	mov	r1, r5
 8008478:	4638      	mov	r0, r7
 800847a:	f7ff ff6d 	bl	8008358 <__ssputs_r>
 800847e:	3001      	adds	r0, #1
 8008480:	f000 80aa 	beq.w	80085d8 <_svfiprintf_r+0x1c8>
 8008484:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008486:	445a      	add	r2, fp
 8008488:	9209      	str	r2, [sp, #36]	; 0x24
 800848a:	f89a 3000 	ldrb.w	r3, [sl]
 800848e:	2b00      	cmp	r3, #0
 8008490:	f000 80a2 	beq.w	80085d8 <_svfiprintf_r+0x1c8>
 8008494:	2300      	movs	r3, #0
 8008496:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800849a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800849e:	f10a 0a01 	add.w	sl, sl, #1
 80084a2:	9304      	str	r3, [sp, #16]
 80084a4:	9307      	str	r3, [sp, #28]
 80084a6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80084aa:	931a      	str	r3, [sp, #104]	; 0x68
 80084ac:	4654      	mov	r4, sl
 80084ae:	2205      	movs	r2, #5
 80084b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084b4:	4851      	ldr	r0, [pc, #324]	; (80085fc <_svfiprintf_r+0x1ec>)
 80084b6:	f7f7 fe9b 	bl	80001f0 <memchr>
 80084ba:	9a04      	ldr	r2, [sp, #16]
 80084bc:	b9d8      	cbnz	r0, 80084f6 <_svfiprintf_r+0xe6>
 80084be:	06d0      	lsls	r0, r2, #27
 80084c0:	bf44      	itt	mi
 80084c2:	2320      	movmi	r3, #32
 80084c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80084c8:	0711      	lsls	r1, r2, #28
 80084ca:	bf44      	itt	mi
 80084cc:	232b      	movmi	r3, #43	; 0x2b
 80084ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80084d2:	f89a 3000 	ldrb.w	r3, [sl]
 80084d6:	2b2a      	cmp	r3, #42	; 0x2a
 80084d8:	d015      	beq.n	8008506 <_svfiprintf_r+0xf6>
 80084da:	9a07      	ldr	r2, [sp, #28]
 80084dc:	4654      	mov	r4, sl
 80084de:	2000      	movs	r0, #0
 80084e0:	f04f 0c0a 	mov.w	ip, #10
 80084e4:	4621      	mov	r1, r4
 80084e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80084ea:	3b30      	subs	r3, #48	; 0x30
 80084ec:	2b09      	cmp	r3, #9
 80084ee:	d94e      	bls.n	800858e <_svfiprintf_r+0x17e>
 80084f0:	b1b0      	cbz	r0, 8008520 <_svfiprintf_r+0x110>
 80084f2:	9207      	str	r2, [sp, #28]
 80084f4:	e014      	b.n	8008520 <_svfiprintf_r+0x110>
 80084f6:	eba0 0308 	sub.w	r3, r0, r8
 80084fa:	fa09 f303 	lsl.w	r3, r9, r3
 80084fe:	4313      	orrs	r3, r2
 8008500:	9304      	str	r3, [sp, #16]
 8008502:	46a2      	mov	sl, r4
 8008504:	e7d2      	b.n	80084ac <_svfiprintf_r+0x9c>
 8008506:	9b03      	ldr	r3, [sp, #12]
 8008508:	1d19      	adds	r1, r3, #4
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	9103      	str	r1, [sp, #12]
 800850e:	2b00      	cmp	r3, #0
 8008510:	bfbb      	ittet	lt
 8008512:	425b      	neglt	r3, r3
 8008514:	f042 0202 	orrlt.w	r2, r2, #2
 8008518:	9307      	strge	r3, [sp, #28]
 800851a:	9307      	strlt	r3, [sp, #28]
 800851c:	bfb8      	it	lt
 800851e:	9204      	strlt	r2, [sp, #16]
 8008520:	7823      	ldrb	r3, [r4, #0]
 8008522:	2b2e      	cmp	r3, #46	; 0x2e
 8008524:	d10c      	bne.n	8008540 <_svfiprintf_r+0x130>
 8008526:	7863      	ldrb	r3, [r4, #1]
 8008528:	2b2a      	cmp	r3, #42	; 0x2a
 800852a:	d135      	bne.n	8008598 <_svfiprintf_r+0x188>
 800852c:	9b03      	ldr	r3, [sp, #12]
 800852e:	1d1a      	adds	r2, r3, #4
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	9203      	str	r2, [sp, #12]
 8008534:	2b00      	cmp	r3, #0
 8008536:	bfb8      	it	lt
 8008538:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800853c:	3402      	adds	r4, #2
 800853e:	9305      	str	r3, [sp, #20]
 8008540:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800860c <_svfiprintf_r+0x1fc>
 8008544:	7821      	ldrb	r1, [r4, #0]
 8008546:	2203      	movs	r2, #3
 8008548:	4650      	mov	r0, sl
 800854a:	f7f7 fe51 	bl	80001f0 <memchr>
 800854e:	b140      	cbz	r0, 8008562 <_svfiprintf_r+0x152>
 8008550:	2340      	movs	r3, #64	; 0x40
 8008552:	eba0 000a 	sub.w	r0, r0, sl
 8008556:	fa03 f000 	lsl.w	r0, r3, r0
 800855a:	9b04      	ldr	r3, [sp, #16]
 800855c:	4303      	orrs	r3, r0
 800855e:	3401      	adds	r4, #1
 8008560:	9304      	str	r3, [sp, #16]
 8008562:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008566:	4826      	ldr	r0, [pc, #152]	; (8008600 <_svfiprintf_r+0x1f0>)
 8008568:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800856c:	2206      	movs	r2, #6
 800856e:	f7f7 fe3f 	bl	80001f0 <memchr>
 8008572:	2800      	cmp	r0, #0
 8008574:	d038      	beq.n	80085e8 <_svfiprintf_r+0x1d8>
 8008576:	4b23      	ldr	r3, [pc, #140]	; (8008604 <_svfiprintf_r+0x1f4>)
 8008578:	bb1b      	cbnz	r3, 80085c2 <_svfiprintf_r+0x1b2>
 800857a:	9b03      	ldr	r3, [sp, #12]
 800857c:	3307      	adds	r3, #7
 800857e:	f023 0307 	bic.w	r3, r3, #7
 8008582:	3308      	adds	r3, #8
 8008584:	9303      	str	r3, [sp, #12]
 8008586:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008588:	4433      	add	r3, r6
 800858a:	9309      	str	r3, [sp, #36]	; 0x24
 800858c:	e767      	b.n	800845e <_svfiprintf_r+0x4e>
 800858e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008592:	460c      	mov	r4, r1
 8008594:	2001      	movs	r0, #1
 8008596:	e7a5      	b.n	80084e4 <_svfiprintf_r+0xd4>
 8008598:	2300      	movs	r3, #0
 800859a:	3401      	adds	r4, #1
 800859c:	9305      	str	r3, [sp, #20]
 800859e:	4619      	mov	r1, r3
 80085a0:	f04f 0c0a 	mov.w	ip, #10
 80085a4:	4620      	mov	r0, r4
 80085a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80085aa:	3a30      	subs	r2, #48	; 0x30
 80085ac:	2a09      	cmp	r2, #9
 80085ae:	d903      	bls.n	80085b8 <_svfiprintf_r+0x1a8>
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d0c5      	beq.n	8008540 <_svfiprintf_r+0x130>
 80085b4:	9105      	str	r1, [sp, #20]
 80085b6:	e7c3      	b.n	8008540 <_svfiprintf_r+0x130>
 80085b8:	fb0c 2101 	mla	r1, ip, r1, r2
 80085bc:	4604      	mov	r4, r0
 80085be:	2301      	movs	r3, #1
 80085c0:	e7f0      	b.n	80085a4 <_svfiprintf_r+0x194>
 80085c2:	ab03      	add	r3, sp, #12
 80085c4:	9300      	str	r3, [sp, #0]
 80085c6:	462a      	mov	r2, r5
 80085c8:	4b0f      	ldr	r3, [pc, #60]	; (8008608 <_svfiprintf_r+0x1f8>)
 80085ca:	a904      	add	r1, sp, #16
 80085cc:	4638      	mov	r0, r7
 80085ce:	f7fd feab 	bl	8006328 <_printf_float>
 80085d2:	1c42      	adds	r2, r0, #1
 80085d4:	4606      	mov	r6, r0
 80085d6:	d1d6      	bne.n	8008586 <_svfiprintf_r+0x176>
 80085d8:	89ab      	ldrh	r3, [r5, #12]
 80085da:	065b      	lsls	r3, r3, #25
 80085dc:	f53f af2c 	bmi.w	8008438 <_svfiprintf_r+0x28>
 80085e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80085e2:	b01d      	add	sp, #116	; 0x74
 80085e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085e8:	ab03      	add	r3, sp, #12
 80085ea:	9300      	str	r3, [sp, #0]
 80085ec:	462a      	mov	r2, r5
 80085ee:	4b06      	ldr	r3, [pc, #24]	; (8008608 <_svfiprintf_r+0x1f8>)
 80085f0:	a904      	add	r1, sp, #16
 80085f2:	4638      	mov	r0, r7
 80085f4:	f7fe f93c 	bl	8006870 <_printf_i>
 80085f8:	e7eb      	b.n	80085d2 <_svfiprintf_r+0x1c2>
 80085fa:	bf00      	nop
 80085fc:	080091bc 	.word	0x080091bc
 8008600:	080091c6 	.word	0x080091c6
 8008604:	08006329 	.word	0x08006329
 8008608:	08008359 	.word	0x08008359
 800860c:	080091c2 	.word	0x080091c2

08008610 <__sfputc_r>:
 8008610:	6893      	ldr	r3, [r2, #8]
 8008612:	3b01      	subs	r3, #1
 8008614:	2b00      	cmp	r3, #0
 8008616:	b410      	push	{r4}
 8008618:	6093      	str	r3, [r2, #8]
 800861a:	da08      	bge.n	800862e <__sfputc_r+0x1e>
 800861c:	6994      	ldr	r4, [r2, #24]
 800861e:	42a3      	cmp	r3, r4
 8008620:	db01      	blt.n	8008626 <__sfputc_r+0x16>
 8008622:	290a      	cmp	r1, #10
 8008624:	d103      	bne.n	800862e <__sfputc_r+0x1e>
 8008626:	f85d 4b04 	ldr.w	r4, [sp], #4
 800862a:	f000 b95d 	b.w	80088e8 <__swbuf_r>
 800862e:	6813      	ldr	r3, [r2, #0]
 8008630:	1c58      	adds	r0, r3, #1
 8008632:	6010      	str	r0, [r2, #0]
 8008634:	7019      	strb	r1, [r3, #0]
 8008636:	4608      	mov	r0, r1
 8008638:	f85d 4b04 	ldr.w	r4, [sp], #4
 800863c:	4770      	bx	lr

0800863e <__sfputs_r>:
 800863e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008640:	4606      	mov	r6, r0
 8008642:	460f      	mov	r7, r1
 8008644:	4614      	mov	r4, r2
 8008646:	18d5      	adds	r5, r2, r3
 8008648:	42ac      	cmp	r4, r5
 800864a:	d101      	bne.n	8008650 <__sfputs_r+0x12>
 800864c:	2000      	movs	r0, #0
 800864e:	e007      	b.n	8008660 <__sfputs_r+0x22>
 8008650:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008654:	463a      	mov	r2, r7
 8008656:	4630      	mov	r0, r6
 8008658:	f7ff ffda 	bl	8008610 <__sfputc_r>
 800865c:	1c43      	adds	r3, r0, #1
 800865e:	d1f3      	bne.n	8008648 <__sfputs_r+0xa>
 8008660:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008664 <_vfiprintf_r>:
 8008664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008668:	460d      	mov	r5, r1
 800866a:	b09d      	sub	sp, #116	; 0x74
 800866c:	4614      	mov	r4, r2
 800866e:	4698      	mov	r8, r3
 8008670:	4606      	mov	r6, r0
 8008672:	b118      	cbz	r0, 800867c <_vfiprintf_r+0x18>
 8008674:	6983      	ldr	r3, [r0, #24]
 8008676:	b90b      	cbnz	r3, 800867c <_vfiprintf_r+0x18>
 8008678:	f7fd fc46 	bl	8005f08 <__sinit>
 800867c:	4b89      	ldr	r3, [pc, #548]	; (80088a4 <_vfiprintf_r+0x240>)
 800867e:	429d      	cmp	r5, r3
 8008680:	d11b      	bne.n	80086ba <_vfiprintf_r+0x56>
 8008682:	6875      	ldr	r5, [r6, #4]
 8008684:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008686:	07d9      	lsls	r1, r3, #31
 8008688:	d405      	bmi.n	8008696 <_vfiprintf_r+0x32>
 800868a:	89ab      	ldrh	r3, [r5, #12]
 800868c:	059a      	lsls	r2, r3, #22
 800868e:	d402      	bmi.n	8008696 <_vfiprintf_r+0x32>
 8008690:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008692:	f7fd fcfc 	bl	800608e <__retarget_lock_acquire_recursive>
 8008696:	89ab      	ldrh	r3, [r5, #12]
 8008698:	071b      	lsls	r3, r3, #28
 800869a:	d501      	bpl.n	80086a0 <_vfiprintf_r+0x3c>
 800869c:	692b      	ldr	r3, [r5, #16]
 800869e:	b9eb      	cbnz	r3, 80086dc <_vfiprintf_r+0x78>
 80086a0:	4629      	mov	r1, r5
 80086a2:	4630      	mov	r0, r6
 80086a4:	f000 f972 	bl	800898c <__swsetup_r>
 80086a8:	b1c0      	cbz	r0, 80086dc <_vfiprintf_r+0x78>
 80086aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80086ac:	07dc      	lsls	r4, r3, #31
 80086ae:	d50e      	bpl.n	80086ce <_vfiprintf_r+0x6a>
 80086b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80086b4:	b01d      	add	sp, #116	; 0x74
 80086b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086ba:	4b7b      	ldr	r3, [pc, #492]	; (80088a8 <_vfiprintf_r+0x244>)
 80086bc:	429d      	cmp	r5, r3
 80086be:	d101      	bne.n	80086c4 <_vfiprintf_r+0x60>
 80086c0:	68b5      	ldr	r5, [r6, #8]
 80086c2:	e7df      	b.n	8008684 <_vfiprintf_r+0x20>
 80086c4:	4b79      	ldr	r3, [pc, #484]	; (80088ac <_vfiprintf_r+0x248>)
 80086c6:	429d      	cmp	r5, r3
 80086c8:	bf08      	it	eq
 80086ca:	68f5      	ldreq	r5, [r6, #12]
 80086cc:	e7da      	b.n	8008684 <_vfiprintf_r+0x20>
 80086ce:	89ab      	ldrh	r3, [r5, #12]
 80086d0:	0598      	lsls	r0, r3, #22
 80086d2:	d4ed      	bmi.n	80086b0 <_vfiprintf_r+0x4c>
 80086d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80086d6:	f7fd fcdb 	bl	8006090 <__retarget_lock_release_recursive>
 80086da:	e7e9      	b.n	80086b0 <_vfiprintf_r+0x4c>
 80086dc:	2300      	movs	r3, #0
 80086de:	9309      	str	r3, [sp, #36]	; 0x24
 80086e0:	2320      	movs	r3, #32
 80086e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80086e6:	f8cd 800c 	str.w	r8, [sp, #12]
 80086ea:	2330      	movs	r3, #48	; 0x30
 80086ec:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80088b0 <_vfiprintf_r+0x24c>
 80086f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80086f4:	f04f 0901 	mov.w	r9, #1
 80086f8:	4623      	mov	r3, r4
 80086fa:	469a      	mov	sl, r3
 80086fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008700:	b10a      	cbz	r2, 8008706 <_vfiprintf_r+0xa2>
 8008702:	2a25      	cmp	r2, #37	; 0x25
 8008704:	d1f9      	bne.n	80086fa <_vfiprintf_r+0x96>
 8008706:	ebba 0b04 	subs.w	fp, sl, r4
 800870a:	d00b      	beq.n	8008724 <_vfiprintf_r+0xc0>
 800870c:	465b      	mov	r3, fp
 800870e:	4622      	mov	r2, r4
 8008710:	4629      	mov	r1, r5
 8008712:	4630      	mov	r0, r6
 8008714:	f7ff ff93 	bl	800863e <__sfputs_r>
 8008718:	3001      	adds	r0, #1
 800871a:	f000 80aa 	beq.w	8008872 <_vfiprintf_r+0x20e>
 800871e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008720:	445a      	add	r2, fp
 8008722:	9209      	str	r2, [sp, #36]	; 0x24
 8008724:	f89a 3000 	ldrb.w	r3, [sl]
 8008728:	2b00      	cmp	r3, #0
 800872a:	f000 80a2 	beq.w	8008872 <_vfiprintf_r+0x20e>
 800872e:	2300      	movs	r3, #0
 8008730:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008734:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008738:	f10a 0a01 	add.w	sl, sl, #1
 800873c:	9304      	str	r3, [sp, #16]
 800873e:	9307      	str	r3, [sp, #28]
 8008740:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008744:	931a      	str	r3, [sp, #104]	; 0x68
 8008746:	4654      	mov	r4, sl
 8008748:	2205      	movs	r2, #5
 800874a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800874e:	4858      	ldr	r0, [pc, #352]	; (80088b0 <_vfiprintf_r+0x24c>)
 8008750:	f7f7 fd4e 	bl	80001f0 <memchr>
 8008754:	9a04      	ldr	r2, [sp, #16]
 8008756:	b9d8      	cbnz	r0, 8008790 <_vfiprintf_r+0x12c>
 8008758:	06d1      	lsls	r1, r2, #27
 800875a:	bf44      	itt	mi
 800875c:	2320      	movmi	r3, #32
 800875e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008762:	0713      	lsls	r3, r2, #28
 8008764:	bf44      	itt	mi
 8008766:	232b      	movmi	r3, #43	; 0x2b
 8008768:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800876c:	f89a 3000 	ldrb.w	r3, [sl]
 8008770:	2b2a      	cmp	r3, #42	; 0x2a
 8008772:	d015      	beq.n	80087a0 <_vfiprintf_r+0x13c>
 8008774:	9a07      	ldr	r2, [sp, #28]
 8008776:	4654      	mov	r4, sl
 8008778:	2000      	movs	r0, #0
 800877a:	f04f 0c0a 	mov.w	ip, #10
 800877e:	4621      	mov	r1, r4
 8008780:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008784:	3b30      	subs	r3, #48	; 0x30
 8008786:	2b09      	cmp	r3, #9
 8008788:	d94e      	bls.n	8008828 <_vfiprintf_r+0x1c4>
 800878a:	b1b0      	cbz	r0, 80087ba <_vfiprintf_r+0x156>
 800878c:	9207      	str	r2, [sp, #28]
 800878e:	e014      	b.n	80087ba <_vfiprintf_r+0x156>
 8008790:	eba0 0308 	sub.w	r3, r0, r8
 8008794:	fa09 f303 	lsl.w	r3, r9, r3
 8008798:	4313      	orrs	r3, r2
 800879a:	9304      	str	r3, [sp, #16]
 800879c:	46a2      	mov	sl, r4
 800879e:	e7d2      	b.n	8008746 <_vfiprintf_r+0xe2>
 80087a0:	9b03      	ldr	r3, [sp, #12]
 80087a2:	1d19      	adds	r1, r3, #4
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	9103      	str	r1, [sp, #12]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	bfbb      	ittet	lt
 80087ac:	425b      	neglt	r3, r3
 80087ae:	f042 0202 	orrlt.w	r2, r2, #2
 80087b2:	9307      	strge	r3, [sp, #28]
 80087b4:	9307      	strlt	r3, [sp, #28]
 80087b6:	bfb8      	it	lt
 80087b8:	9204      	strlt	r2, [sp, #16]
 80087ba:	7823      	ldrb	r3, [r4, #0]
 80087bc:	2b2e      	cmp	r3, #46	; 0x2e
 80087be:	d10c      	bne.n	80087da <_vfiprintf_r+0x176>
 80087c0:	7863      	ldrb	r3, [r4, #1]
 80087c2:	2b2a      	cmp	r3, #42	; 0x2a
 80087c4:	d135      	bne.n	8008832 <_vfiprintf_r+0x1ce>
 80087c6:	9b03      	ldr	r3, [sp, #12]
 80087c8:	1d1a      	adds	r2, r3, #4
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	9203      	str	r2, [sp, #12]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	bfb8      	it	lt
 80087d2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80087d6:	3402      	adds	r4, #2
 80087d8:	9305      	str	r3, [sp, #20]
 80087da:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80088c0 <_vfiprintf_r+0x25c>
 80087de:	7821      	ldrb	r1, [r4, #0]
 80087e0:	2203      	movs	r2, #3
 80087e2:	4650      	mov	r0, sl
 80087e4:	f7f7 fd04 	bl	80001f0 <memchr>
 80087e8:	b140      	cbz	r0, 80087fc <_vfiprintf_r+0x198>
 80087ea:	2340      	movs	r3, #64	; 0x40
 80087ec:	eba0 000a 	sub.w	r0, r0, sl
 80087f0:	fa03 f000 	lsl.w	r0, r3, r0
 80087f4:	9b04      	ldr	r3, [sp, #16]
 80087f6:	4303      	orrs	r3, r0
 80087f8:	3401      	adds	r4, #1
 80087fa:	9304      	str	r3, [sp, #16]
 80087fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008800:	482c      	ldr	r0, [pc, #176]	; (80088b4 <_vfiprintf_r+0x250>)
 8008802:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008806:	2206      	movs	r2, #6
 8008808:	f7f7 fcf2 	bl	80001f0 <memchr>
 800880c:	2800      	cmp	r0, #0
 800880e:	d03f      	beq.n	8008890 <_vfiprintf_r+0x22c>
 8008810:	4b29      	ldr	r3, [pc, #164]	; (80088b8 <_vfiprintf_r+0x254>)
 8008812:	bb1b      	cbnz	r3, 800885c <_vfiprintf_r+0x1f8>
 8008814:	9b03      	ldr	r3, [sp, #12]
 8008816:	3307      	adds	r3, #7
 8008818:	f023 0307 	bic.w	r3, r3, #7
 800881c:	3308      	adds	r3, #8
 800881e:	9303      	str	r3, [sp, #12]
 8008820:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008822:	443b      	add	r3, r7
 8008824:	9309      	str	r3, [sp, #36]	; 0x24
 8008826:	e767      	b.n	80086f8 <_vfiprintf_r+0x94>
 8008828:	fb0c 3202 	mla	r2, ip, r2, r3
 800882c:	460c      	mov	r4, r1
 800882e:	2001      	movs	r0, #1
 8008830:	e7a5      	b.n	800877e <_vfiprintf_r+0x11a>
 8008832:	2300      	movs	r3, #0
 8008834:	3401      	adds	r4, #1
 8008836:	9305      	str	r3, [sp, #20]
 8008838:	4619      	mov	r1, r3
 800883a:	f04f 0c0a 	mov.w	ip, #10
 800883e:	4620      	mov	r0, r4
 8008840:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008844:	3a30      	subs	r2, #48	; 0x30
 8008846:	2a09      	cmp	r2, #9
 8008848:	d903      	bls.n	8008852 <_vfiprintf_r+0x1ee>
 800884a:	2b00      	cmp	r3, #0
 800884c:	d0c5      	beq.n	80087da <_vfiprintf_r+0x176>
 800884e:	9105      	str	r1, [sp, #20]
 8008850:	e7c3      	b.n	80087da <_vfiprintf_r+0x176>
 8008852:	fb0c 2101 	mla	r1, ip, r1, r2
 8008856:	4604      	mov	r4, r0
 8008858:	2301      	movs	r3, #1
 800885a:	e7f0      	b.n	800883e <_vfiprintf_r+0x1da>
 800885c:	ab03      	add	r3, sp, #12
 800885e:	9300      	str	r3, [sp, #0]
 8008860:	462a      	mov	r2, r5
 8008862:	4b16      	ldr	r3, [pc, #88]	; (80088bc <_vfiprintf_r+0x258>)
 8008864:	a904      	add	r1, sp, #16
 8008866:	4630      	mov	r0, r6
 8008868:	f7fd fd5e 	bl	8006328 <_printf_float>
 800886c:	4607      	mov	r7, r0
 800886e:	1c78      	adds	r0, r7, #1
 8008870:	d1d6      	bne.n	8008820 <_vfiprintf_r+0x1bc>
 8008872:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008874:	07d9      	lsls	r1, r3, #31
 8008876:	d405      	bmi.n	8008884 <_vfiprintf_r+0x220>
 8008878:	89ab      	ldrh	r3, [r5, #12]
 800887a:	059a      	lsls	r2, r3, #22
 800887c:	d402      	bmi.n	8008884 <_vfiprintf_r+0x220>
 800887e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008880:	f7fd fc06 	bl	8006090 <__retarget_lock_release_recursive>
 8008884:	89ab      	ldrh	r3, [r5, #12]
 8008886:	065b      	lsls	r3, r3, #25
 8008888:	f53f af12 	bmi.w	80086b0 <_vfiprintf_r+0x4c>
 800888c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800888e:	e711      	b.n	80086b4 <_vfiprintf_r+0x50>
 8008890:	ab03      	add	r3, sp, #12
 8008892:	9300      	str	r3, [sp, #0]
 8008894:	462a      	mov	r2, r5
 8008896:	4b09      	ldr	r3, [pc, #36]	; (80088bc <_vfiprintf_r+0x258>)
 8008898:	a904      	add	r1, sp, #16
 800889a:	4630      	mov	r0, r6
 800889c:	f7fd ffe8 	bl	8006870 <_printf_i>
 80088a0:	e7e4      	b.n	800886c <_vfiprintf_r+0x208>
 80088a2:	bf00      	nop
 80088a4:	08008f58 	.word	0x08008f58
 80088a8:	08008f78 	.word	0x08008f78
 80088ac:	08008f38 	.word	0x08008f38
 80088b0:	080091bc 	.word	0x080091bc
 80088b4:	080091c6 	.word	0x080091c6
 80088b8:	08006329 	.word	0x08006329
 80088bc:	0800863f 	.word	0x0800863f
 80088c0:	080091c2 	.word	0x080091c2

080088c4 <_read_r>:
 80088c4:	b538      	push	{r3, r4, r5, lr}
 80088c6:	4d07      	ldr	r5, [pc, #28]	; (80088e4 <_read_r+0x20>)
 80088c8:	4604      	mov	r4, r0
 80088ca:	4608      	mov	r0, r1
 80088cc:	4611      	mov	r1, r2
 80088ce:	2200      	movs	r2, #0
 80088d0:	602a      	str	r2, [r5, #0]
 80088d2:	461a      	mov	r2, r3
 80088d4:	f7f9 f95a 	bl	8001b8c <_read>
 80088d8:	1c43      	adds	r3, r0, #1
 80088da:	d102      	bne.n	80088e2 <_read_r+0x1e>
 80088dc:	682b      	ldr	r3, [r5, #0]
 80088de:	b103      	cbz	r3, 80088e2 <_read_r+0x1e>
 80088e0:	6023      	str	r3, [r4, #0]
 80088e2:	bd38      	pop	{r3, r4, r5, pc}
 80088e4:	200043cc 	.word	0x200043cc

080088e8 <__swbuf_r>:
 80088e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088ea:	460e      	mov	r6, r1
 80088ec:	4614      	mov	r4, r2
 80088ee:	4605      	mov	r5, r0
 80088f0:	b118      	cbz	r0, 80088fa <__swbuf_r+0x12>
 80088f2:	6983      	ldr	r3, [r0, #24]
 80088f4:	b90b      	cbnz	r3, 80088fa <__swbuf_r+0x12>
 80088f6:	f7fd fb07 	bl	8005f08 <__sinit>
 80088fa:	4b21      	ldr	r3, [pc, #132]	; (8008980 <__swbuf_r+0x98>)
 80088fc:	429c      	cmp	r4, r3
 80088fe:	d12b      	bne.n	8008958 <__swbuf_r+0x70>
 8008900:	686c      	ldr	r4, [r5, #4]
 8008902:	69a3      	ldr	r3, [r4, #24]
 8008904:	60a3      	str	r3, [r4, #8]
 8008906:	89a3      	ldrh	r3, [r4, #12]
 8008908:	071a      	lsls	r2, r3, #28
 800890a:	d52f      	bpl.n	800896c <__swbuf_r+0x84>
 800890c:	6923      	ldr	r3, [r4, #16]
 800890e:	b36b      	cbz	r3, 800896c <__swbuf_r+0x84>
 8008910:	6923      	ldr	r3, [r4, #16]
 8008912:	6820      	ldr	r0, [r4, #0]
 8008914:	1ac0      	subs	r0, r0, r3
 8008916:	6963      	ldr	r3, [r4, #20]
 8008918:	b2f6      	uxtb	r6, r6
 800891a:	4283      	cmp	r3, r0
 800891c:	4637      	mov	r7, r6
 800891e:	dc04      	bgt.n	800892a <__swbuf_r+0x42>
 8008920:	4621      	mov	r1, r4
 8008922:	4628      	mov	r0, r5
 8008924:	f7ff f8cc 	bl	8007ac0 <_fflush_r>
 8008928:	bb30      	cbnz	r0, 8008978 <__swbuf_r+0x90>
 800892a:	68a3      	ldr	r3, [r4, #8]
 800892c:	3b01      	subs	r3, #1
 800892e:	60a3      	str	r3, [r4, #8]
 8008930:	6823      	ldr	r3, [r4, #0]
 8008932:	1c5a      	adds	r2, r3, #1
 8008934:	6022      	str	r2, [r4, #0]
 8008936:	701e      	strb	r6, [r3, #0]
 8008938:	6963      	ldr	r3, [r4, #20]
 800893a:	3001      	adds	r0, #1
 800893c:	4283      	cmp	r3, r0
 800893e:	d004      	beq.n	800894a <__swbuf_r+0x62>
 8008940:	89a3      	ldrh	r3, [r4, #12]
 8008942:	07db      	lsls	r3, r3, #31
 8008944:	d506      	bpl.n	8008954 <__swbuf_r+0x6c>
 8008946:	2e0a      	cmp	r6, #10
 8008948:	d104      	bne.n	8008954 <__swbuf_r+0x6c>
 800894a:	4621      	mov	r1, r4
 800894c:	4628      	mov	r0, r5
 800894e:	f7ff f8b7 	bl	8007ac0 <_fflush_r>
 8008952:	b988      	cbnz	r0, 8008978 <__swbuf_r+0x90>
 8008954:	4638      	mov	r0, r7
 8008956:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008958:	4b0a      	ldr	r3, [pc, #40]	; (8008984 <__swbuf_r+0x9c>)
 800895a:	429c      	cmp	r4, r3
 800895c:	d101      	bne.n	8008962 <__swbuf_r+0x7a>
 800895e:	68ac      	ldr	r4, [r5, #8]
 8008960:	e7cf      	b.n	8008902 <__swbuf_r+0x1a>
 8008962:	4b09      	ldr	r3, [pc, #36]	; (8008988 <__swbuf_r+0xa0>)
 8008964:	429c      	cmp	r4, r3
 8008966:	bf08      	it	eq
 8008968:	68ec      	ldreq	r4, [r5, #12]
 800896a:	e7ca      	b.n	8008902 <__swbuf_r+0x1a>
 800896c:	4621      	mov	r1, r4
 800896e:	4628      	mov	r0, r5
 8008970:	f000 f80c 	bl	800898c <__swsetup_r>
 8008974:	2800      	cmp	r0, #0
 8008976:	d0cb      	beq.n	8008910 <__swbuf_r+0x28>
 8008978:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800897c:	e7ea      	b.n	8008954 <__swbuf_r+0x6c>
 800897e:	bf00      	nop
 8008980:	08008f58 	.word	0x08008f58
 8008984:	08008f78 	.word	0x08008f78
 8008988:	08008f38 	.word	0x08008f38

0800898c <__swsetup_r>:
 800898c:	4b32      	ldr	r3, [pc, #200]	; (8008a58 <__swsetup_r+0xcc>)
 800898e:	b570      	push	{r4, r5, r6, lr}
 8008990:	681d      	ldr	r5, [r3, #0]
 8008992:	4606      	mov	r6, r0
 8008994:	460c      	mov	r4, r1
 8008996:	b125      	cbz	r5, 80089a2 <__swsetup_r+0x16>
 8008998:	69ab      	ldr	r3, [r5, #24]
 800899a:	b913      	cbnz	r3, 80089a2 <__swsetup_r+0x16>
 800899c:	4628      	mov	r0, r5
 800899e:	f7fd fab3 	bl	8005f08 <__sinit>
 80089a2:	4b2e      	ldr	r3, [pc, #184]	; (8008a5c <__swsetup_r+0xd0>)
 80089a4:	429c      	cmp	r4, r3
 80089a6:	d10f      	bne.n	80089c8 <__swsetup_r+0x3c>
 80089a8:	686c      	ldr	r4, [r5, #4]
 80089aa:	89a3      	ldrh	r3, [r4, #12]
 80089ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80089b0:	0719      	lsls	r1, r3, #28
 80089b2:	d42c      	bmi.n	8008a0e <__swsetup_r+0x82>
 80089b4:	06dd      	lsls	r5, r3, #27
 80089b6:	d411      	bmi.n	80089dc <__swsetup_r+0x50>
 80089b8:	2309      	movs	r3, #9
 80089ba:	6033      	str	r3, [r6, #0]
 80089bc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80089c0:	81a3      	strh	r3, [r4, #12]
 80089c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80089c6:	e03e      	b.n	8008a46 <__swsetup_r+0xba>
 80089c8:	4b25      	ldr	r3, [pc, #148]	; (8008a60 <__swsetup_r+0xd4>)
 80089ca:	429c      	cmp	r4, r3
 80089cc:	d101      	bne.n	80089d2 <__swsetup_r+0x46>
 80089ce:	68ac      	ldr	r4, [r5, #8]
 80089d0:	e7eb      	b.n	80089aa <__swsetup_r+0x1e>
 80089d2:	4b24      	ldr	r3, [pc, #144]	; (8008a64 <__swsetup_r+0xd8>)
 80089d4:	429c      	cmp	r4, r3
 80089d6:	bf08      	it	eq
 80089d8:	68ec      	ldreq	r4, [r5, #12]
 80089da:	e7e6      	b.n	80089aa <__swsetup_r+0x1e>
 80089dc:	0758      	lsls	r0, r3, #29
 80089de:	d512      	bpl.n	8008a06 <__swsetup_r+0x7a>
 80089e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80089e2:	b141      	cbz	r1, 80089f6 <__swsetup_r+0x6a>
 80089e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80089e8:	4299      	cmp	r1, r3
 80089ea:	d002      	beq.n	80089f2 <__swsetup_r+0x66>
 80089ec:	4630      	mov	r0, r6
 80089ee:	f7ff fc67 	bl	80082c0 <_free_r>
 80089f2:	2300      	movs	r3, #0
 80089f4:	6363      	str	r3, [r4, #52]	; 0x34
 80089f6:	89a3      	ldrh	r3, [r4, #12]
 80089f8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80089fc:	81a3      	strh	r3, [r4, #12]
 80089fe:	2300      	movs	r3, #0
 8008a00:	6063      	str	r3, [r4, #4]
 8008a02:	6923      	ldr	r3, [r4, #16]
 8008a04:	6023      	str	r3, [r4, #0]
 8008a06:	89a3      	ldrh	r3, [r4, #12]
 8008a08:	f043 0308 	orr.w	r3, r3, #8
 8008a0c:	81a3      	strh	r3, [r4, #12]
 8008a0e:	6923      	ldr	r3, [r4, #16]
 8008a10:	b94b      	cbnz	r3, 8008a26 <__swsetup_r+0x9a>
 8008a12:	89a3      	ldrh	r3, [r4, #12]
 8008a14:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008a18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a1c:	d003      	beq.n	8008a26 <__swsetup_r+0x9a>
 8008a1e:	4621      	mov	r1, r4
 8008a20:	4630      	mov	r0, r6
 8008a22:	f000 f877 	bl	8008b14 <__smakebuf_r>
 8008a26:	89a0      	ldrh	r0, [r4, #12]
 8008a28:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008a2c:	f010 0301 	ands.w	r3, r0, #1
 8008a30:	d00a      	beq.n	8008a48 <__swsetup_r+0xbc>
 8008a32:	2300      	movs	r3, #0
 8008a34:	60a3      	str	r3, [r4, #8]
 8008a36:	6963      	ldr	r3, [r4, #20]
 8008a38:	425b      	negs	r3, r3
 8008a3a:	61a3      	str	r3, [r4, #24]
 8008a3c:	6923      	ldr	r3, [r4, #16]
 8008a3e:	b943      	cbnz	r3, 8008a52 <__swsetup_r+0xc6>
 8008a40:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008a44:	d1ba      	bne.n	80089bc <__swsetup_r+0x30>
 8008a46:	bd70      	pop	{r4, r5, r6, pc}
 8008a48:	0781      	lsls	r1, r0, #30
 8008a4a:	bf58      	it	pl
 8008a4c:	6963      	ldrpl	r3, [r4, #20]
 8008a4e:	60a3      	str	r3, [r4, #8]
 8008a50:	e7f4      	b.n	8008a3c <__swsetup_r+0xb0>
 8008a52:	2000      	movs	r0, #0
 8008a54:	e7f7      	b.n	8008a46 <__swsetup_r+0xba>
 8008a56:	bf00      	nop
 8008a58:	20000010 	.word	0x20000010
 8008a5c:	08008f58 	.word	0x08008f58
 8008a60:	08008f78 	.word	0x08008f78
 8008a64:	08008f38 	.word	0x08008f38

08008a68 <__assert_func>:
 8008a68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008a6a:	4614      	mov	r4, r2
 8008a6c:	461a      	mov	r2, r3
 8008a6e:	4b09      	ldr	r3, [pc, #36]	; (8008a94 <__assert_func+0x2c>)
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	4605      	mov	r5, r0
 8008a74:	68d8      	ldr	r0, [r3, #12]
 8008a76:	b14c      	cbz	r4, 8008a8c <__assert_func+0x24>
 8008a78:	4b07      	ldr	r3, [pc, #28]	; (8008a98 <__assert_func+0x30>)
 8008a7a:	9100      	str	r1, [sp, #0]
 8008a7c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008a80:	4906      	ldr	r1, [pc, #24]	; (8008a9c <__assert_func+0x34>)
 8008a82:	462b      	mov	r3, r5
 8008a84:	f000 f80e 	bl	8008aa4 <fiprintf>
 8008a88:	f000 f8ec 	bl	8008c64 <abort>
 8008a8c:	4b04      	ldr	r3, [pc, #16]	; (8008aa0 <__assert_func+0x38>)
 8008a8e:	461c      	mov	r4, r3
 8008a90:	e7f3      	b.n	8008a7a <__assert_func+0x12>
 8008a92:	bf00      	nop
 8008a94:	20000010 	.word	0x20000010
 8008a98:	080091cd 	.word	0x080091cd
 8008a9c:	080091da 	.word	0x080091da
 8008aa0:	08009208 	.word	0x08009208

08008aa4 <fiprintf>:
 8008aa4:	b40e      	push	{r1, r2, r3}
 8008aa6:	b503      	push	{r0, r1, lr}
 8008aa8:	4601      	mov	r1, r0
 8008aaa:	ab03      	add	r3, sp, #12
 8008aac:	4805      	ldr	r0, [pc, #20]	; (8008ac4 <fiprintf+0x20>)
 8008aae:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ab2:	6800      	ldr	r0, [r0, #0]
 8008ab4:	9301      	str	r3, [sp, #4]
 8008ab6:	f7ff fdd5 	bl	8008664 <_vfiprintf_r>
 8008aba:	b002      	add	sp, #8
 8008abc:	f85d eb04 	ldr.w	lr, [sp], #4
 8008ac0:	b003      	add	sp, #12
 8008ac2:	4770      	bx	lr
 8008ac4:	20000010 	.word	0x20000010

08008ac8 <__swhatbuf_r>:
 8008ac8:	b570      	push	{r4, r5, r6, lr}
 8008aca:	460e      	mov	r6, r1
 8008acc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ad0:	2900      	cmp	r1, #0
 8008ad2:	b096      	sub	sp, #88	; 0x58
 8008ad4:	4614      	mov	r4, r2
 8008ad6:	461d      	mov	r5, r3
 8008ad8:	da08      	bge.n	8008aec <__swhatbuf_r+0x24>
 8008ada:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008ade:	2200      	movs	r2, #0
 8008ae0:	602a      	str	r2, [r5, #0]
 8008ae2:	061a      	lsls	r2, r3, #24
 8008ae4:	d410      	bmi.n	8008b08 <__swhatbuf_r+0x40>
 8008ae6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008aea:	e00e      	b.n	8008b0a <__swhatbuf_r+0x42>
 8008aec:	466a      	mov	r2, sp
 8008aee:	f000 f8c1 	bl	8008c74 <_fstat_r>
 8008af2:	2800      	cmp	r0, #0
 8008af4:	dbf1      	blt.n	8008ada <__swhatbuf_r+0x12>
 8008af6:	9a01      	ldr	r2, [sp, #4]
 8008af8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008afc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008b00:	425a      	negs	r2, r3
 8008b02:	415a      	adcs	r2, r3
 8008b04:	602a      	str	r2, [r5, #0]
 8008b06:	e7ee      	b.n	8008ae6 <__swhatbuf_r+0x1e>
 8008b08:	2340      	movs	r3, #64	; 0x40
 8008b0a:	2000      	movs	r0, #0
 8008b0c:	6023      	str	r3, [r4, #0]
 8008b0e:	b016      	add	sp, #88	; 0x58
 8008b10:	bd70      	pop	{r4, r5, r6, pc}
	...

08008b14 <__smakebuf_r>:
 8008b14:	898b      	ldrh	r3, [r1, #12]
 8008b16:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008b18:	079d      	lsls	r5, r3, #30
 8008b1a:	4606      	mov	r6, r0
 8008b1c:	460c      	mov	r4, r1
 8008b1e:	d507      	bpl.n	8008b30 <__smakebuf_r+0x1c>
 8008b20:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008b24:	6023      	str	r3, [r4, #0]
 8008b26:	6123      	str	r3, [r4, #16]
 8008b28:	2301      	movs	r3, #1
 8008b2a:	6163      	str	r3, [r4, #20]
 8008b2c:	b002      	add	sp, #8
 8008b2e:	bd70      	pop	{r4, r5, r6, pc}
 8008b30:	ab01      	add	r3, sp, #4
 8008b32:	466a      	mov	r2, sp
 8008b34:	f7ff ffc8 	bl	8008ac8 <__swhatbuf_r>
 8008b38:	9900      	ldr	r1, [sp, #0]
 8008b3a:	4605      	mov	r5, r0
 8008b3c:	4630      	mov	r0, r6
 8008b3e:	f7fd fadf 	bl	8006100 <_malloc_r>
 8008b42:	b948      	cbnz	r0, 8008b58 <__smakebuf_r+0x44>
 8008b44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b48:	059a      	lsls	r2, r3, #22
 8008b4a:	d4ef      	bmi.n	8008b2c <__smakebuf_r+0x18>
 8008b4c:	f023 0303 	bic.w	r3, r3, #3
 8008b50:	f043 0302 	orr.w	r3, r3, #2
 8008b54:	81a3      	strh	r3, [r4, #12]
 8008b56:	e7e3      	b.n	8008b20 <__smakebuf_r+0xc>
 8008b58:	4b0d      	ldr	r3, [pc, #52]	; (8008b90 <__smakebuf_r+0x7c>)
 8008b5a:	62b3      	str	r3, [r6, #40]	; 0x28
 8008b5c:	89a3      	ldrh	r3, [r4, #12]
 8008b5e:	6020      	str	r0, [r4, #0]
 8008b60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b64:	81a3      	strh	r3, [r4, #12]
 8008b66:	9b00      	ldr	r3, [sp, #0]
 8008b68:	6163      	str	r3, [r4, #20]
 8008b6a:	9b01      	ldr	r3, [sp, #4]
 8008b6c:	6120      	str	r0, [r4, #16]
 8008b6e:	b15b      	cbz	r3, 8008b88 <__smakebuf_r+0x74>
 8008b70:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008b74:	4630      	mov	r0, r6
 8008b76:	f000 f88f 	bl	8008c98 <_isatty_r>
 8008b7a:	b128      	cbz	r0, 8008b88 <__smakebuf_r+0x74>
 8008b7c:	89a3      	ldrh	r3, [r4, #12]
 8008b7e:	f023 0303 	bic.w	r3, r3, #3
 8008b82:	f043 0301 	orr.w	r3, r3, #1
 8008b86:	81a3      	strh	r3, [r4, #12]
 8008b88:	89a0      	ldrh	r0, [r4, #12]
 8008b8a:	4305      	orrs	r5, r0
 8008b8c:	81a5      	strh	r5, [r4, #12]
 8008b8e:	e7cd      	b.n	8008b2c <__smakebuf_r+0x18>
 8008b90:	08005ea1 	.word	0x08005ea1

08008b94 <__ascii_mbtowc>:
 8008b94:	b082      	sub	sp, #8
 8008b96:	b901      	cbnz	r1, 8008b9a <__ascii_mbtowc+0x6>
 8008b98:	a901      	add	r1, sp, #4
 8008b9a:	b142      	cbz	r2, 8008bae <__ascii_mbtowc+0x1a>
 8008b9c:	b14b      	cbz	r3, 8008bb2 <__ascii_mbtowc+0x1e>
 8008b9e:	7813      	ldrb	r3, [r2, #0]
 8008ba0:	600b      	str	r3, [r1, #0]
 8008ba2:	7812      	ldrb	r2, [r2, #0]
 8008ba4:	1e10      	subs	r0, r2, #0
 8008ba6:	bf18      	it	ne
 8008ba8:	2001      	movne	r0, #1
 8008baa:	b002      	add	sp, #8
 8008bac:	4770      	bx	lr
 8008bae:	4610      	mov	r0, r2
 8008bb0:	e7fb      	b.n	8008baa <__ascii_mbtowc+0x16>
 8008bb2:	f06f 0001 	mvn.w	r0, #1
 8008bb6:	e7f8      	b.n	8008baa <__ascii_mbtowc+0x16>

08008bb8 <memmove>:
 8008bb8:	4288      	cmp	r0, r1
 8008bba:	b510      	push	{r4, lr}
 8008bbc:	eb01 0402 	add.w	r4, r1, r2
 8008bc0:	d902      	bls.n	8008bc8 <memmove+0x10>
 8008bc2:	4284      	cmp	r4, r0
 8008bc4:	4623      	mov	r3, r4
 8008bc6:	d807      	bhi.n	8008bd8 <memmove+0x20>
 8008bc8:	1e43      	subs	r3, r0, #1
 8008bca:	42a1      	cmp	r1, r4
 8008bcc:	d008      	beq.n	8008be0 <memmove+0x28>
 8008bce:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008bd2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008bd6:	e7f8      	b.n	8008bca <memmove+0x12>
 8008bd8:	4402      	add	r2, r0
 8008bda:	4601      	mov	r1, r0
 8008bdc:	428a      	cmp	r2, r1
 8008bde:	d100      	bne.n	8008be2 <memmove+0x2a>
 8008be0:	bd10      	pop	{r4, pc}
 8008be2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008be6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008bea:	e7f7      	b.n	8008bdc <memmove+0x24>

08008bec <_realloc_r>:
 8008bec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008bf0:	4680      	mov	r8, r0
 8008bf2:	4614      	mov	r4, r2
 8008bf4:	460e      	mov	r6, r1
 8008bf6:	b921      	cbnz	r1, 8008c02 <_realloc_r+0x16>
 8008bf8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008bfc:	4611      	mov	r1, r2
 8008bfe:	f7fd ba7f 	b.w	8006100 <_malloc_r>
 8008c02:	b92a      	cbnz	r2, 8008c10 <_realloc_r+0x24>
 8008c04:	f7ff fb5c 	bl	80082c0 <_free_r>
 8008c08:	4625      	mov	r5, r4
 8008c0a:	4628      	mov	r0, r5
 8008c0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c10:	f000 f852 	bl	8008cb8 <_malloc_usable_size_r>
 8008c14:	4284      	cmp	r4, r0
 8008c16:	4607      	mov	r7, r0
 8008c18:	d802      	bhi.n	8008c20 <_realloc_r+0x34>
 8008c1a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008c1e:	d812      	bhi.n	8008c46 <_realloc_r+0x5a>
 8008c20:	4621      	mov	r1, r4
 8008c22:	4640      	mov	r0, r8
 8008c24:	f7fd fa6c 	bl	8006100 <_malloc_r>
 8008c28:	4605      	mov	r5, r0
 8008c2a:	2800      	cmp	r0, #0
 8008c2c:	d0ed      	beq.n	8008c0a <_realloc_r+0x1e>
 8008c2e:	42bc      	cmp	r4, r7
 8008c30:	4622      	mov	r2, r4
 8008c32:	4631      	mov	r1, r6
 8008c34:	bf28      	it	cs
 8008c36:	463a      	movcs	r2, r7
 8008c38:	f7fd fa2b 	bl	8006092 <memcpy>
 8008c3c:	4631      	mov	r1, r6
 8008c3e:	4640      	mov	r0, r8
 8008c40:	f7ff fb3e 	bl	80082c0 <_free_r>
 8008c44:	e7e1      	b.n	8008c0a <_realloc_r+0x1e>
 8008c46:	4635      	mov	r5, r6
 8008c48:	e7df      	b.n	8008c0a <_realloc_r+0x1e>

08008c4a <__ascii_wctomb>:
 8008c4a:	b149      	cbz	r1, 8008c60 <__ascii_wctomb+0x16>
 8008c4c:	2aff      	cmp	r2, #255	; 0xff
 8008c4e:	bf85      	ittet	hi
 8008c50:	238a      	movhi	r3, #138	; 0x8a
 8008c52:	6003      	strhi	r3, [r0, #0]
 8008c54:	700a      	strbls	r2, [r1, #0]
 8008c56:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8008c5a:	bf98      	it	ls
 8008c5c:	2001      	movls	r0, #1
 8008c5e:	4770      	bx	lr
 8008c60:	4608      	mov	r0, r1
 8008c62:	4770      	bx	lr

08008c64 <abort>:
 8008c64:	b508      	push	{r3, lr}
 8008c66:	2006      	movs	r0, #6
 8008c68:	f000 f856 	bl	8008d18 <raise>
 8008c6c:	2001      	movs	r0, #1
 8008c6e:	f7f8 ff83 	bl	8001b78 <_exit>
	...

08008c74 <_fstat_r>:
 8008c74:	b538      	push	{r3, r4, r5, lr}
 8008c76:	4d07      	ldr	r5, [pc, #28]	; (8008c94 <_fstat_r+0x20>)
 8008c78:	2300      	movs	r3, #0
 8008c7a:	4604      	mov	r4, r0
 8008c7c:	4608      	mov	r0, r1
 8008c7e:	4611      	mov	r1, r2
 8008c80:	602b      	str	r3, [r5, #0]
 8008c82:	f7f8 ffc8 	bl	8001c16 <_fstat>
 8008c86:	1c43      	adds	r3, r0, #1
 8008c88:	d102      	bne.n	8008c90 <_fstat_r+0x1c>
 8008c8a:	682b      	ldr	r3, [r5, #0]
 8008c8c:	b103      	cbz	r3, 8008c90 <_fstat_r+0x1c>
 8008c8e:	6023      	str	r3, [r4, #0]
 8008c90:	bd38      	pop	{r3, r4, r5, pc}
 8008c92:	bf00      	nop
 8008c94:	200043cc 	.word	0x200043cc

08008c98 <_isatty_r>:
 8008c98:	b538      	push	{r3, r4, r5, lr}
 8008c9a:	4d06      	ldr	r5, [pc, #24]	; (8008cb4 <_isatty_r+0x1c>)
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	4604      	mov	r4, r0
 8008ca0:	4608      	mov	r0, r1
 8008ca2:	602b      	str	r3, [r5, #0]
 8008ca4:	f7f8 ffc7 	bl	8001c36 <_isatty>
 8008ca8:	1c43      	adds	r3, r0, #1
 8008caa:	d102      	bne.n	8008cb2 <_isatty_r+0x1a>
 8008cac:	682b      	ldr	r3, [r5, #0]
 8008cae:	b103      	cbz	r3, 8008cb2 <_isatty_r+0x1a>
 8008cb0:	6023      	str	r3, [r4, #0]
 8008cb2:	bd38      	pop	{r3, r4, r5, pc}
 8008cb4:	200043cc 	.word	0x200043cc

08008cb8 <_malloc_usable_size_r>:
 8008cb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008cbc:	1f18      	subs	r0, r3, #4
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	bfbc      	itt	lt
 8008cc2:	580b      	ldrlt	r3, [r1, r0]
 8008cc4:	18c0      	addlt	r0, r0, r3
 8008cc6:	4770      	bx	lr

08008cc8 <_raise_r>:
 8008cc8:	291f      	cmp	r1, #31
 8008cca:	b538      	push	{r3, r4, r5, lr}
 8008ccc:	4604      	mov	r4, r0
 8008cce:	460d      	mov	r5, r1
 8008cd0:	d904      	bls.n	8008cdc <_raise_r+0x14>
 8008cd2:	2316      	movs	r3, #22
 8008cd4:	6003      	str	r3, [r0, #0]
 8008cd6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008cda:	bd38      	pop	{r3, r4, r5, pc}
 8008cdc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008cde:	b112      	cbz	r2, 8008ce6 <_raise_r+0x1e>
 8008ce0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008ce4:	b94b      	cbnz	r3, 8008cfa <_raise_r+0x32>
 8008ce6:	4620      	mov	r0, r4
 8008ce8:	f000 f830 	bl	8008d4c <_getpid_r>
 8008cec:	462a      	mov	r2, r5
 8008cee:	4601      	mov	r1, r0
 8008cf0:	4620      	mov	r0, r4
 8008cf2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008cf6:	f000 b817 	b.w	8008d28 <_kill_r>
 8008cfa:	2b01      	cmp	r3, #1
 8008cfc:	d00a      	beq.n	8008d14 <_raise_r+0x4c>
 8008cfe:	1c59      	adds	r1, r3, #1
 8008d00:	d103      	bne.n	8008d0a <_raise_r+0x42>
 8008d02:	2316      	movs	r3, #22
 8008d04:	6003      	str	r3, [r0, #0]
 8008d06:	2001      	movs	r0, #1
 8008d08:	e7e7      	b.n	8008cda <_raise_r+0x12>
 8008d0a:	2400      	movs	r4, #0
 8008d0c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008d10:	4628      	mov	r0, r5
 8008d12:	4798      	blx	r3
 8008d14:	2000      	movs	r0, #0
 8008d16:	e7e0      	b.n	8008cda <_raise_r+0x12>

08008d18 <raise>:
 8008d18:	4b02      	ldr	r3, [pc, #8]	; (8008d24 <raise+0xc>)
 8008d1a:	4601      	mov	r1, r0
 8008d1c:	6818      	ldr	r0, [r3, #0]
 8008d1e:	f7ff bfd3 	b.w	8008cc8 <_raise_r>
 8008d22:	bf00      	nop
 8008d24:	20000010 	.word	0x20000010

08008d28 <_kill_r>:
 8008d28:	b538      	push	{r3, r4, r5, lr}
 8008d2a:	4d07      	ldr	r5, [pc, #28]	; (8008d48 <_kill_r+0x20>)
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	4604      	mov	r4, r0
 8008d30:	4608      	mov	r0, r1
 8008d32:	4611      	mov	r1, r2
 8008d34:	602b      	str	r3, [r5, #0]
 8008d36:	f7f8 ff0f 	bl	8001b58 <_kill>
 8008d3a:	1c43      	adds	r3, r0, #1
 8008d3c:	d102      	bne.n	8008d44 <_kill_r+0x1c>
 8008d3e:	682b      	ldr	r3, [r5, #0]
 8008d40:	b103      	cbz	r3, 8008d44 <_kill_r+0x1c>
 8008d42:	6023      	str	r3, [r4, #0]
 8008d44:	bd38      	pop	{r3, r4, r5, pc}
 8008d46:	bf00      	nop
 8008d48:	200043cc 	.word	0x200043cc

08008d4c <_getpid_r>:
 8008d4c:	f7f8 befc 	b.w	8001b48 <_getpid>

08008d50 <_init>:
 8008d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d52:	bf00      	nop
 8008d54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d56:	bc08      	pop	{r3}
 8008d58:	469e      	mov	lr, r3
 8008d5a:	4770      	bx	lr

08008d5c <_fini>:
 8008d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d5e:	bf00      	nop
 8008d60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d62:	bc08      	pop	{r3}
 8008d64:	469e      	mov	lr, r3
 8008d66:	4770      	bx	lr
