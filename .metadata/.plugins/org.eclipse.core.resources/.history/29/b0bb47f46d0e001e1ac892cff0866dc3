#include "stm32f4xx_hal.h"
#include "stdio.h"

I2C_HandleTypeDef hi2c;

#define ADDR 0x38

void SystemClock_Config(void);
void GPIO_Init(void);
void I2C_Init(void);

int main(void)
{
    uint8_t buf[7];
    int32_t SRH;
    float RH;
    int32_t ST;
    float degC;

    HAL_Init();
    SystemClock_Config();
    GPIO_Init();
    I2C_Init();

    HAL_Delay(100);  // wait after power-on reset
    HAL_I2C_Master_Transmit(&hi2c, ADDR, (uint8_t[]) {0x71}, 1, HAL_MAX_DELAY);  // write 0x71 to get status
    HAL_Delay(100);
    HAL_I2C_Master_Receive(&hi2c, ADDR, buf, 2, HAL_MAX_DELAY);  // read bytes from device
    if (buf[0] != 0x18)
    {
        printf("Expected to read 0x18 but got: ");
        for (int i = 0; i < 2; i++)
            printf("%02x ", buf[i]);
        printf("\n");
        HAL_Delay(100);
    }

    while (1)
    {
        buf[0] = 0xAC;  // trigger measurement command
        buf[1] = 0x33;
        buf[2] = 0x00;
        HAL_I2C_Master_Transmit(&hi2c, ADDR, buf, 3, HAL_MAX_DELAY);  // start conversion
        HAL_Delay(80);  // AHT25 takes 80 milliseconds to do one conversion

        HAL_I2C_Master_Receive(&hi2c, ADDR, buf, 6, HAL_MAX_DELAY);  // read bytes from device (can ignore 7th byte=CRC)
        HAL_I2C_Master_Receive(&hi2c, ADDR, buf, 7, HAL_MAX_DELAY);
        SRH = (buf[1] << 12) | (buf[2] << 4) | (buf[3] >> 4);
        RH = (SRH * 100.0) / 0x100000;  // humidity in percent

        ST = ((buf[3] & 0x0F) << 16) | (buf[4] << 8) | buf[5];
        degC = (ST / (1 << 20)) * 200.0 - 50;  // temperature in degrees C

        printf("T: %.3f C  RH: %.2f\n", degC, RH);
        HAL_Delay(500);  // delay between reads
    }
}

void SystemClock_Config(void)
{
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

    __HAL_RCC_PWR_CLK_ENABLE();
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
    RCC_OscInitStruct.PLL.PLLM = 16;
    RCC_OscInitStruct.PLL.PLLN = 336;
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
    RCC_OscInitStruct.PLL.PLLQ = 7;
//    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
//    {
//        Error_Handler();
//    }

    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
    {
        Error_Handler();
    }
}

void GPIO_Init(void)
{
    __HAL_RCC_GPIOB_CLK_ENABLE();

    GPIO_InitTypeDef GPIO_InitStruct = {0};

    GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
}

void I2C_Init(void)
{
    __HAL_RCC_I2C1_CLK_ENABLE();

    hi2c.Instance = I2C1;
    hi2c.Init.ClockSpeed = 400000;
    hi2c.Init.DutyCycle = I2C_DUTYCYCLE_2;
    hi2c.Init.OwnAddress1 = 0;
    hi2c.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
    hi2c.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
    hi2c.Init.OwnAddress2 = 0;
    hi2c.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
    hi2c.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
//    if (HAL_I2C_Init(&hi2c) != HAL_OK)
//    {
//        Error_Handler();
//    }

    HAL_I2CEx_ConfigAnalogFilter(&hi2c, I2C_ANALOGFILTER_ENABLE);
    HAL_I2CEx_ConfigDigitalFilter(&hi2c, 0);
}
